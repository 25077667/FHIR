/**
 * (C) Copyright IBM Corp. 2019
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package com.ibm.watsonhealth.fhir.model.parser;

import java.io.InputStream;
import java.io.Reader;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Set;
import java.util.Stack;
import java.util.StringJoiner;

import javax.json.Json;
import javax.json.JsonArray;
import javax.json.JsonNumber;
import javax.json.JsonObject;
import javax.json.JsonReader;
import javax.json.JsonReaderFactory;
import javax.json.JsonString;
import javax.json.JsonValue;

import com.ibm.watsonhealth.fhir.model.parser.FHIRParser;
import com.ibm.watsonhealth.fhir.model.parser.exception.FHIRParserException;
import com.ibm.watsonhealth.fhir.model.resource.*;
import com.ibm.watsonhealth.fhir.model.type.*;
import com.ibm.watsonhealth.fhir.model.type.Boolean;
import com.ibm.watsonhealth.fhir.model.type.Integer;
import com.ibm.watsonhealth.fhir.model.type.String;
import com.ibm.watsonhealth.fhir.model.util.ElementFilter;
import com.ibm.watsonhealth.fhir.model.util.FHIRUtil;
import com.ibm.watsonhealth.fhir.model.util.JsonSupport;

public class FHIRJsonParser implements FHIRParser {
    public static boolean DEBUG = false;
    protected static final JsonReaderFactory JSON_READER_FACTORY = Json.createReaderFactory(null);

    protected final Stack<java.lang.String> stack = new Stack<>();

    protected FHIRJsonParser() {
        // only visible to subclasses or classes/interfaces in the same package (e.g. FHIRParser)
    }

    @Override
    public <T extends Resource> T parse(InputStream in) throws FHIRParserException {
        return parseAndFilter(in, null);
    }

    public <T extends Resource> T parseAndFilter(InputStream in, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try (JsonReader jsonReader = JSON_READER_FACTORY.createReader(in, StandardCharsets.UTF_8)) {
            JsonObject jsonObject = jsonReader.readObject();
            return parseAndFilter(jsonObject, elementsToInclude);
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    @Override
    public <T extends Resource> T parse(Reader reader) throws FHIRParserException {
        return parseAndFilter(reader, null);
    }

    public <T extends Resource> T parseAndFilter(Reader reader, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try (JsonReader jsonReader = JSON_READER_FACTORY.createReader(reader)) {
            JsonObject jsonObject = jsonReader.readObject();
            return parseAndFilter(jsonObject, elementsToInclude);
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    public <T extends Resource> T parse(JsonObject jsonObject) throws FHIRParserException {
        return parseAndFilter(jsonObject, null);
    }

    @SuppressWarnings("unchecked")
    public <T extends Resource> T parseAndFilter(JsonObject jsonObject, Collection<java.lang.String> elementsToInclude) throws FHIRParserException {
        try {
            reset();
            java.lang.String resourceType = getResourceType(jsonObject);
            if (elementsToInclude != null) {
                ElementFilter elementFilter = new ElementFilter(resourceType, elementsToInclude);
                jsonObject = elementFilter.apply(jsonObject);
            }
            return (T) parseResource(resourceType, jsonObject, -1);
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    @Override
    public void reset() {
        stack.clear();
    }

    protected Resource parseResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        java.lang.String resourceType = getResourceType(jsonObject);
        switch (resourceType) {
        case "Account":
            return parseAccount(elementName, jsonObject, elementIndex);
        case "ActivityDefinition":
            return parseActivityDefinition(elementName, jsonObject, elementIndex);
        case "AdverseEvent":
            return parseAdverseEvent(elementName, jsonObject, elementIndex);
        case "AllergyIntolerance":
            return parseAllergyIntolerance(elementName, jsonObject, elementIndex);
        case "Appointment":
            return parseAppointment(elementName, jsonObject, elementIndex);
        case "AppointmentResponse":
            return parseAppointmentResponse(elementName, jsonObject, elementIndex);
        case "AuditEvent":
            return parseAuditEvent(elementName, jsonObject, elementIndex);
        case "Basic":
            return parseBasic(elementName, jsonObject, elementIndex);
        case "Binary":
            return parseBinary(elementName, jsonObject, elementIndex);
        case "BiologicallyDerivedProduct":
            return parseBiologicallyDerivedProduct(elementName, jsonObject, elementIndex);
        case "BodyStructure":
            return parseBodyStructure(elementName, jsonObject, elementIndex);
        case "Bundle":
            return parseBundle(elementName, jsonObject, elementIndex);
        case "CapabilityStatement":
            return parseCapabilityStatement(elementName, jsonObject, elementIndex);
        case "CarePlan":
            return parseCarePlan(elementName, jsonObject, elementIndex);
        case "CareTeam":
            return parseCareTeam(elementName, jsonObject, elementIndex);
        case "CatalogEntry":
            return parseCatalogEntry(elementName, jsonObject, elementIndex);
        case "ChargeItem":
            return parseChargeItem(elementName, jsonObject, elementIndex);
        case "ChargeItemDefinition":
            return parseChargeItemDefinition(elementName, jsonObject, elementIndex);
        case "Claim":
            return parseClaim(elementName, jsonObject, elementIndex);
        case "ClaimResponse":
            return parseClaimResponse(elementName, jsonObject, elementIndex);
        case "ClinicalImpression":
            return parseClinicalImpression(elementName, jsonObject, elementIndex);
        case "CodeSystem":
            return parseCodeSystem(elementName, jsonObject, elementIndex);
        case "Communication":
            return parseCommunication(elementName, jsonObject, elementIndex);
        case "CommunicationRequest":
            return parseCommunicationRequest(elementName, jsonObject, elementIndex);
        case "CompartmentDefinition":
            return parseCompartmentDefinition(elementName, jsonObject, elementIndex);
        case "Composition":
            return parseComposition(elementName, jsonObject, elementIndex);
        case "ConceptMap":
            return parseConceptMap(elementName, jsonObject, elementIndex);
        case "Condition":
            return parseCondition(elementName, jsonObject, elementIndex);
        case "Consent":
            return parseConsent(elementName, jsonObject, elementIndex);
        case "Contract":
            return parseContract(elementName, jsonObject, elementIndex);
        case "Coverage":
            return parseCoverage(elementName, jsonObject, elementIndex);
        case "CoverageEligibilityRequest":
            return parseCoverageEligibilityRequest(elementName, jsonObject, elementIndex);
        case "CoverageEligibilityResponse":
            return parseCoverageEligibilityResponse(elementName, jsonObject, elementIndex);
        case "DetectedIssue":
            return parseDetectedIssue(elementName, jsonObject, elementIndex);
        case "Device":
            return parseDevice(elementName, jsonObject, elementIndex);
        case "DeviceDefinition":
            return parseDeviceDefinition(elementName, jsonObject, elementIndex);
        case "DeviceMetric":
            return parseDeviceMetric(elementName, jsonObject, elementIndex);
        case "DeviceRequest":
            return parseDeviceRequest(elementName, jsonObject, elementIndex);
        case "DeviceUseStatement":
            return parseDeviceUseStatement(elementName, jsonObject, elementIndex);
        case "DiagnosticReport":
            return parseDiagnosticReport(elementName, jsonObject, elementIndex);
        case "DocumentManifest":
            return parseDocumentManifest(elementName, jsonObject, elementIndex);
        case "DocumentReference":
            return parseDocumentReference(elementName, jsonObject, elementIndex);
        case "EffectEvidenceSynthesis":
            return parseEffectEvidenceSynthesis(elementName, jsonObject, elementIndex);
        case "Encounter":
            return parseEncounter(elementName, jsonObject, elementIndex);
        case "Endpoint":
            return parseEndpoint(elementName, jsonObject, elementIndex);
        case "EnrollmentRequest":
            return parseEnrollmentRequest(elementName, jsonObject, elementIndex);
        case "EnrollmentResponse":
            return parseEnrollmentResponse(elementName, jsonObject, elementIndex);
        case "EpisodeOfCare":
            return parseEpisodeOfCare(elementName, jsonObject, elementIndex);
        case "EventDefinition":
            return parseEventDefinition(elementName, jsonObject, elementIndex);
        case "Evidence":
            return parseEvidence(elementName, jsonObject, elementIndex);
        case "EvidenceVariable":
            return parseEvidenceVariable(elementName, jsonObject, elementIndex);
        case "ExampleScenario":
            return parseExampleScenario(elementName, jsonObject, elementIndex);
        case "ExplanationOfBenefit":
            return parseExplanationOfBenefit(elementName, jsonObject, elementIndex);
        case "FamilyMemberHistory":
            return parseFamilyMemberHistory(elementName, jsonObject, elementIndex);
        case "Flag":
            return parseFlag(elementName, jsonObject, elementIndex);
        case "Goal":
            return parseGoal(elementName, jsonObject, elementIndex);
        case "GraphDefinition":
            return parseGraphDefinition(elementName, jsonObject, elementIndex);
        case "Group":
            return parseGroup(elementName, jsonObject, elementIndex);
        case "GuidanceResponse":
            return parseGuidanceResponse(elementName, jsonObject, elementIndex);
        case "HealthcareService":
            return parseHealthcareService(elementName, jsonObject, elementIndex);
        case "ImagingStudy":
            return parseImagingStudy(elementName, jsonObject, elementIndex);
        case "Immunization":
            return parseImmunization(elementName, jsonObject, elementIndex);
        case "ImmunizationEvaluation":
            return parseImmunizationEvaluation(elementName, jsonObject, elementIndex);
        case "ImmunizationRecommendation":
            return parseImmunizationRecommendation(elementName, jsonObject, elementIndex);
        case "ImplementationGuide":
            return parseImplementationGuide(elementName, jsonObject, elementIndex);
        case "InsurancePlan":
            return parseInsurancePlan(elementName, jsonObject, elementIndex);
        case "Invoice":
            return parseInvoice(elementName, jsonObject, elementIndex);
        case "Library":
            return parseLibrary(elementName, jsonObject, elementIndex);
        case "Linkage":
            return parseLinkage(elementName, jsonObject, elementIndex);
        case "List":
            return parseList(elementName, jsonObject, elementIndex);
        case "Location":
            return parseLocation(elementName, jsonObject, elementIndex);
        case "Measure":
            return parseMeasure(elementName, jsonObject, elementIndex);
        case "MeasureReport":
            return parseMeasureReport(elementName, jsonObject, elementIndex);
        case "Media":
            return parseMedia(elementName, jsonObject, elementIndex);
        case "Medication":
            return parseMedication(elementName, jsonObject, elementIndex);
        case "MedicationAdministration":
            return parseMedicationAdministration(elementName, jsonObject, elementIndex);
        case "MedicationDispense":
            return parseMedicationDispense(elementName, jsonObject, elementIndex);
        case "MedicationKnowledge":
            return parseMedicationKnowledge(elementName, jsonObject, elementIndex);
        case "MedicationRequest":
            return parseMedicationRequest(elementName, jsonObject, elementIndex);
        case "MedicationStatement":
            return parseMedicationStatement(elementName, jsonObject, elementIndex);
        case "MedicinalProduct":
            return parseMedicinalProduct(elementName, jsonObject, elementIndex);
        case "MedicinalProductAuthorization":
            return parseMedicinalProductAuthorization(elementName, jsonObject, elementIndex);
        case "MedicinalProductContraindication":
            return parseMedicinalProductContraindication(elementName, jsonObject, elementIndex);
        case "MedicinalProductIndication":
            return parseMedicinalProductIndication(elementName, jsonObject, elementIndex);
        case "MedicinalProductIngredient":
            return parseMedicinalProductIngredient(elementName, jsonObject, elementIndex);
        case "MedicinalProductInteraction":
            return parseMedicinalProductInteraction(elementName, jsonObject, elementIndex);
        case "MedicinalProductManufactured":
            return parseMedicinalProductManufactured(elementName, jsonObject, elementIndex);
        case "MedicinalProductPackaged":
            return parseMedicinalProductPackaged(elementName, jsonObject, elementIndex);
        case "MedicinalProductPharmaceutical":
            return parseMedicinalProductPharmaceutical(elementName, jsonObject, elementIndex);
        case "MedicinalProductUndesirableEffect":
            return parseMedicinalProductUndesirableEffect(elementName, jsonObject, elementIndex);
        case "MessageDefinition":
            return parseMessageDefinition(elementName, jsonObject, elementIndex);
        case "MessageHeader":
            return parseMessageHeader(elementName, jsonObject, elementIndex);
        case "MetadataResource":
            return parseMetadataResource(elementName, jsonObject, elementIndex);
        case "MolecularSequence":
            return parseMolecularSequence(elementName, jsonObject, elementIndex);
        case "NamingSystem":
            return parseNamingSystem(elementName, jsonObject, elementIndex);
        case "NutritionOrder":
            return parseNutritionOrder(elementName, jsonObject, elementIndex);
        case "Observation":
            return parseObservation(elementName, jsonObject, elementIndex);
        case "ObservationDefinition":
            return parseObservationDefinition(elementName, jsonObject, elementIndex);
        case "OperationDefinition":
            return parseOperationDefinition(elementName, jsonObject, elementIndex);
        case "OperationOutcome":
            return parseOperationOutcome(elementName, jsonObject, elementIndex);
        case "Organization":
            return parseOrganization(elementName, jsonObject, elementIndex);
        case "OrganizationAffiliation":
            return parseOrganizationAffiliation(elementName, jsonObject, elementIndex);
        case "Parameters":
            return parseParameters(elementName, jsonObject, elementIndex);
        case "Patient":
            return parsePatient(elementName, jsonObject, elementIndex);
        case "PaymentNotice":
            return parsePaymentNotice(elementName, jsonObject, elementIndex);
        case "PaymentReconciliation":
            return parsePaymentReconciliation(elementName, jsonObject, elementIndex);
        case "Person":
            return parsePerson(elementName, jsonObject, elementIndex);
        case "PlanDefinition":
            return parsePlanDefinition(elementName, jsonObject, elementIndex);
        case "Practitioner":
            return parsePractitioner(elementName, jsonObject, elementIndex);
        case "PractitionerRole":
            return parsePractitionerRole(elementName, jsonObject, elementIndex);
        case "Procedure":
            return parseProcedure(elementName, jsonObject, elementIndex);
        case "Provenance":
            return parseProvenance(elementName, jsonObject, elementIndex);
        case "Questionnaire":
            return parseQuestionnaire(elementName, jsonObject, elementIndex);
        case "QuestionnaireResponse":
            return parseQuestionnaireResponse(elementName, jsonObject, elementIndex);
        case "RelatedPerson":
            return parseRelatedPerson(elementName, jsonObject, elementIndex);
        case "RequestGroup":
            return parseRequestGroup(elementName, jsonObject, elementIndex);
        case "ResearchDefinition":
            return parseResearchDefinition(elementName, jsonObject, elementIndex);
        case "ResearchElementDefinition":
            return parseResearchElementDefinition(elementName, jsonObject, elementIndex);
        case "ResearchStudy":
            return parseResearchStudy(elementName, jsonObject, elementIndex);
        case "ResearchSubject":
            return parseResearchSubject(elementName, jsonObject, elementIndex);
        case "RiskAssessment":
            return parseRiskAssessment(elementName, jsonObject, elementIndex);
        case "RiskEvidenceSynthesis":
            return parseRiskEvidenceSynthesis(elementName, jsonObject, elementIndex);
        case "Schedule":
            return parseSchedule(elementName, jsonObject, elementIndex);
        case "SearchParameter":
            return parseSearchParameter(elementName, jsonObject, elementIndex);
        case "ServiceRequest":
            return parseServiceRequest(elementName, jsonObject, elementIndex);
        case "Slot":
            return parseSlot(elementName, jsonObject, elementIndex);
        case "Specimen":
            return parseSpecimen(elementName, jsonObject, elementIndex);
        case "SpecimenDefinition":
            return parseSpecimenDefinition(elementName, jsonObject, elementIndex);
        case "StructureDefinition":
            return parseStructureDefinition(elementName, jsonObject, elementIndex);
        case "StructureMap":
            return parseStructureMap(elementName, jsonObject, elementIndex);
        case "Subscription":
            return parseSubscription(elementName, jsonObject, elementIndex);
        case "Substance":
            return parseSubstance(elementName, jsonObject, elementIndex);
        case "SubstanceNucleicAcid":
            return parseSubstanceNucleicAcid(elementName, jsonObject, elementIndex);
        case "SubstancePolymer":
            return parseSubstancePolymer(elementName, jsonObject, elementIndex);
        case "SubstanceProtein":
            return parseSubstanceProtein(elementName, jsonObject, elementIndex);
        case "SubstanceReferenceInformation":
            return parseSubstanceReferenceInformation(elementName, jsonObject, elementIndex);
        case "SubstanceSourceMaterial":
            return parseSubstanceSourceMaterial(elementName, jsonObject, elementIndex);
        case "SubstanceSpecification":
            return parseSubstanceSpecification(elementName, jsonObject, elementIndex);
        case "SupplyDelivery":
            return parseSupplyDelivery(elementName, jsonObject, elementIndex);
        case "SupplyRequest":
            return parseSupplyRequest(elementName, jsonObject, elementIndex);
        case "Task":
            return parseTask(elementName, jsonObject, elementIndex);
        case "TerminologyCapabilities":
            return parseTerminologyCapabilities(elementName, jsonObject, elementIndex);
        case "TestReport":
            return parseTestReport(elementName, jsonObject, elementIndex);
        case "TestScript":
            return parseTestScript(elementName, jsonObject, elementIndex);
        case "ValueSet":
            return parseValueSet(elementName, jsonObject, elementIndex);
        case "VerificationResult":
            return parseVerificationResult(elementName, jsonObject, elementIndex);
        case "VisionPrescription":
            return parseVisionPrescription(elementName, jsonObject, elementIndex);
        }
        return null;
    }

    protected Account parseAccount(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Account", jsonObject);
        AccountStatus status = (AccountStatus) parseString(AccountStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Account.Builder builder = Account.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.servicePeriod(parsePeriod("servicePeriod", JsonSupport.getJsonValue(jsonObject, "servicePeriod", JsonObject.class), -1));
        JsonArray coverageArray = JsonSupport.getJsonArray(jsonObject, "coverage");
        if (coverageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : coverageArray) {
                builder.coverage(parseAccountCoverage("coverage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.owner(parseReference("owner", JsonSupport.getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray guarantorArray = JsonSupport.getJsonArray(jsonObject, "guarantor");
        if (guarantorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : guarantorArray) {
                builder.guarantor(parseAccountGuarantor("guarantor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.partOf(parseReference("partOf", JsonSupport.getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Account.Coverage parseAccountCoverage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Account.Coverage", jsonObject);
        Reference coverage = parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1);
        Account.Coverage.Builder builder = Account.Coverage.builder(coverage);
        parseBackboneElement(builder, jsonObject);
        builder.priority((PositiveInt) parseInteger(PositiveInt.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonNumber.class), jsonObject.get("_priority"), -1));
        stackPop();
        return builder.build();
    }

    protected Account.Guarantor parseAccountGuarantor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Account.Guarantor", jsonObject);
        Reference party = parseReference("party", JsonSupport.getJsonValue(jsonObject, "party", JsonObject.class), -1);
        Account.Guarantor.Builder builder = Account.Guarantor.builder(party);
        parseBackboneElement(builder, jsonObject);
        builder.onHold(parseBoolean("onHold", JsonSupport.getJsonValue(jsonObject, "onHold", JsonValue.class), jsonObject.get("_onHold"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ActivityDefinition parseActivityDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ActivityDefinition", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ActivityDefinition.Builder builder = ActivityDefinition.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray libraryArray = JsonSupport.getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            int index = 0;
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (JsonValue jsonValue : libraryArray) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", jsonValue, JsonSupport.getJsonValue(_libraryArray, index), index));
                index++;
            }
        }
        builder.kind((ActivityDefinitionKind) parseString(ActivityDefinitionKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", JsonSupport.getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, "Timing", "DateTime", "Age", "Period", "Range", "Duration"));
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parseActivityDefinitionParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.product(parseChoiceElement("product", jsonObject, "Reference", "CodeableConcept"));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray dosageArray = JsonSupport.getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dosageArray) {
                builder.dosage(parseDosage("dosage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray bodySiteArray = JsonSupport.getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : bodySiteArray) {
                builder.bodySite(parseCodeableConcept("bodySite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specimenRequirementArray = JsonSupport.getJsonArray(jsonObject, "specimenRequirement");
        if (specimenRequirementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specimenRequirementArray) {
                builder.specimenRequirement(parseReference("specimenRequirement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray observationRequirementArray = JsonSupport.getJsonArray(jsonObject, "observationRequirement");
        if (observationRequirementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : observationRequirementArray) {
                builder.observationRequirement(parseReference("observationRequirement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray observationResultRequirementArray = JsonSupport.getJsonArray(jsonObject, "observationResultRequirement");
        if (observationResultRequirementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : observationResultRequirementArray) {
                builder.observationResultRequirement(parseReference("observationResultRequirement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.transform((Canonical) parseUri(Canonical.builder(), "transform", JsonSupport.getJsonValue(jsonObject, "transform", JsonString.class), jsonObject.get("_transform"), -1));
        JsonArray dynamicValueArray = JsonSupport.getJsonArray(jsonObject, "dynamicValue");
        if (dynamicValueArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dynamicValueArray) {
                builder.dynamicValue(parseActivityDefinitionDynamicValue("dynamicValue", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ActivityDefinition.DynamicValue parseActivityDefinitionDynamicValue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ActivityDefinition.DynamicValue", jsonObject);
        String path = parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1);
        Expression expression = parseExpression("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonObject.class), -1);
        ActivityDefinition.DynamicValue.Builder builder = ActivityDefinition.DynamicValue.builder(path, expression);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ActivityDefinition.Participant parseActivityDefinitionParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ActivityDefinition.Participant", jsonObject);
        ActivityParticipantType type = (ActivityParticipantType) parseString(ActivityParticipantType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        ActivityDefinition.Participant.Builder builder = ActivityDefinition.Participant.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Address parseAddress(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Address", jsonObject);
        Address.Builder builder = Address.builder();
        parseElement(builder, jsonObject);
        builder.use((AddressUse) parseString(AddressUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.type((AddressType) parseString(AddressType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray lineArray = JsonSupport.getJsonArray(jsonObject, "line", true);
        if (lineArray != null) {
            int index = 0;
            JsonArray _lineArray = jsonObject.getJsonArray("_line");
            for (JsonValue jsonValue : lineArray) {
                builder.line(parseString("line", jsonValue, JsonSupport.getJsonValue(_lineArray, index), index));
                index++;
            }
        }
        builder.city(parseString("city", JsonSupport.getJsonValue(jsonObject, "city", JsonString.class), jsonObject.get("_city"), -1));
        builder.district(parseString("district", JsonSupport.getJsonValue(jsonObject, "district", JsonString.class), jsonObject.get("_district"), -1));
        builder.state(parseString("state", JsonSupport.getJsonValue(jsonObject, "state", JsonString.class), jsonObject.get("_state"), -1));
        builder.postalCode(parseString("postalCode", JsonSupport.getJsonValue(jsonObject, "postalCode", JsonString.class), jsonObject.get("_postalCode"), -1));
        builder.country(parseString("country", JsonSupport.getJsonValue(jsonObject, "country", JsonString.class), jsonObject.get("_country"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected AdverseEvent parseAdverseEvent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AdverseEvent", jsonObject);
        AdverseEventActuality actuality = (AdverseEventActuality) parseString(AdverseEventActuality.builder(), "actuality", JsonSupport.getJsonValue(jsonObject, "actuality", JsonString.class), jsonObject.get("_actuality"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        AdverseEvent.Builder builder = AdverseEvent.builder(actuality, subject);
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.event(parseCodeableConcept("event", JsonSupport.getJsonValue(jsonObject, "event", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.detected(parseDateTime("detected", JsonSupport.getJsonValue(jsonObject, "detected", JsonString.class), jsonObject.get("_detected"), -1));
        builder.recordedDate(parseDateTime("recordedDate", JsonSupport.getJsonValue(jsonObject, "recordedDate", JsonString.class), jsonObject.get("_recordedDate"), -1));
        JsonArray resultingConditionArray = JsonSupport.getJsonArray(jsonObject, "resultingCondition");
        if (resultingConditionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resultingConditionArray) {
                builder.resultingCondition(parseReference("resultingCondition", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.seriousness(parseCodeableConcept("seriousness", JsonSupport.getJsonValue(jsonObject, "seriousness", JsonObject.class), -1));
        builder.severity(parseCodeableConcept("severity", JsonSupport.getJsonValue(jsonObject, "severity", JsonObject.class), -1));
        builder.outcome(parseCodeableConcept("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.recorder(parseReference("recorder", JsonSupport.getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        JsonArray contributorArray = JsonSupport.getJsonArray(jsonObject, "contributor");
        if (contributorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contributorArray) {
                builder.contributor(parseReference("contributor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray suspectEntityArray = JsonSupport.getJsonArray(jsonObject, "suspectEntity");
        if (suspectEntityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : suspectEntityArray) {
                builder.suspectEntity(parseAdverseEventSuspectEntity("suspectEntity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray subjectMedicalHistoryArray = JsonSupport.getJsonArray(jsonObject, "subjectMedicalHistory");
        if (subjectMedicalHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectMedicalHistoryArray) {
                builder.subjectMedicalHistory(parseReference("subjectMedicalHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray referenceDocumentArray = JsonSupport.getJsonArray(jsonObject, "referenceDocument");
        if (referenceDocumentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceDocumentArray) {
                builder.referenceDocument(parseReference("referenceDocument", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray studyArray = JsonSupport.getJsonArray(jsonObject, "study");
        if (studyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : studyArray) {
                builder.study(parseReference("study", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected AdverseEvent.SuspectEntity parseAdverseEventSuspectEntity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AdverseEvent.SuspectEntity", jsonObject);
        Reference instance = parseReference("instance", JsonSupport.getJsonValue(jsonObject, "instance", JsonObject.class), -1);
        AdverseEvent.SuspectEntity.Builder builder = AdverseEvent.SuspectEntity.builder(instance);
        parseBackboneElement(builder, jsonObject);
        JsonArray causalityArray = JsonSupport.getJsonArray(jsonObject, "causality");
        if (causalityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : causalityArray) {
                builder.causality(parseAdverseEventSuspectEntityCausality("causality", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected AdverseEvent.SuspectEntity.Causality parseAdverseEventSuspectEntityCausality(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AdverseEvent.SuspectEntity.Causality", jsonObject);
        AdverseEvent.SuspectEntity.Causality.Builder builder = AdverseEvent.SuspectEntity.Causality.builder();
        parseBackboneElement(builder, jsonObject);
        builder.assessment(parseCodeableConcept("assessment", JsonSupport.getJsonValue(jsonObject, "assessment", JsonObject.class), -1));
        builder.productRelatedness(parseString("productRelatedness", JsonSupport.getJsonValue(jsonObject, "productRelatedness", JsonString.class), jsonObject.get("_productRelatedness"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected AllergyIntolerance parseAllergyIntolerance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AllergyIntolerance", jsonObject);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        AllergyIntolerance.Builder builder = AllergyIntolerance.builder(patient);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.clinicalStatus(parseCodeableConcept("clinicalStatus", JsonSupport.getJsonValue(jsonObject, "clinicalStatus", JsonObject.class), -1));
        builder.verificationStatus(parseCodeableConcept("verificationStatus", JsonSupport.getJsonValue(jsonObject, "verificationStatus", JsonObject.class), -1));
        builder.type((AllergyIntoleranceType) parseString(AllergyIntoleranceType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category", true);
        if (categoryArray != null) {
            int index = 0;
            JsonArray _categoryArray = jsonObject.getJsonArray("_category");
            for (JsonValue jsonValue : categoryArray) {
                builder.category((AllergyIntoleranceCategory) parseString(AllergyIntoleranceCategory.builder(), "category", jsonValue, JsonSupport.getJsonValue(_categoryArray, index), index));
                index++;
            }
        }
        builder.criticality((AllergyIntoleranceCriticality) parseString(AllergyIntoleranceCriticality.builder(), "criticality", JsonSupport.getJsonValue(jsonObject, "criticality", JsonString.class), jsonObject.get("_criticality"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.onset(parseChoiceElement("onset", jsonObject, "DateTime", "Age", "Period", "Range", "String"));
        builder.recordedDate(parseDateTime("recordedDate", JsonSupport.getJsonValue(jsonObject, "recordedDate", JsonString.class), jsonObject.get("_recordedDate"), -1));
        builder.recorder(parseReference("recorder", JsonSupport.getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        builder.asserter(parseReference("asserter", JsonSupport.getJsonValue(jsonObject, "asserter", JsonObject.class), -1));
        builder.lastOccurrence(parseDateTime("lastOccurrence", JsonSupport.getJsonValue(jsonObject, "lastOccurrence", JsonString.class), jsonObject.get("_lastOccurrence"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reactionArray = JsonSupport.getJsonArray(jsonObject, "reaction");
        if (reactionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reactionArray) {
                builder.reaction(parseAllergyIntoleranceReaction("reaction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected AllergyIntolerance.Reaction parseAllergyIntoleranceReaction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AllergyIntolerance.Reaction", jsonObject);
        java.util.List<CodeableConcept> manifestation = new ArrayList<>();
        JsonArray manifestationArray = JsonSupport.getJsonArray(jsonObject, "manifestation");
        if (manifestationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manifestationArray) {
                manifestation.add(parseCodeableConcept("manifestation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        AllergyIntolerance.Reaction.Builder builder = AllergyIntolerance.Reaction.builder(manifestation);
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseCodeableConcept("substance", JsonSupport.getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.onset(parseDateTime("onset", JsonSupport.getJsonValue(jsonObject, "onset", JsonString.class), jsonObject.get("_onset"), -1));
        builder.severity((AllergyIntoleranceSeverity) parseString(AllergyIntoleranceSeverity.builder(), "severity", JsonSupport.getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1));
        builder.exposureRoute(parseCodeableConcept("exposureRoute", JsonSupport.getJsonValue(jsonObject, "exposureRoute", JsonObject.class), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Annotation parseAnnotation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Annotation", jsonObject);
        Markdown text = (Markdown) parseString(Markdown.builder(), "text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1);
        Annotation.Builder builder = Annotation.builder(text);
        parseElement(builder, jsonObject);
        builder.author(parseChoiceElement("author", jsonObject, "Reference", "String"));
        builder.time(parseDateTime("time", JsonSupport.getJsonValue(jsonObject, "time", JsonString.class), jsonObject.get("_time"), -1));
        stackPop();
        return builder.build();
    }

    protected Appointment parseAppointment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Appointment", jsonObject);
        AppointmentStatus status = (AppointmentStatus) parseString(AppointmentStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<Appointment.Participant> participant = new ArrayList<>();
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                participant.add(parseAppointmentParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Appointment.Builder builder = Appointment.builder(status, participant);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.cancelationReason(parseCodeableConcept("cancelationReason", JsonSupport.getJsonValue(jsonObject, "cancelationReason", JsonObject.class), -1));
        JsonArray serviceCategoryArray = JsonSupport.getJsonArray(jsonObject, "serviceCategory");
        if (serviceCategoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceCategoryArray) {
                builder.serviceCategory(parseCodeableConcept("serviceCategory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray serviceTypeArray = JsonSupport.getJsonArray(jsonObject, "serviceType");
        if (serviceTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceTypeArray) {
                builder.serviceType(parseCodeableConcept("serviceType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialtyArray = JsonSupport.getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialtyArray) {
                builder.specialty(parseCodeableConcept("specialty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.appointmentType(parseCodeableConcept("appointmentType", JsonSupport.getJsonValue(jsonObject, "appointmentType", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority((UnsignedInt) parseInteger(UnsignedInt.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonNumber.class), jsonObject.get("_priority"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray supportingInformationArray = JsonSupport.getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInformationArray) {
                builder.supportingInformation(parseReference("supportingInformation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.start(parseInstant("start", JsonSupport.getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseInstant("end", JsonSupport.getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        builder.minutesDuration((PositiveInt) parseInteger(PositiveInt.builder(), "minutesDuration", JsonSupport.getJsonValue(jsonObject, "minutesDuration", JsonNumber.class), jsonObject.get("_minutesDuration"), -1));
        JsonArray slotArray = JsonSupport.getJsonArray(jsonObject, "slot");
        if (slotArray != null) {
            int index = 0;
            for (JsonValue jsonValue : slotArray) {
                builder.slot(parseReference("slot", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.created(parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.patientInstruction(parseString("patientInstruction", JsonSupport.getJsonValue(jsonObject, "patientInstruction", JsonString.class), jsonObject.get("_patientInstruction"), -1));
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray requestedPeriodArray = JsonSupport.getJsonArray(jsonObject, "requestedPeriod");
        if (requestedPeriodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : requestedPeriodArray) {
                builder.requestedPeriod(parsePeriod("requestedPeriod", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Appointment.Participant parseAppointmentParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Appointment.Participant", jsonObject);
        ParticipationStatus status = (ParticipationStatus) parseString(ParticipationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Appointment.Participant.Builder builder = Appointment.Participant.builder(status);
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.actor(parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        builder.required((ParticipantRequired) parseString(ParticipantRequired.builder(), "required", JsonSupport.getJsonValue(jsonObject, "required", JsonString.class), jsonObject.get("_required"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected AppointmentResponse parseAppointmentResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AppointmentResponse", jsonObject);
        Reference appointment = parseReference("appointment", JsonSupport.getJsonValue(jsonObject, "appointment", JsonObject.class), -1);
        ParticipantStatus participantStatus = (ParticipantStatus) parseString(ParticipantStatus.builder(), "participantStatus", JsonSupport.getJsonValue(jsonObject, "participantStatus", JsonString.class), jsonObject.get("_participantStatus"), -1);
        AppointmentResponse.Builder builder = AppointmentResponse.builder(appointment, participantStatus);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.start(parseInstant("start", JsonSupport.getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseInstant("end", JsonSupport.getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        JsonArray participantTypeArray = JsonSupport.getJsonArray(jsonObject, "participantType");
        if (participantTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantTypeArray) {
                builder.participantType(parseCodeableConcept("participantType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.actor(parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected Attachment parseAttachment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Attachment", jsonObject);
        Attachment.Builder builder = Attachment.builder();
        parseElement(builder, jsonObject);
        builder.contentType((Code) parseString(Code.builder(), "contentType", JsonSupport.getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.language((Code) parseString(Code.builder(), "language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.data(parseBase64Binary("data", JsonSupport.getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.size((UnsignedInt) parseInteger(UnsignedInt.builder(), "size", JsonSupport.getJsonValue(jsonObject, "size", JsonNumber.class), jsonObject.get("_size"), -1));
        builder.hash(parseBase64Binary("hash", JsonSupport.getJsonValue(jsonObject, "hash", JsonString.class), jsonObject.get("_hash"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.creation(parseDateTime("creation", JsonSupport.getJsonValue(jsonObject, "creation", JsonString.class), jsonObject.get("_creation"), -1));
        stackPop();
        return builder.build();
    }

    protected AuditEvent parseAuditEvent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AuditEvent", jsonObject);
        Coding type = parseCoding("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Instant recorded = parseInstant("recorded", JsonSupport.getJsonValue(jsonObject, "recorded", JsonString.class), jsonObject.get("_recorded"), -1);
        java.util.List<AuditEvent.Agent> agent = new ArrayList<>();
        JsonArray agentArray = JsonSupport.getJsonArray(jsonObject, "agent");
        if (agentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : agentArray) {
                agent.add(parseAuditEventAgent("agent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        AuditEvent.Source source = parseAuditEventSource("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1);
        AuditEvent.Builder builder = AuditEvent.builder(type, recorded, agent, source);
        parseDomainResource(builder, jsonObject);
        JsonArray subtypeArray = JsonSupport.getJsonArray(jsonObject, "subtype");
        if (subtypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subtypeArray) {
                builder.subtype(parseCoding("subtype", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.action((AuditEventAction) parseString(AuditEventAction.builder(), "action", JsonSupport.getJsonValue(jsonObject, "action", JsonString.class), jsonObject.get("_action"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.outcome((AuditEventOutcome) parseString(AuditEventOutcome.builder(), "outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.outcomeDesc(parseString("outcomeDesc", JsonSupport.getJsonValue(jsonObject, "outcomeDesc", JsonString.class), jsonObject.get("_outcomeDesc"), -1));
        JsonArray purposeOfEventArray = JsonSupport.getJsonArray(jsonObject, "purposeOfEvent");
        if (purposeOfEventArray != null) {
            int index = 0;
            for (JsonValue jsonValue : purposeOfEventArray) {
                builder.purposeOfEvent(parseCodeableConcept("purposeOfEvent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray entityArray = JsonSupport.getJsonArray(jsonObject, "entity");
        if (entityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : entityArray) {
                builder.entity(parseAuditEventEntity("entity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected AuditEvent.Agent parseAuditEventAgent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AuditEvent.Agent", jsonObject);
        Boolean requestor = parseBoolean("requestor", JsonSupport.getJsonValue(jsonObject, "requestor", JsonValue.class), jsonObject.get("_requestor"), -1);
        AuditEvent.Agent.Builder builder = AuditEvent.Agent.builder(requestor);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray roleArray = JsonSupport.getJsonArray(jsonObject, "role");
        if (roleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : roleArray) {
                builder.role(parseCodeableConcept("role", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.who(parseReference("who", JsonSupport.getJsonValue(jsonObject, "who", JsonObject.class), -1));
        builder.altId(parseString("altId", JsonSupport.getJsonValue(jsonObject, "altId", JsonString.class), jsonObject.get("_altId"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray policyArray = JsonSupport.getJsonArray(jsonObject, "policy", true);
        if (policyArray != null) {
            int index = 0;
            JsonArray _policyArray = jsonObject.getJsonArray("_policy");
            for (JsonValue jsonValue : policyArray) {
                builder.policy(parseUri("policy", jsonValue, JsonSupport.getJsonValue(_policyArray, index), index));
                index++;
            }
        }
        builder.media(parseCoding("media", JsonSupport.getJsonValue(jsonObject, "media", JsonObject.class), -1));
        builder.network(parseAuditEventAgentNetwork("network", JsonSupport.getJsonValue(jsonObject, "network", JsonObject.class), -1));
        JsonArray purposeOfUseArray = JsonSupport.getJsonArray(jsonObject, "purposeOfUse");
        if (purposeOfUseArray != null) {
            int index = 0;
            for (JsonValue jsonValue : purposeOfUseArray) {
                builder.purposeOfUse(parseCodeableConcept("purposeOfUse", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected AuditEvent.Agent.Network parseAuditEventAgentNetwork(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AuditEvent.Agent.Network", jsonObject);
        AuditEvent.Agent.Network.Builder builder = AuditEvent.Agent.Network.builder();
        parseBackboneElement(builder, jsonObject);
        builder.address(parseString("address", JsonSupport.getJsonValue(jsonObject, "address", JsonString.class), jsonObject.get("_address"), -1));
        builder.type((AuditEventAgentNetworkType) parseString(AuditEventAgentNetworkType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    protected AuditEvent.Entity parseAuditEventEntity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AuditEvent.Entity", jsonObject);
        AuditEvent.Entity.Builder builder = AuditEvent.Entity.builder();
        parseBackboneElement(builder, jsonObject);
        builder.what(parseReference("what", JsonSupport.getJsonValue(jsonObject, "what", JsonObject.class), -1));
        builder.type(parseCoding("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.role(parseCoding("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.lifecycle(parseCoding("lifecycle", JsonSupport.getJsonValue(jsonObject, "lifecycle", JsonObject.class), -1));
        JsonArray securityLabelArray = JsonSupport.getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            int index = 0;
            for (JsonValue jsonValue : securityLabelArray) {
                builder.securityLabel(parseCoding("securityLabel", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.query(parseBase64Binary("query", JsonSupport.getJsonValue(jsonObject, "query", JsonString.class), jsonObject.get("_query"), -1));
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseAuditEventEntityDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected AuditEvent.Entity.Detail parseAuditEventEntityDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AuditEvent.Entity.Detail", jsonObject);
        String type = parseString("type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Element value = parseChoiceElement("value", jsonObject, "String", "Base64Binary");
        AuditEvent.Entity.Detail.Builder builder = AuditEvent.Entity.Detail.builder(type, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected AuditEvent.Source parseAuditEventSource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("AuditEvent.Source", jsonObject);
        Reference observer = parseReference("observer", JsonSupport.getJsonValue(jsonObject, "observer", JsonObject.class), -1);
        AuditEvent.Source.Builder builder = AuditEvent.Source.builder(observer);
        parseBackboneElement(builder, jsonObject);
        builder.site(parseString("site", JsonSupport.getJsonValue(jsonObject, "site", JsonString.class), jsonObject.get("_site"), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCoding("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected void parseBackboneElement(BackboneElement.Builder builder, JsonObject jsonObject) {
        parseElement(builder, jsonObject);
        JsonArray modifierExtensionArray = JsonSupport.getJsonArray(jsonObject, "modifierExtension");
        if (modifierExtensionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierExtensionArray) {
                builder.modifierExtension(parseExtension("modifierExtension", (JsonObject) jsonValue, index));
                index++;
            }
        }
    }

    protected Base64Binary parseBase64Binary(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Base64Binary.Builder builder = Base64Binary.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected Basic parseBasic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Basic", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Basic.Builder builder = Basic.builder(code);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.created(parseDate("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Binary parseBinary(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Binary", jsonObject);
        Code contentType = (Code) parseString(Code.builder(), "contentType", JsonSupport.getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1);
        Binary.Builder builder = Binary.builder(contentType);
        parseResource(builder, jsonObject);
        builder.securityContext(parseReference("securityContext", JsonSupport.getJsonValue(jsonObject, "securityContext", JsonObject.class), -1));
        builder.data(parseBase64Binary("data", JsonSupport.getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    protected BiologicallyDerivedProduct parseBiologicallyDerivedProduct(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("BiologicallyDerivedProduct", jsonObject);
        BiologicallyDerivedProduct.Builder builder = BiologicallyDerivedProduct.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.productCategory((BiologicallyDerivedProductCategory) parseString(BiologicallyDerivedProductCategory.builder(), "productCategory", JsonSupport.getJsonValue(jsonObject, "productCategory", JsonString.class), jsonObject.get("_productCategory"), -1));
        builder.productCode(parseCodeableConcept("productCode", JsonSupport.getJsonValue(jsonObject, "productCode", JsonObject.class), -1));
        builder.status((BiologicallyDerivedProductStatus) parseString(BiologicallyDerivedProductStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray requestArray = JsonSupport.getJsonArray(jsonObject, "request");
        if (requestArray != null) {
            int index = 0;
            for (JsonValue jsonValue : requestArray) {
                builder.request(parseReference("request", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity(parseInteger("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonNumber.class), jsonObject.get("_quantity"), -1));
        JsonArray parentArray = JsonSupport.getJsonArray(jsonObject, "parent");
        if (parentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parentArray) {
                builder.parent(parseReference("parent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.collection(parseBiologicallyDerivedProductCollection("collection", JsonSupport.getJsonValue(jsonObject, "collection", JsonObject.class), -1));
        JsonArray processingArray = JsonSupport.getJsonArray(jsonObject, "processing");
        if (processingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processingArray) {
                builder.processing(parseBiologicallyDerivedProductProcessing("processing", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.manipulation(parseBiologicallyDerivedProductManipulation("manipulation", JsonSupport.getJsonValue(jsonObject, "manipulation", JsonObject.class), -1));
        JsonArray storageArray = JsonSupport.getJsonArray(jsonObject, "storage");
        if (storageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : storageArray) {
                builder.storage(parseBiologicallyDerivedProductStorage("storage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected BiologicallyDerivedProduct.Collection parseBiologicallyDerivedProductCollection(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("BiologicallyDerivedProduct.Collection", jsonObject);
        BiologicallyDerivedProduct.Collection.Builder builder = BiologicallyDerivedProduct.Collection.builder();
        parseBackboneElement(builder, jsonObject);
        builder.collector(parseReference("collector", JsonSupport.getJsonValue(jsonObject, "collector", JsonObject.class), -1));
        builder.source(parseReference("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.collected(parseChoiceElement("collected", jsonObject, "DateTime", "Period"));
        stackPop();
        return builder.build();
    }

    protected BiologicallyDerivedProduct.Manipulation parseBiologicallyDerivedProductManipulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("BiologicallyDerivedProduct.Manipulation", jsonObject);
        BiologicallyDerivedProduct.Manipulation.Builder builder = BiologicallyDerivedProduct.Manipulation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.time(parseChoiceElement("time", jsonObject, "DateTime", "Period"));
        stackPop();
        return builder.build();
    }

    protected BiologicallyDerivedProduct.Processing parseBiologicallyDerivedProductProcessing(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("BiologicallyDerivedProduct.Processing", jsonObject);
        BiologicallyDerivedProduct.Processing.Builder builder = BiologicallyDerivedProduct.Processing.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.procedure(parseCodeableConcept("procedure", JsonSupport.getJsonValue(jsonObject, "procedure", JsonObject.class), -1));
        builder.additive(parseReference("additive", JsonSupport.getJsonValue(jsonObject, "additive", JsonObject.class), -1));
        builder.time(parseChoiceElement("time", jsonObject, "DateTime", "Period"));
        stackPop();
        return builder.build();
    }

    protected BiologicallyDerivedProduct.Storage parseBiologicallyDerivedProductStorage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("BiologicallyDerivedProduct.Storage", jsonObject);
        BiologicallyDerivedProduct.Storage.Builder builder = BiologicallyDerivedProduct.Storage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.temperature(parseDecimal("temperature", JsonSupport.getJsonValue(jsonObject, "temperature", JsonNumber.class), jsonObject.get("_temperature"), -1));
        builder.scale((BiologicallyDerivedProductStorageScale) parseString(BiologicallyDerivedProductStorageScale.builder(), "scale", JsonSupport.getJsonValue(jsonObject, "scale", JsonString.class), jsonObject.get("_scale"), -1));
        builder.duration(parsePeriod("duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected BodyStructure parseBodyStructure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("BodyStructure", jsonObject);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        BodyStructure.Builder builder = BodyStructure.builder(patient);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.morphology(parseCodeableConcept("morphology", JsonSupport.getJsonValue(jsonObject, "morphology", JsonObject.class), -1));
        builder.location(parseCodeableConcept("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray locationQualifierArray = JsonSupport.getJsonArray(jsonObject, "locationQualifier");
        if (locationQualifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationQualifierArray) {
                builder.locationQualifier(parseCodeableConcept("locationQualifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray imageArray = JsonSupport.getJsonArray(jsonObject, "image");
        if (imageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : imageArray) {
                builder.image(parseAttachment("image", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Boolean parseBoolean(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Boolean.Builder builder = Boolean.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (JsonValue.TRUE.equals(jsonValue) || JsonValue.FALSE.equals(jsonValue)) {
            builder.value(JsonValue.TRUE.equals(jsonValue) ? java.lang.Boolean.TRUE : java.lang.Boolean.FALSE);
        }
        stackPop();
        return builder.build();
    }

    protected Bundle parseBundle(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Bundle", jsonObject);
        BundleType type = (BundleType) parseString(BundleType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Bundle.Builder builder = Bundle.builder(type);
        parseResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.timestamp(parseInstant("timestamp", JsonSupport.getJsonValue(jsonObject, "timestamp", JsonString.class), jsonObject.get("_timestamp"), -1));
        builder.total((UnsignedInt) parseInteger(UnsignedInt.builder(), "total", JsonSupport.getJsonValue(jsonObject, "total", JsonNumber.class), jsonObject.get("_total"), -1));
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parseBundleLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray entryArray = JsonSupport.getJsonArray(jsonObject, "entry");
        if (entryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : entryArray) {
                builder.entry(parseBundleEntry("entry", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.signature(parseSignature("signature", JsonSupport.getJsonValue(jsonObject, "signature", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Bundle.Entry parseBundleEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Bundle.Entry", jsonObject);
        Bundle.Entry.Builder builder = Bundle.Entry.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parseBundleLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.fullUrl(parseUri("fullUrl", JsonSupport.getJsonValue(jsonObject, "fullUrl", JsonString.class), jsonObject.get("_fullUrl"), -1));
        builder.resource(parseResource("resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        builder.search(parseBundleEntrySearch("search", JsonSupport.getJsonValue(jsonObject, "search", JsonObject.class), -1));
        builder.request(parseBundleEntryRequest("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.response(parseBundleEntryResponse("response", JsonSupport.getJsonValue(jsonObject, "response", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Bundle.Entry.Request parseBundleEntryRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Bundle.Entry.Request", jsonObject);
        HTTPVerb method = (HTTPVerb) parseString(HTTPVerb.builder(), "method", JsonSupport.getJsonValue(jsonObject, "method", JsonString.class), jsonObject.get("_method"), -1);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        Bundle.Entry.Request.Builder builder = Bundle.Entry.Request.builder(method, url);
        parseBackboneElement(builder, jsonObject);
        builder.ifNoneMatch(parseString("ifNoneMatch", JsonSupport.getJsonValue(jsonObject, "ifNoneMatch", JsonString.class), jsonObject.get("_ifNoneMatch"), -1));
        builder.ifModifiedSince(parseInstant("ifModifiedSince", JsonSupport.getJsonValue(jsonObject, "ifModifiedSince", JsonString.class), jsonObject.get("_ifModifiedSince"), -1));
        builder.ifMatch(parseString("ifMatch", JsonSupport.getJsonValue(jsonObject, "ifMatch", JsonString.class), jsonObject.get("_ifMatch"), -1));
        builder.ifNoneExist(parseString("ifNoneExist", JsonSupport.getJsonValue(jsonObject, "ifNoneExist", JsonString.class), jsonObject.get("_ifNoneExist"), -1));
        stackPop();
        return builder.build();
    }

    protected Bundle.Entry.Response parseBundleEntryResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Bundle.Entry.Response", jsonObject);
        String status = parseString("status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Bundle.Entry.Response.Builder builder = Bundle.Entry.Response.builder(status);
        parseBackboneElement(builder, jsonObject);
        builder.location(parseUri("location", JsonSupport.getJsonValue(jsonObject, "location", JsonString.class), jsonObject.get("_location"), -1));
        builder.etag(parseString("etag", JsonSupport.getJsonValue(jsonObject, "etag", JsonString.class), jsonObject.get("_etag"), -1));
        builder.lastModified(parseInstant("lastModified", JsonSupport.getJsonValue(jsonObject, "lastModified", JsonString.class), jsonObject.get("_lastModified"), -1));
        builder.outcome(parseResource("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Bundle.Entry.Search parseBundleEntrySearch(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Bundle.Entry.Search", jsonObject);
        Bundle.Entry.Search.Builder builder = Bundle.Entry.Search.builder();
        parseBackboneElement(builder, jsonObject);
        builder.mode((SearchEntryMode) parseString(SearchEntryMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.score(parseDecimal("score", JsonSupport.getJsonValue(jsonObject, "score", JsonNumber.class), jsonObject.get("_score"), -1));
        stackPop();
        return builder.build();
    }

    protected Bundle.Link parseBundleLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Bundle.Link", jsonObject);
        String relation = parseString("relation", JsonSupport.getJsonValue(jsonObject, "relation", JsonString.class), jsonObject.get("_relation"), -1);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        Bundle.Link.Builder builder = Bundle.Link.builder(relation, url);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement parseCapabilityStatement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DateTime date = parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        CapabilityStatementKind kind = (CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        FHIRVersion fhirVersion = (FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", JsonSupport.getJsonValue(jsonObject, "fhirVersion", JsonString.class), jsonObject.get("_fhirVersion"), -1);
        java.util.List<Code> format = new ArrayList<>();
        JsonArray formatArray = JsonSupport.getJsonArray(jsonObject, "format", true);
        if (formatArray != null) {
            int index = 0;
            JsonArray _formatArray = jsonObject.getJsonArray("_format");
            for (JsonValue jsonValue : formatArray) {
                format.add((Code) parseString(Code.builder(), "format", jsonValue, JsonSupport.getJsonValue(_formatArray, index), index));
                index++;
            }
        }
        CapabilityStatement.Builder builder = CapabilityStatement.builder(status, date, kind, fhirVersion, format);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray instantiatesArray = JsonSupport.getJsonArray(jsonObject, "instantiates", true);
        if (instantiatesArray != null) {
            int index = 0;
            JsonArray _instantiatesArray = jsonObject.getJsonArray("_instantiates");
            for (JsonValue jsonValue : instantiatesArray) {
                builder.instantiates((Canonical) parseUri(Canonical.builder(), "instantiates", jsonValue, JsonSupport.getJsonValue(_instantiatesArray, index), index));
                index++;
            }
        }
        JsonArray importsArray = JsonSupport.getJsonArray(jsonObject, "imports", true);
        if (importsArray != null) {
            int index = 0;
            JsonArray _importsArray = jsonObject.getJsonArray("_imports");
            for (JsonValue jsonValue : importsArray) {
                builder.imports((Canonical) parseUri(Canonical.builder(), "imports", jsonValue, JsonSupport.getJsonValue(_importsArray, index), index));
                index++;
            }
        }
        builder.software(parseCapabilityStatementSoftware("software", JsonSupport.getJsonValue(jsonObject, "software", JsonObject.class), -1));
        builder.implementation(parseCapabilityStatementImplementation("implementation", JsonSupport.getJsonValue(jsonObject, "implementation", JsonObject.class), -1));
        JsonArray patchFormatArray = JsonSupport.getJsonArray(jsonObject, "patchFormat", true);
        if (patchFormatArray != null) {
            int index = 0;
            JsonArray _patchFormatArray = jsonObject.getJsonArray("_patchFormat");
            for (JsonValue jsonValue : patchFormatArray) {
                builder.patchFormat((Code) parseString(Code.builder(), "patchFormat", jsonValue, JsonSupport.getJsonValue(_patchFormatArray, index), index));
                index++;
            }
        }
        JsonArray implementationGuideArray = JsonSupport.getJsonArray(jsonObject, "implementationGuide", true);
        if (implementationGuideArray != null) {
            int index = 0;
            JsonArray _implementationGuideArray = jsonObject.getJsonArray("_implementationGuide");
            for (JsonValue jsonValue : implementationGuideArray) {
                builder.implementationGuide((Canonical) parseUri(Canonical.builder(), "implementationGuide", jsonValue, JsonSupport.getJsonValue(_implementationGuideArray, index), index));
                index++;
            }
        }
        JsonArray restArray = JsonSupport.getJsonArray(jsonObject, "rest");
        if (restArray != null) {
            int index = 0;
            for (JsonValue jsonValue : restArray) {
                builder.rest(parseCapabilityStatementRest("rest", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray messagingArray = JsonSupport.getJsonArray(jsonObject, "messaging");
        if (messagingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : messagingArray) {
                builder.messaging(parseCapabilityStatementMessaging("messaging", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray documentArray = JsonSupport.getJsonArray(jsonObject, "document");
        if (documentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : documentArray) {
                builder.document(parseCapabilityStatementDocument("document", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Document parseCapabilityStatementDocument(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Document", jsonObject);
        DocumentMode mode = (DocumentMode) parseString(DocumentMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        Canonical profile = (Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1);
        CapabilityStatement.Document.Builder builder = CapabilityStatement.Document.builder(mode, profile);
        parseBackboneElement(builder, jsonObject);
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Implementation parseCapabilityStatementImplementation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Implementation", jsonObject);
        String description = parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1);
        CapabilityStatement.Implementation.Builder builder = CapabilityStatement.Implementation.builder(description);
        parseBackboneElement(builder, jsonObject);
        builder.url((Url) parseUri(Url.builder(), "url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.custodian(parseReference("custodian", JsonSupport.getJsonValue(jsonObject, "custodian", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Messaging parseCapabilityStatementMessaging(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Messaging", jsonObject);
        CapabilityStatement.Messaging.Builder builder = CapabilityStatement.Messaging.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseCapabilityStatementMessagingEndpoint("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.reliableCache((UnsignedInt) parseInteger(UnsignedInt.builder(), "reliableCache", JsonSupport.getJsonValue(jsonObject, "reliableCache", JsonNumber.class), jsonObject.get("_reliableCache"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        JsonArray supportedMessageArray = JsonSupport.getJsonArray(jsonObject, "supportedMessage");
        if (supportedMessageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportedMessageArray) {
                builder.supportedMessage(parseCapabilityStatementMessagingSupportedMessage("supportedMessage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Messaging.Endpoint parseCapabilityStatementMessagingEndpoint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Messaging.Endpoint", jsonObject);
        Coding protocol = parseCoding("protocol", JsonSupport.getJsonValue(jsonObject, "protocol", JsonObject.class), -1);
        Url address = (Url) parseUri(Url.builder(), "address", JsonSupport.getJsonValue(jsonObject, "address", JsonString.class), jsonObject.get("_address"), -1);
        CapabilityStatement.Messaging.Endpoint.Builder builder = CapabilityStatement.Messaging.Endpoint.builder(protocol, address);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Messaging.SupportedMessage parseCapabilityStatementMessagingSupportedMessage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Messaging.SupportedMessage", jsonObject);
        EventCapabilityMode mode = (EventCapabilityMode) parseString(EventCapabilityMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        Canonical definition = (Canonical) parseUri(Canonical.builder(), "definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1);
        CapabilityStatement.Messaging.SupportedMessage.Builder builder = CapabilityStatement.Messaging.SupportedMessage.builder(mode, definition);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest parseCapabilityStatementRest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest", jsonObject);
        RestfulCapabilityMode mode = (RestfulCapabilityMode) parseString(RestfulCapabilityMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        CapabilityStatement.Rest.Builder builder = CapabilityStatement.Rest.builder(mode);
        parseBackboneElement(builder, jsonObject);
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.security(parseCapabilityStatementRestSecurity("security", JsonSupport.getJsonValue(jsonObject, "security", JsonObject.class), -1));
        JsonArray resourceArray = JsonSupport.getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resourceArray) {
                builder.resource(parseCapabilityStatementRestResource("resource", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray interactionArray = JsonSupport.getJsonArray(jsonObject, "interaction");
        if (interactionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : interactionArray) {
                builder.interaction(parseCapabilityStatementRestInteraction("interaction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray searchParamArray = JsonSupport.getJsonArray(jsonObject, "searchParam");
        if (searchParamArray != null) {
            int index = 0;
            for (JsonValue jsonValue : searchParamArray) {
                builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray operationArray = JsonSupport.getJsonArray(jsonObject, "operation");
        if (operationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : operationArray) {
                builder.operation(parseCapabilityStatementRestResourceOperation("operation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray compartmentArray = JsonSupport.getJsonArray(jsonObject, "compartment", true);
        if (compartmentArray != null) {
            int index = 0;
            JsonArray _compartmentArray = jsonObject.getJsonArray("_compartment");
            for (JsonValue jsonValue : compartmentArray) {
                builder.compartment((Canonical) parseUri(Canonical.builder(), "compartment", jsonValue, JsonSupport.getJsonValue(_compartmentArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest.Interaction parseCapabilityStatementRestInteraction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest.Interaction", jsonObject);
        SystemRestfulInteraction code = (SystemRestfulInteraction) parseString(SystemRestfulInteraction.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        CapabilityStatement.Rest.Interaction.Builder builder = CapabilityStatement.Rest.Interaction.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest.Resource parseCapabilityStatementRestResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest.Resource", jsonObject);
        ResourceType type = (ResourceType) parseString(ResourceType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        CapabilityStatement.Rest.Resource.Builder builder = CapabilityStatement.Rest.Resource.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        JsonArray supportedProfileArray = JsonSupport.getJsonArray(jsonObject, "supportedProfile", true);
        if (supportedProfileArray != null) {
            int index = 0;
            JsonArray _supportedProfileArray = jsonObject.getJsonArray("_supportedProfile");
            for (JsonValue jsonValue : supportedProfileArray) {
                builder.supportedProfile((Canonical) parseUri(Canonical.builder(), "supportedProfile", jsonValue, JsonSupport.getJsonValue(_supportedProfileArray, index), index));
                index++;
            }
        }
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        JsonArray interactionArray = JsonSupport.getJsonArray(jsonObject, "interaction");
        if (interactionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : interactionArray) {
                builder.interaction(parseCapabilityStatementRestResourceInteraction("interaction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.versioning((ResourceVersionPolicy) parseString(ResourceVersionPolicy.builder(), "versioning", JsonSupport.getJsonValue(jsonObject, "versioning", JsonString.class), jsonObject.get("_versioning"), -1));
        builder.readHistory(parseBoolean("readHistory", JsonSupport.getJsonValue(jsonObject, "readHistory", JsonValue.class), jsonObject.get("_readHistory"), -1));
        builder.updateCreate(parseBoolean("updateCreate", JsonSupport.getJsonValue(jsonObject, "updateCreate", JsonValue.class), jsonObject.get("_updateCreate"), -1));
        builder.conditionalCreate(parseBoolean("conditionalCreate", JsonSupport.getJsonValue(jsonObject, "conditionalCreate", JsonValue.class), jsonObject.get("_conditionalCreate"), -1));
        builder.conditionalRead((ConditionalReadStatus) parseString(ConditionalReadStatus.builder(), "conditionalRead", JsonSupport.getJsonValue(jsonObject, "conditionalRead", JsonString.class), jsonObject.get("_conditionalRead"), -1));
        builder.conditionalUpdate(parseBoolean("conditionalUpdate", JsonSupport.getJsonValue(jsonObject, "conditionalUpdate", JsonValue.class), jsonObject.get("_conditionalUpdate"), -1));
        builder.conditionalDelete((ConditionalDeleteStatus) parseString(ConditionalDeleteStatus.builder(), "conditionalDelete", JsonSupport.getJsonValue(jsonObject, "conditionalDelete", JsonString.class), jsonObject.get("_conditionalDelete"), -1));
        JsonArray referencePolicyArray = JsonSupport.getJsonArray(jsonObject, "referencePolicy", true);
        if (referencePolicyArray != null) {
            int index = 0;
            JsonArray _referencePolicyArray = jsonObject.getJsonArray("_referencePolicy");
            for (JsonValue jsonValue : referencePolicyArray) {
                builder.referencePolicy((ReferenceHandlingPolicy) parseString(ReferenceHandlingPolicy.builder(), "referencePolicy", jsonValue, JsonSupport.getJsonValue(_referencePolicyArray, index), index));
                index++;
            }
        }
        JsonArray searchIncludeArray = JsonSupport.getJsonArray(jsonObject, "searchInclude", true);
        if (searchIncludeArray != null) {
            int index = 0;
            JsonArray _searchIncludeArray = jsonObject.getJsonArray("_searchInclude");
            for (JsonValue jsonValue : searchIncludeArray) {
                builder.searchInclude(parseString("searchInclude", jsonValue, JsonSupport.getJsonValue(_searchIncludeArray, index), index));
                index++;
            }
        }
        JsonArray searchRevIncludeArray = JsonSupport.getJsonArray(jsonObject, "searchRevInclude", true);
        if (searchRevIncludeArray != null) {
            int index = 0;
            JsonArray _searchRevIncludeArray = jsonObject.getJsonArray("_searchRevInclude");
            for (JsonValue jsonValue : searchRevIncludeArray) {
                builder.searchRevInclude(parseString("searchRevInclude", jsonValue, JsonSupport.getJsonValue(_searchRevIncludeArray, index), index));
                index++;
            }
        }
        JsonArray searchParamArray = JsonSupport.getJsonArray(jsonObject, "searchParam");
        if (searchParamArray != null) {
            int index = 0;
            for (JsonValue jsonValue : searchParamArray) {
                builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray operationArray = JsonSupport.getJsonArray(jsonObject, "operation");
        if (operationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : operationArray) {
                builder.operation(parseCapabilityStatementRestResourceOperation("operation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest.Resource.Interaction parseCapabilityStatementRestResourceInteraction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest.Resource.Interaction", jsonObject);
        TypeRestfulInteraction code = (TypeRestfulInteraction) parseString(TypeRestfulInteraction.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        CapabilityStatement.Rest.Resource.Interaction.Builder builder = CapabilityStatement.Rest.Resource.Interaction.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest.Resource.Operation parseCapabilityStatementRestResourceOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest.Resource.Operation", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        Canonical definition = (Canonical) parseUri(Canonical.builder(), "definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1);
        CapabilityStatement.Rest.Resource.Operation.Builder builder = CapabilityStatement.Rest.Resource.Operation.builder(name, definition);
        parseBackboneElement(builder, jsonObject);
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest.Resource.SearchParam parseCapabilityStatementRestResourceSearchParam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest.Resource.SearchParam", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        SearchParamType type = (SearchParamType) parseString(SearchParamType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        CapabilityStatement.Rest.Resource.SearchParam.Builder builder = CapabilityStatement.Rest.Resource.SearchParam.builder(name, type);
        parseBackboneElement(builder, jsonObject);
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Rest.Security parseCapabilityStatementRestSecurity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Rest.Security", jsonObject);
        CapabilityStatement.Rest.Security.Builder builder = CapabilityStatement.Rest.Security.builder();
        parseBackboneElement(builder, jsonObject);
        builder.cors(parseBoolean("cors", JsonSupport.getJsonValue(jsonObject, "cors", JsonValue.class), jsonObject.get("_cors"), -1));
        JsonArray serviceArray = JsonSupport.getJsonArray(jsonObject, "service");
        if (serviceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceArray) {
                builder.service(parseCodeableConcept("service", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected CapabilityStatement.Software parseCapabilityStatementSoftware(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CapabilityStatement.Software", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        CapabilityStatement.Software.Builder builder = CapabilityStatement.Software.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.releaseDate(parseDateTime("releaseDate", JsonSupport.getJsonValue(jsonObject, "releaseDate", JsonString.class), jsonObject.get("_releaseDate"), -1));
        stackPop();
        return builder.build();
    }

    protected CarePlan parseCarePlan(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CarePlan", jsonObject);
        CarePlanStatus status = (CarePlanStatus) parseString(CarePlanStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CarePlanIntent intent = (CarePlanIntent) parseString(CarePlanIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        CarePlan.Builder builder = CarePlan.builder(status, intent, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray replacesArray = JsonSupport.getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : replacesArray) {
                builder.replaces(parseReference("replaces", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.created(parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray contributorArray = JsonSupport.getJsonArray(jsonObject, "contributor");
        if (contributorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contributorArray) {
                builder.contributor(parseReference("contributor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray careTeamArray = JsonSupport.getJsonArray(jsonObject, "careTeam");
        if (careTeamArray != null) {
            int index = 0;
            for (JsonValue jsonValue : careTeamArray) {
                builder.careTeam(parseReference("careTeam", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray addressesArray = JsonSupport.getJsonArray(jsonObject, "addresses");
        if (addressesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressesArray) {
                builder.addresses(parseReference("addresses", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseReference("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray goalArray = JsonSupport.getJsonArray(jsonObject, "goal");
        if (goalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : goalArray) {
                builder.goal(parseReference("goal", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray activityArray = JsonSupport.getJsonArray(jsonObject, "activity");
        if (activityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : activityArray) {
                builder.activity(parseCarePlanActivity("activity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CarePlan.Activity parseCarePlanActivity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CarePlan.Activity", jsonObject);
        CarePlan.Activity.Builder builder = CarePlan.Activity.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray outcomeCodeableConceptArray = JsonSupport.getJsonArray(jsonObject, "outcomeCodeableConcept");
        if (outcomeCodeableConceptArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outcomeCodeableConceptArray) {
                builder.outcomeCodeableConcept(parseCodeableConcept("outcomeCodeableConcept", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray outcomeReferenceArray = JsonSupport.getJsonArray(jsonObject, "outcomeReference");
        if (outcomeReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outcomeReferenceArray) {
                builder.outcomeReference(parseReference("outcomeReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray progressArray = JsonSupport.getJsonArray(jsonObject, "progress");
        if (progressArray != null) {
            int index = 0;
            for (JsonValue jsonValue : progressArray) {
                builder.progress(parseAnnotation("progress", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.reference(parseReference("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        builder.detail(parseCarePlanActivityDetail("detail", JsonSupport.getJsonValue(jsonObject, "detail", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected CarePlan.Activity.Detail parseCarePlanActivityDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CarePlan.Activity.Detail", jsonObject);
        CarePlanActivityStatus status = (CarePlanActivityStatus) parseString(CarePlanActivityStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CarePlan.Activity.Detail.Builder builder = CarePlan.Activity.Detail.builder(status);
        parseBackboneElement(builder, jsonObject);
        builder.kind((CarePlanActivityKind) parseString(CarePlanActivityKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1));
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray goalArray = JsonSupport.getJsonArray(jsonObject, "goal");
        if (goalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : goalArray) {
                builder.goal(parseReference("goal", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", JsonSupport.getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.scheduled(parseChoiceElement("scheduled", jsonObject, "Timing", "Period", "String"));
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseReference("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.product(parseChoiceElement("product", jsonObject, "CodeableConcept", "Reference"));
        builder.dailyAmount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dailyAmount", JsonSupport.getJsonValue(jsonObject, "dailyAmount", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected CareTeam parseCareTeam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CareTeam", jsonObject);
        CareTeam.Builder builder = CareTeam.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((CareTeamStatus) parseString(CareTeamStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parseCareTeamParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray managingOrganizationArray = JsonSupport.getJsonArray(jsonObject, "managingOrganization");
        if (managingOrganizationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : managingOrganizationArray) {
                builder.managingOrganization(parseReference("managingOrganization", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CareTeam.Participant parseCareTeamParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CareTeam.Participant", jsonObject);
        CareTeam.Participant.Builder builder = CareTeam.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray roleArray = JsonSupport.getJsonArray(jsonObject, "role");
        if (roleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : roleArray) {
                builder.role(parseCodeableConcept("role", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.member(parseReference("member", JsonSupport.getJsonValue(jsonObject, "member", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", JsonSupport.getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected CatalogEntry parseCatalogEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CatalogEntry", jsonObject);
        Boolean orderable = parseBoolean("orderable", JsonSupport.getJsonValue(jsonObject, "orderable", JsonValue.class), jsonObject.get("_orderable"), -1);
        Reference referencedItem = parseReference("referencedItem", JsonSupport.getJsonValue(jsonObject, "referencedItem", JsonObject.class), -1);
        CatalogEntry.Builder builder = CatalogEntry.builder(orderable, referencedItem);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray additionalIdentifierArray = JsonSupport.getJsonArray(jsonObject, "additionalIdentifier");
        if (additionalIdentifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : additionalIdentifierArray) {
                builder.additionalIdentifier(parseIdentifier("additionalIdentifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray classificationArray = JsonSupport.getJsonArray(jsonObject, "classification");
        if (classificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : classificationArray) {
                builder.classification(parseCodeableConcept("classification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", JsonSupport.getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        builder.validTo(parseDateTime("validTo", JsonSupport.getJsonValue(jsonObject, "validTo", JsonString.class), jsonObject.get("_validTo"), -1));
        builder.lastUpdated(parseDateTime("lastUpdated", JsonSupport.getJsonValue(jsonObject, "lastUpdated", JsonString.class), jsonObject.get("_lastUpdated"), -1));
        JsonArray additionalCharacteristicArray = JsonSupport.getJsonArray(jsonObject, "additionalCharacteristic");
        if (additionalCharacteristicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : additionalCharacteristicArray) {
                builder.additionalCharacteristic(parseCodeableConcept("additionalCharacteristic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray additionalClassificationArray = JsonSupport.getJsonArray(jsonObject, "additionalClassification");
        if (additionalClassificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : additionalClassificationArray) {
                builder.additionalClassification(parseCodeableConcept("additionalClassification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedEntryArray = JsonSupport.getJsonArray(jsonObject, "relatedEntry");
        if (relatedEntryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedEntryArray) {
                builder.relatedEntry(parseCatalogEntryRelatedEntry("relatedEntry", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CatalogEntry.RelatedEntry parseCatalogEntryRelatedEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CatalogEntry.RelatedEntry", jsonObject);
        CatalogEntryRelationType relationtype = (CatalogEntryRelationType) parseString(CatalogEntryRelationType.builder(), "relationtype", JsonSupport.getJsonValue(jsonObject, "relationtype", JsonString.class), jsonObject.get("_relationtype"), -1);
        Reference item = parseReference("item", JsonSupport.getJsonValue(jsonObject, "item", JsonObject.class), -1);
        CatalogEntry.RelatedEntry.Builder builder = CatalogEntry.RelatedEntry.builder(relationtype, item);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ChargeItem parseChargeItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ChargeItem", jsonObject);
        ChargeItemStatus status = (ChargeItemStatus) parseString(ChargeItemStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        ChargeItem.Builder builder = ChargeItem.builder(status, code, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray definitionUriArray = JsonSupport.getJsonArray(jsonObject, "definitionUri", true);
        if (definitionUriArray != null) {
            int index = 0;
            JsonArray _definitionUriArray = jsonObject.getJsonArray("_definitionUri");
            for (JsonValue jsonValue : definitionUriArray) {
                builder.definitionUri(parseUri("definitionUri", jsonValue, JsonSupport.getJsonValue(_definitionUriArray, index), index));
                index++;
            }
        }
        JsonArray definitionCanonicalArray = JsonSupport.getJsonArray(jsonObject, "definitionCanonical", true);
        if (definitionCanonicalArray != null) {
            int index = 0;
            JsonArray _definitionCanonicalArray = jsonObject.getJsonArray("_definitionCanonical");
            for (JsonValue jsonValue : definitionCanonicalArray) {
                builder.definitionCanonical((Canonical) parseUri(Canonical.builder(), "definitionCanonical", jsonValue, JsonSupport.getJsonValue(_definitionCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.context(parseReference("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period", "Timing"));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseChargeItemPerformer("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.performingOrganization(parseReference("performingOrganization", JsonSupport.getJsonValue(jsonObject, "performingOrganization", JsonObject.class), -1));
        builder.requestingOrganization(parseReference("requestingOrganization", JsonSupport.getJsonValue(jsonObject, "requestingOrganization", JsonObject.class), -1));
        builder.costCenter(parseReference("costCenter", JsonSupport.getJsonValue(jsonObject, "costCenter", JsonObject.class), -1));
        builder.quantity(parseQuantity("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        JsonArray bodysiteArray = JsonSupport.getJsonArray(jsonObject, "bodysite");
        if (bodysiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : bodysiteArray) {
                builder.bodysite(parseCodeableConcept("bodysite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.factorOverride(parseDecimal("factorOverride", JsonSupport.getJsonValue(jsonObject, "factorOverride", JsonNumber.class), jsonObject.get("_factorOverride"), -1));
        builder.priceOverride(parseMoney("priceOverride", JsonSupport.getJsonValue(jsonObject, "priceOverride", JsonObject.class), -1));
        builder.overrideReason(parseString("overrideReason", JsonSupport.getJsonValue(jsonObject, "overrideReason", JsonString.class), jsonObject.get("_overrideReason"), -1));
        builder.enterer(parseReference("enterer", JsonSupport.getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.enteredDate(parseDateTime("enteredDate", JsonSupport.getJsonValue(jsonObject, "enteredDate", JsonString.class), jsonObject.get("_enteredDate"), -1));
        JsonArray reasonArray = JsonSupport.getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonArray) {
                builder.reason(parseCodeableConcept("reason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray serviceArray = JsonSupport.getJsonArray(jsonObject, "service");
        if (serviceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceArray) {
                builder.service(parseReference("service", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.product(parseChoiceElement("product", jsonObject, "Reference", "CodeableConcept"));
        JsonArray accountArray = JsonSupport.getJsonArray(jsonObject, "account");
        if (accountArray != null) {
            int index = 0;
            for (JsonValue jsonValue : accountArray) {
                builder.account(parseReference("account", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInformationArray = JsonSupport.getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInformationArray) {
                builder.supportingInformation(parseReference("supportingInformation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ChargeItem.Performer parseChargeItemPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ChargeItem.Performer", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        ChargeItem.Performer.Builder builder = ChargeItem.Performer.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", JsonSupport.getJsonValue(jsonObject, "function", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ChargeItemDefinition parseChargeItemDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ChargeItemDefinition", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ChargeItemDefinition.Builder builder = ChargeItemDefinition.builder(url, status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray derivedFromUriArray = JsonSupport.getJsonArray(jsonObject, "derivedFromUri", true);
        if (derivedFromUriArray != null) {
            int index = 0;
            JsonArray _derivedFromUriArray = jsonObject.getJsonArray("_derivedFromUri");
            for (JsonValue jsonValue : derivedFromUriArray) {
                builder.derivedFromUri(parseUri("derivedFromUri", jsonValue, JsonSupport.getJsonValue(_derivedFromUriArray, index), index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf", true);
        if (partOfArray != null) {
            int index = 0;
            JsonArray _partOfArray = jsonObject.getJsonArray("_partOf");
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf((Canonical) parseUri(Canonical.builder(), "partOf", jsonValue, JsonSupport.getJsonValue(_partOfArray, index), index));
                index++;
            }
        }
        JsonArray replacesArray = JsonSupport.getJsonArray(jsonObject, "replaces", true);
        if (replacesArray != null) {
            int index = 0;
            JsonArray _replacesArray = jsonObject.getJsonArray("_replaces");
            for (JsonValue jsonValue : replacesArray) {
                builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", jsonValue, JsonSupport.getJsonValue(_replacesArray, index), index));
                index++;
            }
        }
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray instanceArray = JsonSupport.getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : instanceArray) {
                builder.instance(parseReference("instance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray applicabilityArray = JsonSupport.getJsonArray(jsonObject, "applicability");
        if (applicabilityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : applicabilityArray) {
                builder.applicability(parseChargeItemDefinitionApplicability("applicability", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyGroupArray = JsonSupport.getJsonArray(jsonObject, "propertyGroup");
        if (propertyGroupArray != null) {
            int index = 0;
            for (JsonValue jsonValue : propertyGroupArray) {
                builder.propertyGroup(parseChargeItemDefinitionPropertyGroup("propertyGroup", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ChargeItemDefinition.Applicability parseChargeItemDefinitionApplicability(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ChargeItemDefinition.Applicability", jsonObject);
        ChargeItemDefinition.Applicability.Builder builder = ChargeItemDefinition.Applicability.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.language(parseString("language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        stackPop();
        return builder.build();
    }

    protected ChargeItemDefinition.PropertyGroup parseChargeItemDefinitionPropertyGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ChargeItemDefinition.PropertyGroup", jsonObject);
        ChargeItemDefinition.PropertyGroup.Builder builder = ChargeItemDefinition.PropertyGroup.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray applicabilityArray = JsonSupport.getJsonArray(jsonObject, "applicability");
        if (applicabilityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : applicabilityArray) {
                builder.applicability(parseChargeItemDefinitionApplicability("applicability", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray priceComponentArray = JsonSupport.getJsonArray(jsonObject, "priceComponent");
        if (priceComponentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : priceComponentArray) {
                builder.priceComponent(parseChargeItemDefinitionPropertyGroupPriceComponent("priceComponent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ChargeItemDefinition.PropertyGroup.PriceComponent parseChargeItemDefinitionPropertyGroupPriceComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ChargeItemDefinition.PropertyGroup.PriceComponent", jsonObject);
        ChargeItemDefinitionPriceComponentType type = (ChargeItemDefinitionPriceComponentType) parseString(ChargeItemDefinitionPriceComponentType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        ChargeItemDefinition.PropertyGroup.PriceComponent.Builder builder = ChargeItemDefinition.PropertyGroup.PriceComponent.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.amount(parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim parseClaim(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim", jsonObject);
        ClaimStatus status = (ClaimStatus) parseString(ClaimStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Use use = (Use) parseString(Use.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference provider = parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1);
        CodeableConcept priority = parseCodeableConcept("priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonObject.class), -1);
        java.util.List<Claim.Insurance> insurance = new ArrayList<>();
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                insurance.add(parseClaimInsurance("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Claim.Builder builder = Claim.builder(status, type, use, patient, created, provider, priority, insurance);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subType(parseCodeableConcept("subType", JsonSupport.getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.billablePeriod(parsePeriod("billablePeriod", JsonSupport.getJsonValue(jsonObject, "billablePeriod", JsonObject.class), -1));
        builder.enterer(parseReference("enterer", JsonSupport.getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.insurer(parseReference("insurer", JsonSupport.getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", JsonSupport.getJsonValue(jsonObject, "fundsReserve", JsonObject.class), -1));
        JsonArray relatedArray = JsonSupport.getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArray) {
                builder.related(parseClaimRelated("related", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.prescription(parseReference("prescription", JsonSupport.getJsonValue(jsonObject, "prescription", JsonObject.class), -1));
        builder.originalPrescription(parseReference("originalPrescription", JsonSupport.getJsonValue(jsonObject, "originalPrescription", JsonObject.class), -1));
        builder.payee(parseClaimPayee("payee", JsonSupport.getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.referral(parseReference("referral", JsonSupport.getJsonValue(jsonObject, "referral", JsonObject.class), -1));
        builder.facility(parseReference("facility", JsonSupport.getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        JsonArray careTeamArray = JsonSupport.getJsonArray(jsonObject, "careTeam");
        if (careTeamArray != null) {
            int index = 0;
            for (JsonValue jsonValue : careTeamArray) {
                builder.careTeam(parseClaimCareTeam("careTeam", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseClaimSupportingInfo("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray diagnosisArray = JsonSupport.getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            int index = 0;
            for (JsonValue jsonValue : diagnosisArray) {
                builder.diagnosis(parseClaimDiagnosis("diagnosis", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray procedureArray = JsonSupport.getJsonArray(jsonObject, "procedure");
        if (procedureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : procedureArray) {
                builder.procedure(parseClaimProcedure("procedure", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.accident(parseClaimAccident("accident", JsonSupport.getJsonValue(jsonObject, "accident", JsonObject.class), -1));
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseClaimItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.total(parseMoney("total", JsonSupport.getJsonValue(jsonObject, "total", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim.Accident parseClaimAccident(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Accident", jsonObject);
        Date date = parseDate("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        Claim.Accident.Builder builder = Claim.Accident.builder(date);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.location(parseChoiceElement("location", jsonObject, "Address", "Reference"));
        stackPop();
        return builder.build();
    }

    protected Claim.CareTeam parseClaimCareTeam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.CareTeam", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Reference provider = parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1);
        Claim.CareTeam.Builder builder = Claim.CareTeam.builder(sequence, provider);
        parseBackboneElement(builder, jsonObject);
        builder.responsible(parseBoolean("responsible", JsonSupport.getJsonValue(jsonObject, "responsible", JsonValue.class), jsonObject.get("_responsible"), -1));
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.qualification(parseCodeableConcept("qualification", JsonSupport.getJsonValue(jsonObject, "qualification", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim.Diagnosis parseClaimDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Diagnosis", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Element diagnosis = parseChoiceElement("diagnosis", jsonObject, "CodeableConcept", "Reference");
        Claim.Diagnosis.Builder builder = Claim.Diagnosis.builder(sequence, diagnosis);
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.onAdmission(parseCodeableConcept("onAdmission", JsonSupport.getJsonValue(jsonObject, "onAdmission", JsonObject.class), -1));
        builder.packageCode(parseCodeableConcept("packageCode", JsonSupport.getJsonValue(jsonObject, "packageCode", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim.Insurance parseClaimInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Insurance", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Boolean focal = parseBoolean("focal", JsonSupport.getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1);
        Reference coverage = parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1);
        Claim.Insurance.Builder builder = Claim.Insurance.builder(sequence, focal, coverage);
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.businessArrangement(parseString("businessArrangement", JsonSupport.getJsonValue(jsonObject, "businessArrangement", JsonString.class), jsonObject.get("_businessArrangement"), -1));
        JsonArray preAuthRefArray = JsonSupport.getJsonArray(jsonObject, "preAuthRef", true);
        if (preAuthRefArray != null) {
            int index = 0;
            JsonArray _preAuthRefArray = jsonObject.getJsonArray("_preAuthRef");
            for (JsonValue jsonValue : preAuthRefArray) {
                builder.preAuthRef(parseString("preAuthRef", jsonValue, JsonSupport.getJsonValue(_preAuthRefArray, index), index));
                index++;
            }
        }
        builder.claimResponse(parseReference("claimResponse", JsonSupport.getJsonValue(jsonObject, "claimResponse", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim.Item parseClaimItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Item", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        Claim.Item.Builder builder = Claim.Item.builder(sequence, productOrService);
        parseBackboneElement(builder, jsonObject);
        JsonArray careTeamSequenceArray = JsonSupport.getJsonArray(jsonObject, "careTeamSequence", true);
        if (careTeamSequenceArray != null) {
            int index = 0;
            JsonArray _careTeamSequenceArray = jsonObject.getJsonArray("_careTeamSequence");
            for (JsonValue jsonValue : careTeamSequenceArray) {
                builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", jsonValue, JsonSupport.getJsonValue(_careTeamSequenceArray, index), index));
                index++;
            }
        }
        JsonArray diagnosisSequenceArray = JsonSupport.getJsonArray(jsonObject, "diagnosisSequence", true);
        if (diagnosisSequenceArray != null) {
            int index = 0;
            JsonArray _diagnosisSequenceArray = jsonObject.getJsonArray("_diagnosisSequence");
            for (JsonValue jsonValue : diagnosisSequenceArray) {
                builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", jsonValue, JsonSupport.getJsonValue(_diagnosisSequenceArray, index), index));
                index++;
            }
        }
        JsonArray procedureSequenceArray = JsonSupport.getJsonArray(jsonObject, "procedureSequence", true);
        if (procedureSequenceArray != null) {
            int index = 0;
            JsonArray _procedureSequenceArray = jsonObject.getJsonArray("_procedureSequence");
            for (JsonValue jsonValue : procedureSequenceArray) {
                builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", jsonValue, JsonSupport.getJsonValue(_procedureSequenceArray, index), index));
                index++;
            }
        }
        JsonArray informationSequenceArray = JsonSupport.getJsonArray(jsonObject, "informationSequence", true);
        if (informationSequenceArray != null) {
            int index = 0;
            JsonArray _informationSequenceArray = jsonObject.getJsonArray("_informationSequence");
            for (JsonValue jsonValue : informationSequenceArray) {
                builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", jsonValue, JsonSupport.getJsonValue(_informationSequenceArray, index), index));
                index++;
            }
        }
        builder.revenue(parseCodeableConcept("revenue", JsonSupport.getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, "Date", "Period"));
        builder.location(parseChoiceElement("location", jsonObject, "CodeableConcept", "Address", "Reference"));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = JsonSupport.getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subSiteArray) {
                builder.subSite(parseCodeableConcept("subSite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray encounterArray = JsonSupport.getJsonArray(jsonObject, "encounter");
        if (encounterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : encounterArray) {
                builder.encounter(parseReference("encounter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseClaimItemDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Claim.Item.Detail parseClaimItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Item.Detail", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        Claim.Item.Detail.Builder builder = Claim.Item.Detail.builder(sequence, productOrService);
        parseBackboneElement(builder, jsonObject);
        builder.revenue(parseCodeableConcept("revenue", JsonSupport.getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray subDetailArray = JsonSupport.getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subDetailArray) {
                builder.subDetail(parseClaimItemDetailSubDetail("subDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Claim.Item.Detail.SubDetail parseClaimItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Item.Detail.SubDetail", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        Claim.Item.Detail.SubDetail.Builder builder = Claim.Item.Detail.SubDetail.builder(sequence, productOrService);
        parseBackboneElement(builder, jsonObject);
        builder.revenue(parseCodeableConcept("revenue", JsonSupport.getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Claim.Payee parseClaimPayee(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Payee", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Claim.Payee.Builder builder = Claim.Payee.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.party(parseReference("party", JsonSupport.getJsonValue(jsonObject, "party", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim.Procedure parseClaimProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Procedure", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Element procedure = parseChoiceElement("procedure", jsonObject, "CodeableConcept", "Reference");
        Claim.Procedure.Builder builder = Claim.Procedure.builder(sequence, procedure);
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Claim.Related parseClaimRelated(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.Related", jsonObject);
        Claim.Related.Builder builder = Claim.Related.builder();
        parseBackboneElement(builder, jsonObject);
        builder.claim(parseReference("claim", JsonSupport.getJsonValue(jsonObject, "claim", JsonObject.class), -1));
        builder.relationship(parseCodeableConcept("relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.reference(parseIdentifier("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Claim.SupportingInfo parseClaimSupportingInfo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Claim.SupportingInfo", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        Claim.SupportingInfo.Builder builder = Claim.SupportingInfo.builder(sequence, category);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, "Date", "Period"));
        builder.value(parseChoiceElement("value", jsonObject, "Boolean", "String", "Quantity", "Attachment", "Reference"));
        builder.reason(parseCodeableConcept("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ClaimResponse parseClaimResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse", jsonObject);
        ClaimResponseStatus status = (ClaimResponseStatus) parseString(ClaimResponseStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Use use = (Use) parseString(Use.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference insurer = parseReference("insurer", JsonSupport.getJsonValue(jsonObject, "insurer", JsonObject.class), -1);
        RemittanceOutcome outcome = (RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1);
        ClaimResponse.Builder builder = ClaimResponse.builder(status, type, use, patient, created, insurer, outcome);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subType(parseCodeableConcept("subType", JsonSupport.getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.requestor(parseReference("requestor", JsonSupport.getJsonValue(jsonObject, "requestor", JsonObject.class), -1));
        builder.request(parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.disposition(parseString("disposition", JsonSupport.getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.preAuthRef(parseString("preAuthRef", JsonSupport.getJsonValue(jsonObject, "preAuthRef", JsonString.class), jsonObject.get("_preAuthRef"), -1));
        builder.preAuthPeriod(parsePeriod("preAuthPeriod", JsonSupport.getJsonValue(jsonObject, "preAuthPeriod", JsonObject.class), -1));
        builder.payeeType(parseCodeableConcept("payeeType", JsonSupport.getJsonValue(jsonObject, "payeeType", JsonObject.class), -1));
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseClaimResponseItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray addItemArray = JsonSupport.getJsonArray(jsonObject, "addItem");
        if (addItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addItemArray) {
                builder.addItem(parseClaimResponseAddItem("addItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray totalArray = JsonSupport.getJsonArray(jsonObject, "total");
        if (totalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : totalArray) {
                builder.total(parseClaimResponseTotal("total", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.payment(parseClaimResponsePayment("payment", JsonSupport.getJsonValue(jsonObject, "payment", JsonObject.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", JsonSupport.getJsonValue(jsonObject, "fundsReserve", JsonObject.class), -1));
        builder.formCode(parseCodeableConcept("formCode", JsonSupport.getJsonValue(jsonObject, "formCode", JsonObject.class), -1));
        builder.form(parseAttachment("form", JsonSupport.getJsonValue(jsonObject, "form", JsonObject.class), -1));
        JsonArray processNoteArray = JsonSupport.getJsonArray(jsonObject, "processNote");
        if (processNoteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processNoteArray) {
                builder.processNote(parseClaimResponseProcessNote("processNote", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray communicationRequestArray = JsonSupport.getJsonArray(jsonObject, "communicationRequest");
        if (communicationRequestArray != null) {
            int index = 0;
            for (JsonValue jsonValue : communicationRequestArray) {
                builder.communicationRequest(parseReference("communicationRequest", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseClaimResponseInsurance("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray errorArray = JsonSupport.getJsonArray(jsonObject, "error");
        if (errorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : errorArray) {
                builder.error(parseClaimResponseError("error", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.AddItem parseClaimResponseAddItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.AddItem", jsonObject);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        java.util.List<ClaimResponse.Item.Adjudication> adjudication = new ArrayList<>();
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                adjudication.add(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ClaimResponse.AddItem.Builder builder = ClaimResponse.AddItem.builder(productOrService, adjudication);
        parseBackboneElement(builder, jsonObject);
        JsonArray itemSequenceArray = JsonSupport.getJsonArray(jsonObject, "itemSequence", true);
        if (itemSequenceArray != null) {
            int index = 0;
            JsonArray _itemSequenceArray = jsonObject.getJsonArray("_itemSequence");
            for (JsonValue jsonValue : itemSequenceArray) {
                builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", jsonValue, JsonSupport.getJsonValue(_itemSequenceArray, index), index));
                index++;
            }
        }
        JsonArray detailSequenceArray = JsonSupport.getJsonArray(jsonObject, "detailSequence", true);
        if (detailSequenceArray != null) {
            int index = 0;
            JsonArray _detailSequenceArray = jsonObject.getJsonArray("_detailSequence");
            for (JsonValue jsonValue : detailSequenceArray) {
                builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", jsonValue, JsonSupport.getJsonValue(_detailSequenceArray, index), index));
                index++;
            }
        }
        JsonArray subdetailSequenceArray = JsonSupport.getJsonArray(jsonObject, "subdetailSequence", true);
        if (subdetailSequenceArray != null) {
            int index = 0;
            JsonArray _subdetailSequenceArray = jsonObject.getJsonArray("_subdetailSequence");
            for (JsonValue jsonValue : subdetailSequenceArray) {
                builder.subdetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subdetailSequence", jsonValue, JsonSupport.getJsonValue(_subdetailSequenceArray, index), index));
                index++;
            }
        }
        JsonArray providerArray = JsonSupport.getJsonArray(jsonObject, "provider");
        if (providerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : providerArray) {
                builder.provider(parseReference("provider", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, "Date", "Period"));
        builder.location(parseChoiceElement("location", jsonObject, "CodeableConcept", "Address", "Reference"));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = JsonSupport.getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subSiteArray) {
                builder.subSite(parseCodeableConcept("subSite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseClaimResponseAddItemDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.AddItem.Detail parseClaimResponseAddItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.AddItem.Detail", jsonObject);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        java.util.List<ClaimResponse.Item.Adjudication> adjudication = new ArrayList<>();
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                adjudication.add(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ClaimResponse.AddItem.Detail.Builder builder = ClaimResponse.AddItem.Detail.builder(productOrService, adjudication);
        parseBackboneElement(builder, jsonObject);
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray subDetailArray = JsonSupport.getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subDetailArray) {
                builder.subDetail(parseClaimResponseAddItemDetailSubDetail("subDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.AddItem.Detail.SubDetail parseClaimResponseAddItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.AddItem.Detail.SubDetail", jsonObject);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        java.util.List<ClaimResponse.Item.Adjudication> adjudication = new ArrayList<>();
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                adjudication.add(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ClaimResponse.AddItem.Detail.SubDetail.Builder builder = ClaimResponse.AddItem.Detail.SubDetail.builder(productOrService, adjudication);
        parseBackboneElement(builder, jsonObject);
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Error parseClaimResponseError(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Error", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        ClaimResponse.Error.Builder builder = ClaimResponse.Error.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", JsonSupport.getJsonValue(jsonObject, "itemSequence", JsonNumber.class), jsonObject.get("_itemSequence"), -1));
        builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", JsonSupport.getJsonValue(jsonObject, "detailSequence", JsonNumber.class), jsonObject.get("_detailSequence"), -1));
        builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", JsonSupport.getJsonValue(jsonObject, "subDetailSequence", JsonNumber.class), jsonObject.get("_subDetailSequence"), -1));
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Insurance parseClaimResponseInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Insurance", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Boolean focal = parseBoolean("focal", JsonSupport.getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1);
        Reference coverage = parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1);
        ClaimResponse.Insurance.Builder builder = ClaimResponse.Insurance.builder(sequence, focal, coverage);
        parseBackboneElement(builder, jsonObject);
        builder.businessArrangement(parseString("businessArrangement", JsonSupport.getJsonValue(jsonObject, "businessArrangement", JsonString.class), jsonObject.get("_businessArrangement"), -1));
        builder.claimResponse(parseReference("claimResponse", JsonSupport.getJsonValue(jsonObject, "claimResponse", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Item parseClaimResponseItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Item", jsonObject);
        PositiveInt itemSequence = (PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", JsonSupport.getJsonValue(jsonObject, "itemSequence", JsonNumber.class), jsonObject.get("_itemSequence"), -1);
        java.util.List<ClaimResponse.Item.Adjudication> adjudication = new ArrayList<>();
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                adjudication.add(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ClaimResponse.Item.Builder builder = ClaimResponse.Item.builder(itemSequence, adjudication);
        parseBackboneElement(builder, jsonObject);
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseClaimResponseItemDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Item.Adjudication parseClaimResponseItemAdjudication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Item.Adjudication", jsonObject);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        ClaimResponse.Item.Adjudication.Builder builder = ClaimResponse.Item.Adjudication.builder(category);
        parseBackboneElement(builder, jsonObject);
        builder.reason(parseCodeableConcept("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        builder.amount(parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.value(parseDecimal("value", JsonSupport.getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Item.Detail parseClaimResponseItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Item.Detail", jsonObject);
        PositiveInt detailSequence = (PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", JsonSupport.getJsonValue(jsonObject, "detailSequence", JsonNumber.class), jsonObject.get("_detailSequence"), -1);
        java.util.List<ClaimResponse.Item.Adjudication> adjudication = new ArrayList<>();
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                adjudication.add(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ClaimResponse.Item.Detail.Builder builder = ClaimResponse.Item.Detail.builder(detailSequence, adjudication);
        parseBackboneElement(builder, jsonObject);
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray subDetailArray = JsonSupport.getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subDetailArray) {
                builder.subDetail(parseClaimResponseItemDetailSubDetail("subDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Item.Detail.SubDetail parseClaimResponseItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Item.Detail.SubDetail", jsonObject);
        PositiveInt subDetailSequence = (PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", JsonSupport.getJsonValue(jsonObject, "subDetailSequence", JsonNumber.class), jsonObject.get("_subDetailSequence"), -1);
        ClaimResponse.Item.Detail.SubDetail.Builder builder = ClaimResponse.Item.Detail.SubDetail.builder(subDetailSequence);
        parseBackboneElement(builder, jsonObject);
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseClaimResponseItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Payment parseClaimResponsePayment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Payment", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Money amount = parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1);
        ClaimResponse.Payment.Builder builder = ClaimResponse.Payment.builder(type, amount);
        parseBackboneElement(builder, jsonObject);
        builder.adjustment(parseMoney("adjustment", JsonSupport.getJsonValue(jsonObject, "adjustment", JsonObject.class), -1));
        builder.adjustmentReason(parseCodeableConcept("adjustmentReason", JsonSupport.getJsonValue(jsonObject, "adjustmentReason", JsonObject.class), -1));
        builder.date(parseDate("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.ProcessNote parseClaimResponseProcessNote(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.ProcessNote", jsonObject);
        String text = parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1);
        ClaimResponse.ProcessNote.Builder builder = ClaimResponse.ProcessNote.builder(text);
        parseBackboneElement(builder, jsonObject);
        builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", JsonSupport.getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.type((NoteType) parseString(NoteType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.language(parseCodeableConcept("language", JsonSupport.getJsonValue(jsonObject, "language", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ClaimResponse.Total parseClaimResponseTotal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClaimResponse.Total", jsonObject);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        Money amount = parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1);
        ClaimResponse.Total.Builder builder = ClaimResponse.Total.builder(category, amount);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ClinicalImpression parseClinicalImpression(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClinicalImpression", jsonObject);
        ClinicalImpressionStatus status = (ClinicalImpressionStatus) parseString(ClinicalImpressionStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        ClinicalImpression.Builder builder = ClinicalImpression.builder(status, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, "DateTime", "Period"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.assessor(parseReference("assessor", JsonSupport.getJsonValue(jsonObject, "assessor", JsonObject.class), -1));
        builder.previous(parseReference("previous", JsonSupport.getJsonValue(jsonObject, "previous", JsonObject.class), -1));
        JsonArray problemArray = JsonSupport.getJsonArray(jsonObject, "problem");
        if (problemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : problemArray) {
                builder.problem(parseReference("problem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray investigationArray = JsonSupport.getJsonArray(jsonObject, "investigation");
        if (investigationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : investigationArray) {
                builder.investigation(parseClinicalImpressionInvestigation("investigation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray protocolArray = JsonSupport.getJsonArray(jsonObject, "protocol", true);
        if (protocolArray != null) {
            int index = 0;
            JsonArray _protocolArray = jsonObject.getJsonArray("_protocol");
            for (JsonValue jsonValue : protocolArray) {
                builder.protocol(parseUri("protocol", jsonValue, JsonSupport.getJsonValue(_protocolArray, index), index));
                index++;
            }
        }
        builder.summary(parseString("summary", JsonSupport.getJsonValue(jsonObject, "summary", JsonString.class), jsonObject.get("_summary"), -1));
        JsonArray findingArray = JsonSupport.getJsonArray(jsonObject, "finding");
        if (findingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : findingArray) {
                builder.finding(parseClinicalImpressionFinding("finding", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray prognosisCodeableConceptArray = JsonSupport.getJsonArray(jsonObject, "prognosisCodeableConcept");
        if (prognosisCodeableConceptArray != null) {
            int index = 0;
            for (JsonValue jsonValue : prognosisCodeableConceptArray) {
                builder.prognosisCodeableConcept(parseCodeableConcept("prognosisCodeableConcept", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray prognosisReferenceArray = JsonSupport.getJsonArray(jsonObject, "prognosisReference");
        if (prognosisReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : prognosisReferenceArray) {
                builder.prognosisReference(parseReference("prognosisReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseReference("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ClinicalImpression.Finding parseClinicalImpressionFinding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClinicalImpression.Finding", jsonObject);
        ClinicalImpression.Finding.Builder builder = ClinicalImpression.Finding.builder();
        parseBackboneElement(builder, jsonObject);
        builder.itemCodeableConcept(parseCodeableConcept("itemCodeableConcept", JsonSupport.getJsonValue(jsonObject, "itemCodeableConcept", JsonObject.class), -1));
        builder.itemReference(parseReference("itemReference", JsonSupport.getJsonValue(jsonObject, "itemReference", JsonObject.class), -1));
        builder.basis(parseString("basis", JsonSupport.getJsonValue(jsonObject, "basis", JsonString.class), jsonObject.get("_basis"), -1));
        stackPop();
        return builder.build();
    }

    protected ClinicalImpression.Investigation parseClinicalImpressionInvestigation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ClinicalImpression.Investigation", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        ClinicalImpression.Investigation.Builder builder = ClinicalImpression.Investigation.builder(code);
        parseBackboneElement(builder, jsonObject);
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseReference("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CodeSystem parseCodeSystem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeSystem", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeSystemContentMode content = (CodeSystemContentMode) parseString(CodeSystemContentMode.builder(), "content", JsonSupport.getJsonValue(jsonObject, "content", JsonString.class), jsonObject.get("_content"), -1);
        CodeSystem.Builder builder = CodeSystem.builder(status, content);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.caseSensitive(parseBoolean("caseSensitive", JsonSupport.getJsonValue(jsonObject, "caseSensitive", JsonValue.class), jsonObject.get("_caseSensitive"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", JsonSupport.getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        builder.hierarchyMeaning((CodeSystemHierarchyMeaning) parseString(CodeSystemHierarchyMeaning.builder(), "hierarchyMeaning", JsonSupport.getJsonValue(jsonObject, "hierarchyMeaning", JsonString.class), jsonObject.get("_hierarchyMeaning"), -1));
        builder.compositional(parseBoolean("compositional", JsonSupport.getJsonValue(jsonObject, "compositional", JsonValue.class), jsonObject.get("_compositional"), -1));
        builder.versionNeeded(parseBoolean("versionNeeded", JsonSupport.getJsonValue(jsonObject, "versionNeeded", JsonValue.class), jsonObject.get("_versionNeeded"), -1));
        builder.supplements((Canonical) parseUri(Canonical.builder(), "supplements", JsonSupport.getJsonValue(jsonObject, "supplements", JsonString.class), jsonObject.get("_supplements"), -1));
        builder.count((UnsignedInt) parseInteger(UnsignedInt.builder(), "count", JsonSupport.getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        JsonArray filterArray = JsonSupport.getJsonArray(jsonObject, "filter");
        if (filterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : filterArray) {
                builder.filter(parseCodeSystemFilter("filter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyArray = JsonSupport.getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : propertyArray) {
                builder.property(parseCodeSystemProperty("property", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conceptArray = JsonSupport.getJsonArray(jsonObject, "concept");
        if (conceptArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conceptArray) {
                builder.concept(parseCodeSystemConcept("concept", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CodeSystem.Concept parseCodeSystemConcept(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeSystem.Concept", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        CodeSystem.Concept.Builder builder = CodeSystem.Concept.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.definition(parseString("definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        JsonArray designationArray = JsonSupport.getJsonArray(jsonObject, "designation");
        if (designationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : designationArray) {
                builder.designation(parseCodeSystemConceptDesignation("designation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyArray = JsonSupport.getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : propertyArray) {
                builder.property(parseCodeSystemConceptProperty("property", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conceptArray = JsonSupport.getJsonArray(jsonObject, "concept");
        if (conceptArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conceptArray) {
                builder.concept(parseCodeSystemConcept("concept", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CodeSystem.Concept.Designation parseCodeSystemConceptDesignation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeSystem.Concept.Designation", jsonObject);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        CodeSystem.Concept.Designation.Builder builder = CodeSystem.Concept.Designation.builder(value);
        parseBackboneElement(builder, jsonObject);
        builder.language((Code) parseString(Code.builder(), "language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.use(parseCoding("use", JsonSupport.getJsonValue(jsonObject, "use", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected CodeSystem.Concept.Property parseCodeSystemConceptProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeSystem.Concept.Property", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        Element value = parseChoiceElement("value", jsonObject, "Code", "Coding", "String", "Integer", "Boolean", "DateTime", "Decimal");
        CodeSystem.Concept.Property.Builder builder = CodeSystem.Concept.Property.builder(code, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CodeSystem.Filter parseCodeSystemFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeSystem.Filter", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        java.util.List<FilterOperator> operator = new ArrayList<>();
        JsonArray operatorArray = JsonSupport.getJsonArray(jsonObject, "operator", true);
        if (operatorArray != null) {
            int index = 0;
            JsonArray _operatorArray = jsonObject.getJsonArray("_operator");
            for (JsonValue jsonValue : operatorArray) {
                operator.add((FilterOperator) parseString(FilterOperator.builder(), "operator", jsonValue, JsonSupport.getJsonValue(_operatorArray, index), index));
                index++;
            }
        }
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        CodeSystem.Filter.Builder builder = CodeSystem.Filter.builder(code, operator, value);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected CodeSystem.Property parseCodeSystemProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeSystem.Property", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        PropertyType type = (PropertyType) parseString(PropertyType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        CodeSystem.Property.Builder builder = CodeSystem.Property.builder(code, type);
        parseBackboneElement(builder, jsonObject);
        builder.uri(parseUri("uri", JsonSupport.getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected CodeableConcept parseCodeableConcept(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CodeableConcept", jsonObject);
        CodeableConcept.Builder builder = CodeableConcept.builder();
        parseElement(builder, jsonObject);
        JsonArray codingArray = JsonSupport.getJsonArray(jsonObject, "coding");
        if (codingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codingArray) {
                builder.coding(parseCoding("coding", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    protected Coding parseCoding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Coding", jsonObject);
        Coding.Builder builder = Coding.builder();
        parseElement(builder, jsonObject);
        builder.system(parseUri("system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.code((Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.userSelected(parseBoolean("userSelected", JsonSupport.getJsonValue(jsonObject, "userSelected", JsonValue.class), jsonObject.get("_userSelected"), -1));
        stackPop();
        return builder.build();
    }

    protected Communication parseCommunication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Communication", jsonObject);
        CommunicationStatus status = (CommunicationStatus) parseString(CommunicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Communication.Builder builder = Communication.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray inResponseToArray = JsonSupport.getJsonArray(jsonObject, "inResponseTo");
        if (inResponseToArray != null) {
            int index = 0;
            for (JsonValue jsonValue : inResponseToArray) {
                builder.inResponseTo(parseReference("inResponseTo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray mediumArray = JsonSupport.getJsonArray(jsonObject, "medium");
        if (mediumArray != null) {
            int index = 0;
            for (JsonValue jsonValue : mediumArray) {
                builder.medium(parseCodeableConcept("medium", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.topic(parseCodeableConcept("topic", JsonSupport.getJsonValue(jsonObject, "topic", JsonObject.class), -1));
        JsonArray aboutArray = JsonSupport.getJsonArray(jsonObject, "about");
        if (aboutArray != null) {
            int index = 0;
            for (JsonValue jsonValue : aboutArray) {
                builder.about(parseReference("about", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.sent(parseDateTime("sent", JsonSupport.getJsonValue(jsonObject, "sent", JsonString.class), jsonObject.get("_sent"), -1));
        builder.received(parseDateTime("received", JsonSupport.getJsonValue(jsonObject, "received", JsonString.class), jsonObject.get("_received"), -1));
        JsonArray recipientArray = JsonSupport.getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : recipientArray) {
                builder.recipient(parseReference("recipient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.sender(parseReference("sender", JsonSupport.getJsonValue(jsonObject, "sender", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray payloadArray = JsonSupport.getJsonArray(jsonObject, "payload");
        if (payloadArray != null) {
            int index = 0;
            for (JsonValue jsonValue : payloadArray) {
                builder.payload(parseCommunicationPayload("payload", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Communication.Payload parseCommunicationPayload(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Communication.Payload", jsonObject);
        Element content = parseChoiceElement("content", jsonObject, "String", "Attachment", "Reference");
        Communication.Payload.Builder builder = Communication.Payload.builder(content);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CommunicationRequest parseCommunicationRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CommunicationRequest", jsonObject);
        CommunicationRequestStatus status = (CommunicationRequestStatus) parseString(CommunicationRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CommunicationRequest.Builder builder = CommunicationRequest.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray replacesArray = JsonSupport.getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : replacesArray) {
                builder.replaces(parseReference("replaces", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", JsonSupport.getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", JsonSupport.getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        JsonArray mediumArray = JsonSupport.getJsonArray(jsonObject, "medium");
        if (mediumArray != null) {
            int index = 0;
            for (JsonValue jsonValue : mediumArray) {
                builder.medium(parseCodeableConcept("medium", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray aboutArray = JsonSupport.getJsonArray(jsonObject, "about");
        if (aboutArray != null) {
            int index = 0;
            for (JsonValue jsonValue : aboutArray) {
                builder.about(parseReference("about", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        JsonArray payloadArray = JsonSupport.getJsonArray(jsonObject, "payload");
        if (payloadArray != null) {
            int index = 0;
            for (JsonValue jsonValue : payloadArray) {
                builder.payload(parseCommunicationRequestPayload("payload", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period"));
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", JsonSupport.getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        JsonArray recipientArray = JsonSupport.getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : recipientArray) {
                builder.recipient(parseReference("recipient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.sender(parseReference("sender", JsonSupport.getJsonValue(jsonObject, "sender", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CommunicationRequest.Payload parseCommunicationRequestPayload(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CommunicationRequest.Payload", jsonObject);
        Element content = parseChoiceElement("content", jsonObject, "String", "Attachment", "Reference");
        CommunicationRequest.Payload.Builder builder = CommunicationRequest.Payload.builder(content);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CompartmentDefinition parseCompartmentDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CompartmentDefinition", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CompartmentType code = (CompartmentType) parseString(CompartmentType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        Boolean search = parseBoolean("search", JsonSupport.getJsonValue(jsonObject, "search", JsonValue.class), jsonObject.get("_search"), -1);
        CompartmentDefinition.Builder builder = CompartmentDefinition.builder(url, name, status, code, search);
        parseDomainResource(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        JsonArray resourceArray = JsonSupport.getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resourceArray) {
                builder.resource(parseCompartmentDefinitionResource("resource", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CompartmentDefinition.Resource parseCompartmentDefinitionResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CompartmentDefinition.Resource", jsonObject);
        ResourceType code = (ResourceType) parseString(ResourceType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        CompartmentDefinition.Resource.Builder builder = CompartmentDefinition.Resource.builder(code);
        parseBackboneElement(builder, jsonObject);
        JsonArray paramArray = JsonSupport.getJsonArray(jsonObject, "param", true);
        if (paramArray != null) {
            int index = 0;
            JsonArray _paramArray = jsonObject.getJsonArray("_param");
            for (JsonValue jsonValue : paramArray) {
                builder.param(parseString("param", jsonValue, JsonSupport.getJsonValue(_paramArray, index), index));
                index++;
            }
        }
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected Composition parseComposition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Composition", jsonObject);
        CompositionStatus status = (CompositionStatus) parseString(CompositionStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        DateTime date = parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        java.util.List<Reference> author = new ArrayList<>();
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                author.add(parseReference("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        String title = parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1);
        Composition.Builder builder = Composition.builder(status, type, date, author, title);
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.confidentiality((DocumentConfidentiality) parseString(DocumentConfidentiality.builder(), "confidentiality", JsonSupport.getJsonValue(jsonObject, "confidentiality", JsonString.class), jsonObject.get("_confidentiality"), -1));
        JsonArray attesterArray = JsonSupport.getJsonArray(jsonObject, "attester");
        if (attesterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : attesterArray) {
                builder.attester(parseCompositionAttester("attester", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.custodian(parseReference("custodian", JsonSupport.getJsonValue(jsonObject, "custodian", JsonObject.class), -1));
        JsonArray relatesToArray = JsonSupport.getJsonArray(jsonObject, "relatesTo");
        if (relatesToArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatesToArray) {
                builder.relatesTo(parseCompositionRelatesTo("relatesTo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray eventArray = JsonSupport.getJsonArray(jsonObject, "event");
        if (eventArray != null) {
            int index = 0;
            for (JsonValue jsonValue : eventArray) {
                builder.event(parseCompositionEvent("event", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray sectionArray = JsonSupport.getJsonArray(jsonObject, "section");
        if (sectionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sectionArray) {
                builder.section(parseCompositionSection("section", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Composition.Attester parseCompositionAttester(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Composition.Attester", jsonObject);
        CompositionAttestationMode mode = (CompositionAttestationMode) parseString(CompositionAttestationMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        Composition.Attester.Builder builder = Composition.Attester.builder(mode);
        parseBackboneElement(builder, jsonObject);
        builder.time(parseDateTime("time", JsonSupport.getJsonValue(jsonObject, "time", JsonString.class), jsonObject.get("_time"), -1));
        builder.party(parseReference("party", JsonSupport.getJsonValue(jsonObject, "party", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Composition.Event parseCompositionEvent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Composition.Event", jsonObject);
        Composition.Event.Builder builder = Composition.Event.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseReference("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Composition.RelatesTo parseCompositionRelatesTo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Composition.RelatesTo", jsonObject);
        DocumentRelationshipType code = (DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        Element target = parseChoiceElement("target", jsonObject, "Identifier", "Reference");
        Composition.RelatesTo.Builder builder = Composition.RelatesTo.builder(code, target);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Composition.Section parseCompositionSection(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Composition.Section", jsonObject);
        Composition.Section.Builder builder = Composition.Section.builder();
        parseBackboneElement(builder, jsonObject);
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseReference("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.focus(parseReference("focus", JsonSupport.getJsonValue(jsonObject, "focus", JsonObject.class), -1));
        builder.text(parseNarrative("text", JsonSupport.getJsonValue(jsonObject, "text", JsonObject.class), -1));
        builder.mode((SectionMode) parseString(SectionMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", JsonSupport.getJsonValue(jsonObject, "orderedBy", JsonObject.class), -1));
        JsonArray entryArray = JsonSupport.getJsonArray(jsonObject, "entry");
        if (entryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : entryArray) {
                builder.entry(parseReference("entry", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", JsonSupport.getJsonValue(jsonObject, "emptyReason", JsonObject.class), -1));
        JsonArray sectionArray = JsonSupport.getJsonArray(jsonObject, "section");
        if (sectionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sectionArray) {
                builder.section(parseCompositionSection("section", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ConceptMap parseConceptMap(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ConceptMap", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ConceptMap.Builder builder = ConceptMap.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.source(parseChoiceElement("source", jsonObject, "Uri", "Canonical"));
        builder.target(parseChoiceElement("target", jsonObject, "Uri", "Canonical"));
        JsonArray groupArray = JsonSupport.getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            int index = 0;
            for (JsonValue jsonValue : groupArray) {
                builder.group(parseConceptMapGroup("group", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ConceptMap.Group parseConceptMapGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ConceptMap.Group", jsonObject);
        java.util.List<ConceptMap.Group.Element> element = new ArrayList<>();
        JsonArray elementArray = JsonSupport.getJsonArray(jsonObject, "element");
        if (elementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : elementArray) {
                element.add(parseConceptMapGroupElement("element", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ConceptMap.Group.Builder builder = ConceptMap.Group.builder(element);
        parseBackboneElement(builder, jsonObject);
        builder.source(parseUri("source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.sourceVersion(parseString("sourceVersion", JsonSupport.getJsonValue(jsonObject, "sourceVersion", JsonString.class), jsonObject.get("_sourceVersion"), -1));
        builder.target(parseUri("target", JsonSupport.getJsonValue(jsonObject, "target", JsonString.class), jsonObject.get("_target"), -1));
        builder.targetVersion(parseString("targetVersion", JsonSupport.getJsonValue(jsonObject, "targetVersion", JsonString.class), jsonObject.get("_targetVersion"), -1));
        builder.unmapped(parseConceptMapGroupUnmapped("unmapped", JsonSupport.getJsonValue(jsonObject, "unmapped", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ConceptMap.Group.Element parseConceptMapGroupElement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ConceptMap.Group.Element", jsonObject);
        ConceptMap.Group.Element.Builder builder = ConceptMap.Group.Element.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parseConceptMapGroupElementTarget("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ConceptMap.Group.Element.Target parseConceptMapGroupElementTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ConceptMap.Group.Element.Target", jsonObject);
        ConceptMapEquivalence equivalence = (ConceptMapEquivalence) parseString(ConceptMapEquivalence.builder(), "equivalence", JsonSupport.getJsonValue(jsonObject, "equivalence", JsonString.class), jsonObject.get("_equivalence"), -1);
        ConceptMap.Group.Element.Target.Builder builder = ConceptMap.Group.Element.Target.builder(equivalence);
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray dependsOnArray = JsonSupport.getJsonArray(jsonObject, "dependsOn");
        if (dependsOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dependsOnArray) {
                builder.dependsOn(parseConceptMapGroupElementTargetDependsOn("dependsOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray productArray = JsonSupport.getJsonArray(jsonObject, "product");
        if (productArray != null) {
            int index = 0;
            for (JsonValue jsonValue : productArray) {
                builder.product(parseConceptMapGroupElementTargetDependsOn("product", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ConceptMap.Group.Element.Target.DependsOn parseConceptMapGroupElementTargetDependsOn(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ConceptMap.Group.Element.Target.DependsOn", jsonObject);
        Uri property = parseUri("property", JsonSupport.getJsonValue(jsonObject, "property", JsonString.class), jsonObject.get("_property"), -1);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        ConceptMap.Group.Element.Target.DependsOn.Builder builder = ConceptMap.Group.Element.Target.DependsOn.builder(property, value);
        parseBackboneElement(builder, jsonObject);
        builder.system((Canonical) parseUri(Canonical.builder(), "system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    protected ConceptMap.Group.Unmapped parseConceptMapGroupUnmapped(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ConceptMap.Group.Unmapped", jsonObject);
        ConceptMapGroupUnmappedMode mode = (ConceptMapGroupUnmappedMode) parseString(ConceptMapGroupUnmappedMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        ConceptMap.Group.Unmapped.Builder builder = ConceptMap.Group.Unmapped.builder(mode);
        parseBackboneElement(builder, jsonObject);
        builder.code((Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.url((Canonical) parseUri(Canonical.builder(), "url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    protected Condition parseCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Condition", jsonObject);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        Condition.Builder builder = Condition.builder(subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.clinicalStatus(parseCodeableConcept("clinicalStatus", JsonSupport.getJsonValue(jsonObject, "clinicalStatus", JsonObject.class), -1));
        builder.verificationStatus(parseCodeableConcept("verificationStatus", JsonSupport.getJsonValue(jsonObject, "verificationStatus", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.severity(parseCodeableConcept("severity", JsonSupport.getJsonValue(jsonObject, "severity", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray bodySiteArray = JsonSupport.getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : bodySiteArray) {
                builder.bodySite(parseCodeableConcept("bodySite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.onset(parseChoiceElement("onset", jsonObject, "DateTime", "Age", "Period", "Range", "String"));
        builder.abatement(parseChoiceElement("abatement", jsonObject, "DateTime", "Age", "Period", "Range", "String"));
        builder.recordedDate(parseDateTime("recordedDate", JsonSupport.getJsonValue(jsonObject, "recordedDate", JsonString.class), jsonObject.get("_recordedDate"), -1));
        builder.recorder(parseReference("recorder", JsonSupport.getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        builder.asserter(parseReference("asserter", JsonSupport.getJsonValue(jsonObject, "asserter", JsonObject.class), -1));
        JsonArray stageArray = JsonSupport.getJsonArray(jsonObject, "stage");
        if (stageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : stageArray) {
                builder.stage(parseConditionStage("stage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray evidenceArray = JsonSupport.getJsonArray(jsonObject, "evidence");
        if (evidenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : evidenceArray) {
                builder.evidence(parseConditionEvidence("evidence", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Condition.Evidence parseConditionEvidence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Condition.Evidence", jsonObject);
        Condition.Evidence.Builder builder = Condition.Evidence.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseReference("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Condition.Stage parseConditionStage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Condition.Stage", jsonObject);
        Condition.Stage.Builder builder = Condition.Stage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.summary(parseCodeableConcept("summary", JsonSupport.getJsonValue(jsonObject, "summary", JsonObject.class), -1));
        JsonArray assessmentArray = JsonSupport.getJsonArray(jsonObject, "assessment");
        if (assessmentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : assessmentArray) {
                builder.assessment(parseReference("assessment", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Consent parseConsent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Consent", jsonObject);
        ConsentState status = (ConsentState) parseString(ConsentState.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept scope = parseCodeableConcept("scope", JsonSupport.getJsonValue(jsonObject, "scope", JsonObject.class), -1);
        java.util.List<CodeableConcept> category = new ArrayList<>();
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                category.add(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Consent.Builder builder = Consent.builder(status, scope, category);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.patient(parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.dateTime(parseDateTime("dateTime", JsonSupport.getJsonValue(jsonObject, "dateTime", JsonString.class), jsonObject.get("_dateTime"), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseReference("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray organizationArray = JsonSupport.getJsonArray(jsonObject, "organization");
        if (organizationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : organizationArray) {
                builder.organization(parseReference("organization", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.source(parseChoiceElement("source", jsonObject, "Attachment", "Reference"));
        JsonArray policyArray = JsonSupport.getJsonArray(jsonObject, "policy");
        if (policyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : policyArray) {
                builder.policy(parseConsentPolicy("policy", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.policyRule(parseCodeableConcept("policyRule", JsonSupport.getJsonValue(jsonObject, "policyRule", JsonObject.class), -1));
        JsonArray verificationArray = JsonSupport.getJsonArray(jsonObject, "verification");
        if (verificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : verificationArray) {
                builder.verification(parseConsentVerification("verification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.provision(parseConsentProvision("provision", JsonSupport.getJsonValue(jsonObject, "provision", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Consent.Policy parseConsentPolicy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Consent.Policy", jsonObject);
        Consent.Policy.Builder builder = Consent.Policy.builder();
        parseBackboneElement(builder, jsonObject);
        builder.authority(parseUri("authority", JsonSupport.getJsonValue(jsonObject, "authority", JsonString.class), jsonObject.get("_authority"), -1));
        builder.uri(parseUri("uri", JsonSupport.getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        stackPop();
        return builder.build();
    }

    protected Consent.Provision parseConsentProvision(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Consent.Provision", jsonObject);
        Consent.Provision.Builder builder = Consent.Provision.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((ConsentProvisionType) parseString(ConsentProvisionType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray actorArray = JsonSupport.getJsonArray(jsonObject, "actor");
        if (actorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actorArray) {
                builder.actor(parseConsentProvisionActor("actor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                builder.action(parseCodeableConcept("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray securityLabelArray = JsonSupport.getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            int index = 0;
            for (JsonValue jsonValue : securityLabelArray) {
                builder.securityLabel(parseCoding("securityLabel", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray purposeArray = JsonSupport.getJsonArray(jsonObject, "purpose");
        if (purposeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : purposeArray) {
                builder.purpose(parseCoding("purpose", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray classArray = JsonSupport.getJsonArray(jsonObject, "class");
        if (classArray != null) {
            int index = 0;
            for (JsonValue jsonValue : classArray) {
                builder.clazz(parseCoding("class", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.dataPeriod(parsePeriod("dataPeriod", JsonSupport.getJsonValue(jsonObject, "dataPeriod", JsonObject.class), -1));
        JsonArray dataArray = JsonSupport.getJsonArray(jsonObject, "data");
        if (dataArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dataArray) {
                builder.data(parseConsentProvisionData("data", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray provisionArray = JsonSupport.getJsonArray(jsonObject, "provision");
        if (provisionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : provisionArray) {
                builder.provision(parseConsentProvision("provision", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Consent.Provision.Actor parseConsentProvisionActor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Consent.Provision.Actor", jsonObject);
        CodeableConcept role = parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1);
        Reference reference = parseReference("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1);
        Consent.Provision.Actor.Builder builder = Consent.Provision.Actor.builder(role, reference);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Consent.Provision.Data parseConsentProvisionData(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Consent.Provision.Data", jsonObject);
        ConsentDataMeaning meaning = (ConsentDataMeaning) parseString(ConsentDataMeaning.builder(), "meaning", JsonSupport.getJsonValue(jsonObject, "meaning", JsonString.class), jsonObject.get("_meaning"), -1);
        Reference reference = parseReference("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1);
        Consent.Provision.Data.Builder builder = Consent.Provision.Data.builder(meaning, reference);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Consent.Verification parseConsentVerification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Consent.Verification", jsonObject);
        Boolean verified = parseBoolean("verified", JsonSupport.getJsonValue(jsonObject, "verified", JsonValue.class), jsonObject.get("_verified"), -1);
        Consent.Verification.Builder builder = Consent.Verification.builder(verified);
        parseBackboneElement(builder, jsonObject);
        builder.verifiedWith(parseReference("verifiedWith", JsonSupport.getJsonValue(jsonObject, "verifiedWith", JsonObject.class), -1));
        builder.verificationDate(parseDateTime("verificationDate", JsonSupport.getJsonValue(jsonObject, "verificationDate", JsonString.class), jsonObject.get("_verificationDate"), -1));
        stackPop();
        return builder.build();
    }

    protected ContactDetail parseContactDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ContactDetail", jsonObject);
        ContactDetail.Builder builder = ContactDetail.builder();
        parseElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ContactPoint parseContactPoint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ContactPoint", jsonObject);
        ContactPoint.Builder builder = ContactPoint.builder();
        parseElement(builder, jsonObject);
        builder.system((ContactPointSystem) parseString(ContactPointSystem.builder(), "system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.value(parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.use((ContactPointUse) parseString(ContactPointUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", JsonSupport.getJsonValue(jsonObject, "rank", JsonNumber.class), jsonObject.get("_rank"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Contract parseContract(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract", jsonObject);
        Contract.Builder builder = Contract.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.status((ContractStatus) parseString(ContractStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.legalState(parseCodeableConcept("legalState", JsonSupport.getJsonValue(jsonObject, "legalState", JsonObject.class), -1));
        builder.instantiatesCanonical(parseReference("instantiatesCanonical", JsonSupport.getJsonValue(jsonObject, "instantiatesCanonical", JsonObject.class), -1));
        builder.instantiatesUri(parseUri("instantiatesUri", JsonSupport.getJsonValue(jsonObject, "instantiatesUri", JsonString.class), jsonObject.get("_instantiatesUri"), -1));
        builder.contentDerivative(parseCodeableConcept("contentDerivative", JsonSupport.getJsonValue(jsonObject, "contentDerivative", JsonObject.class), -1));
        builder.issued(parseDateTime("issued", JsonSupport.getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        builder.applies(parsePeriod("applies", JsonSupport.getJsonValue(jsonObject, "applies", JsonObject.class), -1));
        builder.expirationType(parseCodeableConcept("expirationType", JsonSupport.getJsonValue(jsonObject, "expirationType", JsonObject.class), -1));
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorityArray = JsonSupport.getJsonArray(jsonObject, "authority");
        if (authorityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorityArray) {
                builder.authority(parseReference("authority", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray domainArray = JsonSupport.getJsonArray(jsonObject, "domain");
        if (domainArray != null) {
            int index = 0;
            for (JsonValue jsonValue : domainArray) {
                builder.domain(parseReference("domain", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray siteArray = JsonSupport.getJsonArray(jsonObject, "site");
        if (siteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : siteArray) {
                builder.site(parseReference("site", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        JsonArray aliasArray = JsonSupport.getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            int index = 0;
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (JsonValue jsonValue : aliasArray) {
                builder.alias(parseString("alias", jsonValue, JsonSupport.getJsonValue(_aliasArray, index), index));
                index++;
            }
        }
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.scope(parseCodeableConcept("scope", JsonSupport.getJsonValue(jsonObject, "scope", JsonObject.class), -1));
        builder.topic(parseChoiceElement("topic", jsonObject, "CodeableConcept", "Reference"));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray subTypeArray = JsonSupport.getJsonArray(jsonObject, "subType");
        if (subTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subTypeArray) {
                builder.subType(parseCodeableConcept("subType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.contentDefinition(parseContractContentDefinition("contentDefinition", JsonSupport.getJsonValue(jsonObject, "contentDefinition", JsonObject.class), -1));
        JsonArray termArray = JsonSupport.getJsonArray(jsonObject, "term");
        if (termArray != null) {
            int index = 0;
            for (JsonValue jsonValue : termArray) {
                builder.term(parseContractTerm("term", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseReference("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relevantHistoryArray = JsonSupport.getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relevantHistoryArray) {
                builder.relevantHistory(parseReference("relevantHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray signerArray = JsonSupport.getJsonArray(jsonObject, "signer");
        if (signerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : signerArray) {
                builder.signer(parseContractSigner("signer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray friendlyArray = JsonSupport.getJsonArray(jsonObject, "friendly");
        if (friendlyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : friendlyArray) {
                builder.friendly(parseContractFriendly("friendly", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray legalArray = JsonSupport.getJsonArray(jsonObject, "legal");
        if (legalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : legalArray) {
                builder.legal(parseContractLegal("legal", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray ruleArray = JsonSupport.getJsonArray(jsonObject, "rule");
        if (ruleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ruleArray) {
                builder.rule(parseContractRule("rule", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.legallyBinding(parseChoiceElement("legallyBinding", jsonObject, "Attachment", "Reference"));
        stackPop();
        return builder.build();
    }

    protected Contract.ContentDefinition parseContractContentDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.ContentDefinition", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        ContractPublicationStatus publicationStatus = (ContractPublicationStatus) parseString(ContractPublicationStatus.builder(), "publicationStatus", JsonSupport.getJsonValue(jsonObject, "publicationStatus", JsonString.class), jsonObject.get("_publicationStatus"), -1);
        Contract.ContentDefinition.Builder builder = Contract.ContentDefinition.builder(type, publicationStatus);
        parseBackboneElement(builder, jsonObject);
        builder.subType(parseCodeableConcept("subType", JsonSupport.getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.publisher(parseReference("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonObject.class), -1));
        builder.publicationDate(parseDateTime("publicationDate", JsonSupport.getJsonValue(jsonObject, "publicationDate", JsonString.class), jsonObject.get("_publicationDate"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        stackPop();
        return builder.build();
    }

    protected Contract.Friendly parseContractFriendly(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Friendly", jsonObject);
        Element content = parseChoiceElement("content", jsonObject, "Attachment", "Reference");
        Contract.Friendly.Builder builder = Contract.Friendly.builder(content);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Contract.Legal parseContractLegal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Legal", jsonObject);
        Element content = parseChoiceElement("content", jsonObject, "Attachment", "Reference");
        Contract.Legal.Builder builder = Contract.Legal.builder(content);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Contract.Rule parseContractRule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Rule", jsonObject);
        Element content = parseChoiceElement("content", jsonObject, "Attachment", "Reference");
        Contract.Rule.Builder builder = Contract.Rule.builder(content);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Contract.Signer parseContractSigner(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Signer", jsonObject);
        Coding type = parseCoding("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Reference party = parseReference("party", JsonSupport.getJsonValue(jsonObject, "party", JsonObject.class), -1);
        java.util.List<Signature> signature = new ArrayList<>();
        JsonArray signatureArray = JsonSupport.getJsonArray(jsonObject, "signature");
        if (signatureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : signatureArray) {
                signature.add(parseSignature("signature", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Contract.Signer.Builder builder = Contract.Signer.builder(type, party, signature);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Contract.Term parseContractTerm(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term", jsonObject);
        Contract.Term.Offer offer = parseContractTermOffer("offer", JsonSupport.getJsonValue(jsonObject, "offer", JsonObject.class), -1);
        Contract.Term.Builder builder = Contract.Term.builder(offer);
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.issued(parseDateTime("issued", JsonSupport.getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        builder.applies(parsePeriod("applies", JsonSupport.getJsonValue(jsonObject, "applies", JsonObject.class), -1));
        builder.topic(parseChoiceElement("topic", jsonObject, "CodeableConcept", "Reference"));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subType(parseCodeableConcept("subType", JsonSupport.getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray securityLabelArray = JsonSupport.getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            int index = 0;
            for (JsonValue jsonValue : securityLabelArray) {
                builder.securityLabel(parseContractTermSecurityLabel("securityLabel", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray assetArray = JsonSupport.getJsonArray(jsonObject, "asset");
        if (assetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : assetArray) {
                builder.asset(parseContractTermAsset("asset", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                builder.action(parseContractTermAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray groupArray = JsonSupport.getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            int index = 0;
            for (JsonValue jsonValue : groupArray) {
                builder.group(parseContractTerm("group", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Action parseContractTermAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Action", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        CodeableConcept intent = parseCodeableConcept("intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonObject.class), -1);
        CodeableConcept status = parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1);
        Contract.Term.Action.Builder builder = Contract.Term.Action.builder(type, intent, status);
        parseBackboneElement(builder, jsonObject);
        builder.doNotPerform(parseBoolean("doNotPerform", JsonSupport.getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseContractTermActionSubject("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray linkIdArray = JsonSupport.getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            int index = 0;
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (JsonValue jsonValue : linkIdArray) {
                builder.linkId(parseString("linkId", jsonValue, JsonSupport.getJsonValue(_linkIdArray, index), index));
                index++;
            }
        }
        builder.context(parseReference("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray contextLinkIdArray = JsonSupport.getJsonArray(jsonObject, "contextLinkId", true);
        if (contextLinkIdArray != null) {
            int index = 0;
            JsonArray _contextLinkIdArray = jsonObject.getJsonArray("_contextLinkId");
            for (JsonValue jsonValue : contextLinkIdArray) {
                builder.contextLinkId(parseString("contextLinkId", jsonValue, JsonSupport.getJsonValue(_contextLinkIdArray, index), index));
                index++;
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period", "Timing"));
        JsonArray requesterArray = JsonSupport.getJsonArray(jsonObject, "requester");
        if (requesterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : requesterArray) {
                builder.requester(parseReference("requester", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray requesterLinkIdArray = JsonSupport.getJsonArray(jsonObject, "requesterLinkId", true);
        if (requesterLinkIdArray != null) {
            int index = 0;
            JsonArray _requesterLinkIdArray = jsonObject.getJsonArray("_requesterLinkId");
            for (JsonValue jsonValue : requesterLinkIdArray) {
                builder.requesterLinkId(parseString("requesterLinkId", jsonValue, JsonSupport.getJsonValue(_requesterLinkIdArray, index), index));
                index++;
            }
        }
        JsonArray performerTypeArray = JsonSupport.getJsonArray(jsonObject, "performerType");
        if (performerTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerTypeArray) {
                builder.performerType(parseCodeableConcept("performerType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.performerRole(parseCodeableConcept("performerRole", JsonSupport.getJsonValue(jsonObject, "performerRole", JsonObject.class), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray performerLinkIdArray = JsonSupport.getJsonArray(jsonObject, "performerLinkId", true);
        if (performerLinkIdArray != null) {
            int index = 0;
            JsonArray _performerLinkIdArray = jsonObject.getJsonArray("_performerLinkId");
            for (JsonValue jsonValue : performerLinkIdArray) {
                builder.performerLinkId(parseString("performerLinkId", jsonValue, JsonSupport.getJsonValue(_performerLinkIdArray, index), index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonArray = JsonSupport.getJsonArray(jsonObject, "reason", true);
        if (reasonArray != null) {
            int index = 0;
            JsonArray _reasonArray = jsonObject.getJsonArray("_reason");
            for (JsonValue jsonValue : reasonArray) {
                builder.reason(parseString("reason", jsonValue, JsonSupport.getJsonValue(_reasonArray, index), index));
                index++;
            }
        }
        JsonArray reasonLinkIdArray = JsonSupport.getJsonArray(jsonObject, "reasonLinkId", true);
        if (reasonLinkIdArray != null) {
            int index = 0;
            JsonArray _reasonLinkIdArray = jsonObject.getJsonArray("_reasonLinkId");
            for (JsonValue jsonValue : reasonLinkIdArray) {
                builder.reasonLinkId(parseString("reasonLinkId", jsonValue, JsonSupport.getJsonValue(_reasonLinkIdArray, index), index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray securityLabelNumberArray = JsonSupport.getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            int index = 0;
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (JsonValue jsonValue : securityLabelNumberArray) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", jsonValue, JsonSupport.getJsonValue(_securityLabelNumberArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Action.Subject parseContractTermActionSubject(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Action.Subject", jsonObject);
        java.util.List<Reference> reference = new ArrayList<>();
        JsonArray referenceArray = JsonSupport.getJsonArray(jsonObject, "reference");
        if (referenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceArray) {
                reference.add(parseReference("reference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Contract.Term.Action.Subject.Builder builder = Contract.Term.Action.Subject.builder(reference);
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Asset parseContractTermAsset(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Asset", jsonObject);
        Contract.Term.Asset.Builder builder = Contract.Term.Asset.builder();
        parseBackboneElement(builder, jsonObject);
        builder.scope(parseCodeableConcept("scope", JsonSupport.getJsonValue(jsonObject, "scope", JsonObject.class), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray typeReferenceArray = JsonSupport.getJsonArray(jsonObject, "typeReference");
        if (typeReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeReferenceArray) {
                builder.typeReference(parseReference("typeReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray subtypeArray = JsonSupport.getJsonArray(jsonObject, "subtype");
        if (subtypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subtypeArray) {
                builder.subtype(parseCodeableConcept("subtype", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.relationship(parseCoding("relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        JsonArray contextArray = JsonSupport.getJsonArray(jsonObject, "context");
        if (contextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contextArray) {
                builder.context(parseContractTermAssetContext("context", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.condition(parseString("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonString.class), jsonObject.get("_condition"), -1));
        JsonArray periodTypeArray = JsonSupport.getJsonArray(jsonObject, "periodType");
        if (periodTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : periodTypeArray) {
                builder.periodType(parseCodeableConcept("periodType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray periodArray = JsonSupport.getJsonArray(jsonObject, "period");
        if (periodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : periodArray) {
                builder.period(parsePeriod("period", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray usePeriodArray = JsonSupport.getJsonArray(jsonObject, "usePeriod");
        if (usePeriodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : usePeriodArray) {
                builder.usePeriod(parsePeriod("usePeriod", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray linkIdArray = JsonSupport.getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            int index = 0;
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (JsonValue jsonValue : linkIdArray) {
                builder.linkId(parseString("linkId", jsonValue, JsonSupport.getJsonValue(_linkIdArray, index), index));
                index++;
            }
        }
        JsonArray answerArray = JsonSupport.getJsonArray(jsonObject, "answer");
        if (answerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : answerArray) {
                builder.answer(parseContractTermOfferAnswer("answer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray securityLabelNumberArray = JsonSupport.getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            int index = 0;
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (JsonValue jsonValue : securityLabelNumberArray) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", jsonValue, JsonSupport.getJsonValue(_securityLabelNumberArray, index), index));
                index++;
            }
        }
        JsonArray valuedItemArray = JsonSupport.getJsonArray(jsonObject, "valuedItem");
        if (valuedItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : valuedItemArray) {
                builder.valuedItem(parseContractTermAssetValuedItem("valuedItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Asset.Context parseContractTermAssetContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Asset.Context", jsonObject);
        Contract.Term.Asset.Context.Builder builder = Contract.Term.Asset.Context.builder();
        parseBackboneElement(builder, jsonObject);
        builder.reference(parseReference("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Asset.ValuedItem parseContractTermAssetValuedItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Asset.ValuedItem", jsonObject);
        Contract.Term.Asset.ValuedItem.Builder builder = Contract.Term.Asset.ValuedItem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.entity(parseChoiceElement("entity", jsonObject, "CodeableConcept", "Reference"));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.effectiveTime(parseDateTime("effectiveTime", JsonSupport.getJsonValue(jsonObject, "effectiveTime", JsonString.class), jsonObject.get("_effectiveTime"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.points(parseDecimal("points", JsonSupport.getJsonValue(jsonObject, "points", JsonNumber.class), jsonObject.get("_points"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        builder.payment(parseString("payment", JsonSupport.getJsonValue(jsonObject, "payment", JsonString.class), jsonObject.get("_payment"), -1));
        builder.paymentDate(parseDateTime("paymentDate", JsonSupport.getJsonValue(jsonObject, "paymentDate", JsonString.class), jsonObject.get("_paymentDate"), -1));
        builder.responsible(parseReference("responsible", JsonSupport.getJsonValue(jsonObject, "responsible", JsonObject.class), -1));
        builder.recipient(parseReference("recipient", JsonSupport.getJsonValue(jsonObject, "recipient", JsonObject.class), -1));
        JsonArray linkIdArray = JsonSupport.getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            int index = 0;
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (JsonValue jsonValue : linkIdArray) {
                builder.linkId(parseString("linkId", jsonValue, JsonSupport.getJsonValue(_linkIdArray, index), index));
                index++;
            }
        }
        JsonArray securityLabelNumberArray = JsonSupport.getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            int index = 0;
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (JsonValue jsonValue : securityLabelNumberArray) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", jsonValue, JsonSupport.getJsonValue(_securityLabelNumberArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Offer parseContractTermOffer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Offer", jsonObject);
        Contract.Term.Offer.Builder builder = Contract.Term.Offer.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partyArray = JsonSupport.getJsonArray(jsonObject, "party");
        if (partyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partyArray) {
                builder.party(parseContractTermOfferParty("party", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.topic(parseReference("topic", JsonSupport.getJsonValue(jsonObject, "topic", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.decision(parseCodeableConcept("decision", JsonSupport.getJsonValue(jsonObject, "decision", JsonObject.class), -1));
        JsonArray decisionModeArray = JsonSupport.getJsonArray(jsonObject, "decisionMode");
        if (decisionModeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : decisionModeArray) {
                builder.decisionMode(parseCodeableConcept("decisionMode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray answerArray = JsonSupport.getJsonArray(jsonObject, "answer");
        if (answerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : answerArray) {
                builder.answer(parseContractTermOfferAnswer("answer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray linkIdArray = JsonSupport.getJsonArray(jsonObject, "linkId", true);
        if (linkIdArray != null) {
            int index = 0;
            JsonArray _linkIdArray = jsonObject.getJsonArray("_linkId");
            for (JsonValue jsonValue : linkIdArray) {
                builder.linkId(parseString("linkId", jsonValue, JsonSupport.getJsonValue(_linkIdArray, index), index));
                index++;
            }
        }
        JsonArray securityLabelNumberArray = JsonSupport.getJsonArray(jsonObject, "securityLabelNumber", true);
        if (securityLabelNumberArray != null) {
            int index = 0;
            JsonArray _securityLabelNumberArray = jsonObject.getJsonArray("_securityLabelNumber");
            for (JsonValue jsonValue : securityLabelNumberArray) {
                builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", jsonValue, JsonSupport.getJsonValue(_securityLabelNumberArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Offer.Answer parseContractTermOfferAnswer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Offer.Answer", jsonObject);
        Element value = parseChoiceElement("value", jsonObject, "Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Uri", "Attachment", "Coding", "Quantity", "Reference");
        Contract.Term.Offer.Answer.Builder builder = Contract.Term.Offer.Answer.builder(value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Contract.Term.Offer.Party parseContractTermOfferParty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.Offer.Party", jsonObject);
        java.util.List<Reference> reference = new ArrayList<>();
        JsonArray referenceArray = JsonSupport.getJsonArray(jsonObject, "reference");
        if (referenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceArray) {
                reference.add(parseReference("reference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        CodeableConcept role = parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1);
        Contract.Term.Offer.Party.Builder builder = Contract.Term.Offer.Party.builder(reference, role);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Contract.Term.SecurityLabel parseContractTermSecurityLabel(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contract.Term.SecurityLabel", jsonObject);
        Coding classification = parseCoding("classification", JsonSupport.getJsonValue(jsonObject, "classification", JsonObject.class), -1);
        Contract.Term.SecurityLabel.Builder builder = Contract.Term.SecurityLabel.builder(classification);
        parseBackboneElement(builder, jsonObject);
        JsonArray numberArray = JsonSupport.getJsonArray(jsonObject, "number", true);
        if (numberArray != null) {
            int index = 0;
            JsonArray _numberArray = jsonObject.getJsonArray("_number");
            for (JsonValue jsonValue : numberArray) {
                builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", jsonValue, JsonSupport.getJsonValue(_numberArray, index), index));
                index++;
            }
        }
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCoding("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray controlArray = JsonSupport.getJsonArray(jsonObject, "control");
        if (controlArray != null) {
            int index = 0;
            for (JsonValue jsonValue : controlArray) {
                builder.control(parseCoding("control", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Contributor parseContributor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Contributor", jsonObject);
        ContributorType type = (ContributorType) parseString(ContributorType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        Contributor.Builder builder = Contributor.builder(type, name);
        parseElement(builder, jsonObject);
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Coverage parseCoverage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Coverage", jsonObject);
        CoverageStatus status = (CoverageStatus) parseString(CoverageStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference beneficiary = parseReference("beneficiary", JsonSupport.getJsonValue(jsonObject, "beneficiary", JsonObject.class), -1);
        java.util.List<Reference> payor = new ArrayList<>();
        JsonArray payorArray = JsonSupport.getJsonArray(jsonObject, "payor");
        if (payorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : payorArray) {
                payor.add(parseReference("payor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Coverage.Builder builder = Coverage.builder(status, beneficiary, payor);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.policyHolder(parseReference("policyHolder", JsonSupport.getJsonValue(jsonObject, "policyHolder", JsonObject.class), -1));
        builder.subscriber(parseReference("subscriber", JsonSupport.getJsonValue(jsonObject, "subscriber", JsonObject.class), -1));
        builder.subscriberId(parseString("subscriberId", JsonSupport.getJsonValue(jsonObject, "subscriberId", JsonString.class), jsonObject.get("_subscriberId"), -1));
        builder.dependent(parseString("dependent", JsonSupport.getJsonValue(jsonObject, "dependent", JsonString.class), jsonObject.get("_dependent"), -1));
        builder.relationship(parseCodeableConcept("relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray classArray = JsonSupport.getJsonArray(jsonObject, "class");
        if (classArray != null) {
            int index = 0;
            for (JsonValue jsonValue : classArray) {
                builder.clazz(parseCoverageClass("class", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.order((PositiveInt) parseInteger(PositiveInt.builder(), "order", JsonSupport.getJsonValue(jsonObject, "order", JsonNumber.class), jsonObject.get("_order"), -1));
        builder.network(parseString("network", JsonSupport.getJsonValue(jsonObject, "network", JsonString.class), jsonObject.get("_network"), -1));
        JsonArray costToBeneficiaryArray = JsonSupport.getJsonArray(jsonObject, "costToBeneficiary");
        if (costToBeneficiaryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : costToBeneficiaryArray) {
                builder.costToBeneficiary(parseCoverageCostToBeneficiary("costToBeneficiary", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subrogation(parseBoolean("subrogation", JsonSupport.getJsonValue(jsonObject, "subrogation", JsonValue.class), jsonObject.get("_subrogation"), -1));
        JsonArray contractArray = JsonSupport.getJsonArray(jsonObject, "contract");
        if (contractArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contractArray) {
                builder.contract(parseReference("contract", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Coverage.Class parseCoverageClass(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Coverage.Class", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        Coverage.Class.Builder builder = Coverage.Class.builder(type, value);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        stackPop();
        return builder.build();
    }

    protected Coverage.CostToBeneficiary parseCoverageCostToBeneficiary(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Coverage.CostToBeneficiary", jsonObject);
        Element value = parseChoiceElement("value", jsonObject, "SimpleQuantity", "Money");
        Coverage.CostToBeneficiary.Builder builder = Coverage.CostToBeneficiary.builder(value);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray exceptionArray = JsonSupport.getJsonArray(jsonObject, "exception");
        if (exceptionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : exceptionArray) {
                builder.exception(parseCoverageCostToBeneficiaryException("exception", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Coverage.CostToBeneficiary.Exception parseCoverageCostToBeneficiaryException(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Coverage.CostToBeneficiary.Exception", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Coverage.CostToBeneficiary.Exception.Builder builder = Coverage.CostToBeneficiary.Exception.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityRequest parseCoverageEligibilityRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityRequest", jsonObject);
        EligibilityRequestStatus status = (EligibilityRequestStatus) parseString(EligibilityRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<EligibilityRequestPurpose> purpose = new ArrayList<>();
        JsonArray purposeArray = JsonSupport.getJsonArray(jsonObject, "purpose", true);
        if (purposeArray != null) {
            int index = 0;
            JsonArray _purposeArray = jsonObject.getJsonArray("_purpose");
            for (JsonValue jsonValue : purposeArray) {
                purpose.add((EligibilityRequestPurpose) parseString(EligibilityRequestPurpose.builder(), "purpose", jsonValue, JsonSupport.getJsonValue(_purposeArray, index), index));
                index++;
            }
        }
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference insurer = parseReference("insurer", JsonSupport.getJsonValue(jsonObject, "insurer", JsonObject.class), -1);
        CoverageEligibilityRequest.Builder builder = CoverageEligibilityRequest.builder(status, purpose, patient, created, insurer);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority(parseCodeableConcept("priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.serviced(parseChoiceElement("serviced", jsonObject, "Date", "Period"));
        builder.enterer(parseReference("enterer", JsonSupport.getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.provider(parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.facility(parseReference("facility", JsonSupport.getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseCoverageEligibilityRequestSupportingInfo("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseCoverageEligibilityRequestInsurance("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseCoverageEligibilityRequestItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityRequest.Insurance parseCoverageEligibilityRequestInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityRequest.Insurance", jsonObject);
        Reference coverage = parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1);
        CoverageEligibilityRequest.Insurance.Builder builder = CoverageEligibilityRequest.Insurance.builder(coverage);
        parseBackboneElement(builder, jsonObject);
        builder.focal(parseBoolean("focal", JsonSupport.getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1));
        builder.businessArrangement(parseString("businessArrangement", JsonSupport.getJsonValue(jsonObject, "businessArrangement", JsonString.class), jsonObject.get("_businessArrangement"), -1));
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityRequest.Item parseCoverageEligibilityRequestItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityRequest.Item", jsonObject);
        CoverageEligibilityRequest.Item.Builder builder = CoverageEligibilityRequest.Item.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray supportingInfoSequenceArray = JsonSupport.getJsonArray(jsonObject, "supportingInfoSequence", true);
        if (supportingInfoSequenceArray != null) {
            int index = 0;
            JsonArray _supportingInfoSequenceArray = jsonObject.getJsonArray("_supportingInfoSequence");
            for (JsonValue jsonValue : supportingInfoSequenceArray) {
                builder.supportingInfoSequence((PositiveInt) parseInteger(PositiveInt.builder(), "supportingInfoSequence", jsonValue, JsonSupport.getJsonValue(_supportingInfoSequenceArray, index), index));
                index++;
            }
        }
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.provider(parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.facility(parseReference("facility", JsonSupport.getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        JsonArray diagnosisArray = JsonSupport.getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            int index = 0;
            for (JsonValue jsonValue : diagnosisArray) {
                builder.diagnosis(parseCoverageEligibilityRequestItemDiagnosis("diagnosis", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseReference("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityRequest.Item.Diagnosis parseCoverageEligibilityRequestItemDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityRequest.Item.Diagnosis", jsonObject);
        CoverageEligibilityRequest.Item.Diagnosis.Builder builder = CoverageEligibilityRequest.Item.Diagnosis.builder();
        parseBackboneElement(builder, jsonObject);
        builder.diagnosis(parseChoiceElement("diagnosis", jsonObject, "CodeableConcept", "Reference"));
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityRequest.SupportingInfo parseCoverageEligibilityRequestSupportingInfo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityRequest.SupportingInfo", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Reference information = parseReference("information", JsonSupport.getJsonValue(jsonObject, "information", JsonObject.class), -1);
        CoverageEligibilityRequest.SupportingInfo.Builder builder = CoverageEligibilityRequest.SupportingInfo.builder(sequence, information);
        parseBackboneElement(builder, jsonObject);
        builder.appliesToAll(parseBoolean("appliesToAll", JsonSupport.getJsonValue(jsonObject, "appliesToAll", JsonValue.class), jsonObject.get("_appliesToAll"), -1));
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityResponse parseCoverageEligibilityResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityResponse", jsonObject);
        EligibilityResponseStatus status = (EligibilityResponseStatus) parseString(EligibilityResponseStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<EligibilityResponsePurpose> purpose = new ArrayList<>();
        JsonArray purposeArray = JsonSupport.getJsonArray(jsonObject, "purpose", true);
        if (purposeArray != null) {
            int index = 0;
            JsonArray _purposeArray = jsonObject.getJsonArray("_purpose");
            for (JsonValue jsonValue : purposeArray) {
                purpose.add((EligibilityResponsePurpose) parseString(EligibilityResponsePurpose.builder(), "purpose", jsonValue, JsonSupport.getJsonValue(_purposeArray, index), index));
                index++;
            }
        }
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference request = parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1);
        RemittanceOutcome outcome = (RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1);
        Reference insurer = parseReference("insurer", JsonSupport.getJsonValue(jsonObject, "insurer", JsonObject.class), -1);
        CoverageEligibilityResponse.Builder builder = CoverageEligibilityResponse.builder(status, purpose, patient, created, request, outcome, insurer);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, "Date", "Period"));
        builder.requestor(parseReference("requestor", JsonSupport.getJsonValue(jsonObject, "requestor", JsonObject.class), -1));
        builder.disposition(parseString("disposition", JsonSupport.getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseCoverageEligibilityResponseInsurance("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.preAuthRef(parseString("preAuthRef", JsonSupport.getJsonValue(jsonObject, "preAuthRef", JsonString.class), jsonObject.get("_preAuthRef"), -1));
        builder.form(parseCodeableConcept("form", JsonSupport.getJsonValue(jsonObject, "form", JsonObject.class), -1));
        JsonArray errorArray = JsonSupport.getJsonArray(jsonObject, "error");
        if (errorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : errorArray) {
                builder.error(parseCoverageEligibilityResponseError("error", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityResponse.Error parseCoverageEligibilityResponseError(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityResponse.Error", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        CoverageEligibilityResponse.Error.Builder builder = CoverageEligibilityResponse.Error.builder(code);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityResponse.Insurance parseCoverageEligibilityResponseInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityResponse.Insurance", jsonObject);
        Reference coverage = parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1);
        CoverageEligibilityResponse.Insurance.Builder builder = CoverageEligibilityResponse.Insurance.builder(coverage);
        parseBackboneElement(builder, jsonObject);
        builder.inforce(parseBoolean("inforce", JsonSupport.getJsonValue(jsonObject, "inforce", JsonValue.class), jsonObject.get("_inforce"), -1));
        builder.benefitPeriod(parsePeriod("benefitPeriod", JsonSupport.getJsonValue(jsonObject, "benefitPeriod", JsonObject.class), -1));
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseCoverageEligibilityResponseInsuranceItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityResponse.Insurance.Item parseCoverageEligibilityResponseInsuranceItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityResponse.Insurance.Item", jsonObject);
        CoverageEligibilityResponse.Insurance.Item.Builder builder = CoverageEligibilityResponse.Insurance.Item.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.productOrService(parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.provider(parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.excluded(parseBoolean("excluded", JsonSupport.getJsonValue(jsonObject, "excluded", JsonValue.class), jsonObject.get("_excluded"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.network(parseCodeableConcept("network", JsonSupport.getJsonValue(jsonObject, "network", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", JsonSupport.getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.term(parseCodeableConcept("term", JsonSupport.getJsonValue(jsonObject, "term", JsonObject.class), -1));
        JsonArray benefitArray = JsonSupport.getJsonArray(jsonObject, "benefit");
        if (benefitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : benefitArray) {
                builder.benefit(parseCoverageEligibilityResponseInsuranceItemBenefit("benefit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.authorizationRequired(parseBoolean("authorizationRequired", JsonSupport.getJsonValue(jsonObject, "authorizationRequired", JsonValue.class), jsonObject.get("_authorizationRequired"), -1));
        JsonArray authorizationSupportingArray = JsonSupport.getJsonArray(jsonObject, "authorizationSupporting");
        if (authorizationSupportingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorizationSupportingArray) {
                builder.authorizationSupporting(parseCodeableConcept("authorizationSupporting", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.authorizationUrl(parseUri("authorizationUrl", JsonSupport.getJsonValue(jsonObject, "authorizationUrl", JsonString.class), jsonObject.get("_authorizationUrl"), -1));
        stackPop();
        return builder.build();
    }

    protected CoverageEligibilityResponse.Insurance.Item.Benefit parseCoverageEligibilityResponseInsuranceItemBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("CoverageEligibilityResponse.Insurance.Item.Benefit", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        CoverageEligibilityResponse.Insurance.Item.Benefit.Builder builder = CoverageEligibilityResponse.Insurance.Item.Benefit.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.allowed(parseChoiceElement("allowed", jsonObject, "UnsignedInt", "String", "Money"));
        builder.used(parseChoiceElement("used", jsonObject, "UnsignedInt", "String", "Money"));
        stackPop();
        return builder.build();
    }

    protected DataRequirement parseDataRequirement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DataRequirement", jsonObject);
        FHIRAllTypes type = (FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        DataRequirement.Builder builder = DataRequirement.builder(type);
        parseElement(builder, jsonObject);
        JsonArray profileArray = JsonSupport.getJsonArray(jsonObject, "profile", true);
        if (profileArray != null) {
            int index = 0;
            JsonArray _profileArray = jsonObject.getJsonArray("_profile");
            for (JsonValue jsonValue : profileArray) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", jsonValue, JsonSupport.getJsonValue(_profileArray, index), index));
                index++;
            }
        }
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        JsonArray mustSupportArray = JsonSupport.getJsonArray(jsonObject, "mustSupport", true);
        if (mustSupportArray != null) {
            int index = 0;
            JsonArray _mustSupportArray = jsonObject.getJsonArray("_mustSupport");
            for (JsonValue jsonValue : mustSupportArray) {
                builder.mustSupport(parseString("mustSupport", jsonValue, JsonSupport.getJsonValue(_mustSupportArray, index), index));
                index++;
            }
        }
        JsonArray codeFilterArray = JsonSupport.getJsonArray(jsonObject, "codeFilter");
        if (codeFilterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeFilterArray) {
                builder.codeFilter(parseDataRequirementCodeFilter("codeFilter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dateFilterArray = JsonSupport.getJsonArray(jsonObject, "dateFilter");
        if (dateFilterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dateFilterArray) {
                builder.dateFilter(parseDataRequirementDateFilter("dateFilter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.limit((PositiveInt) parseInteger(PositiveInt.builder(), "limit", JsonSupport.getJsonValue(jsonObject, "limit", JsonNumber.class), jsonObject.get("_limit"), -1));
        JsonArray sortArray = JsonSupport.getJsonArray(jsonObject, "sort");
        if (sortArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sortArray) {
                builder.sort(parseDataRequirementSort("sort", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DataRequirement.CodeFilter parseDataRequirementCodeFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DataRequirement.CodeFilter", jsonObject);
        DataRequirement.CodeFilter.Builder builder = DataRequirement.CodeFilter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.searchParam(parseString("searchParam", JsonSupport.getJsonValue(jsonObject, "searchParam", JsonString.class), jsonObject.get("_searchParam"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", JsonSupport.getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCoding("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DataRequirement.DateFilter parseDataRequirementDateFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DataRequirement.DateFilter", jsonObject);
        DataRequirement.DateFilter.Builder builder = DataRequirement.DateFilter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.searchParam(parseString("searchParam", JsonSupport.getJsonValue(jsonObject, "searchParam", JsonString.class), jsonObject.get("_searchParam"), -1));
        builder.value(parseChoiceElement("value", jsonObject, "DateTime", "Period", "Duration"));
        stackPop();
        return builder.build();
    }

    protected DataRequirement.Sort parseDataRequirementSort(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DataRequirement.Sort", jsonObject);
        String path = parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1);
        SortDirection direction = (SortDirection) parseString(SortDirection.builder(), "direction", JsonSupport.getJsonValue(jsonObject, "direction", JsonString.class), jsonObject.get("_direction"), -1);
        DataRequirement.Sort.Builder builder = DataRequirement.Sort.builder(path, direction);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Date parseDate(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Date.Builder builder = Date.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected DateTime parseDateTime(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        DateTime.Builder builder = DateTime.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected Decimal parseDecimal(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Decimal.Builder builder = Decimal.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.NUMBER) {
            JsonNumber jsonNumber = (JsonNumber) jsonValue;
            builder.value(jsonNumber.bigDecimalValue());
        }
        stackPop();
        return builder.build();
    }

    protected DetectedIssue parseDetectedIssue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DetectedIssue", jsonObject);
        DetectedIssueStatus status = (DetectedIssueStatus) parseString(DetectedIssueStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DetectedIssue.Builder builder = DetectedIssue.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.severity((DetectedIssueSeverity) parseString(DetectedIssueSeverity.builder(), "severity", JsonSupport.getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1));
        builder.patient(parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.identified(parseChoiceElement("identified", jsonObject, "DateTime", "Period"));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray implicatedArray = JsonSupport.getJsonArray(jsonObject, "implicated");
        if (implicatedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : implicatedArray) {
                builder.implicated(parseReference("implicated", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray evidenceArray = JsonSupport.getJsonArray(jsonObject, "evidence");
        if (evidenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : evidenceArray) {
                builder.evidence(parseDetectedIssueEvidence("evidence", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.detail(parseString("detail", JsonSupport.getJsonValue(jsonObject, "detail", JsonString.class), jsonObject.get("_detail"), -1));
        builder.reference(parseUri("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        JsonArray mitigationArray = JsonSupport.getJsonArray(jsonObject, "mitigation");
        if (mitigationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : mitigationArray) {
                builder.mitigation(parseDetectedIssueMitigation("mitigation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DetectedIssue.Evidence parseDetectedIssueEvidence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DetectedIssue.Evidence", jsonObject);
        DetectedIssue.Evidence.Builder builder = DetectedIssue.Evidence.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseReference("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DetectedIssue.Mitigation parseDetectedIssueMitigation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DetectedIssue.Mitigation", jsonObject);
        CodeableConcept action = parseCodeableConcept("action", JsonSupport.getJsonValue(jsonObject, "action", JsonObject.class), -1);
        DetectedIssue.Mitigation.Builder builder = DetectedIssue.Mitigation.builder(action);
        parseBackboneElement(builder, jsonObject);
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Device parseDevice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Device", jsonObject);
        Device.Builder builder = Device.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.definition(parseReference("definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonObject.class), -1));
        JsonArray udiCarrierArray = JsonSupport.getJsonArray(jsonObject, "udiCarrier");
        if (udiCarrierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiCarrierArray) {
                builder.udiCarrier(parseDeviceUdiCarrier("udiCarrier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((FHIRDeviceStatus) parseString(FHIRDeviceStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray statusReasonArray = JsonSupport.getJsonArray(jsonObject, "statusReason");
        if (statusReasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : statusReasonArray) {
                builder.statusReason(parseCodeableConcept("statusReason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.distinctIdentifier(parseString("distinctIdentifier", JsonSupport.getJsonValue(jsonObject, "distinctIdentifier", JsonString.class), jsonObject.get("_distinctIdentifier"), -1));
        builder.manufacturer(parseString("manufacturer", JsonSupport.getJsonValue(jsonObject, "manufacturer", JsonString.class), jsonObject.get("_manufacturer"), -1));
        builder.manufactureDate(parseDateTime("manufactureDate", JsonSupport.getJsonValue(jsonObject, "manufactureDate", JsonString.class), jsonObject.get("_manufactureDate"), -1));
        builder.expirationDate(parseDateTime("expirationDate", JsonSupport.getJsonValue(jsonObject, "expirationDate", JsonString.class), jsonObject.get("_expirationDate"), -1));
        builder.lotNumber(parseString("lotNumber", JsonSupport.getJsonValue(jsonObject, "lotNumber", JsonString.class), jsonObject.get("_lotNumber"), -1));
        builder.serialNumber(parseString("serialNumber", JsonSupport.getJsonValue(jsonObject, "serialNumber", JsonString.class), jsonObject.get("_serialNumber"), -1));
        JsonArray deviceNameArray = JsonSupport.getJsonArray(jsonObject, "deviceName");
        if (deviceNameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : deviceNameArray) {
                builder.deviceName(parseDeviceDeviceName("deviceName", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.modelNumber(parseString("modelNumber", JsonSupport.getJsonValue(jsonObject, "modelNumber", JsonString.class), jsonObject.get("_modelNumber"), -1));
        builder.partNumber(parseString("partNumber", JsonSupport.getJsonValue(jsonObject, "partNumber", JsonString.class), jsonObject.get("_partNumber"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray specializationArray = JsonSupport.getJsonArray(jsonObject, "specialization");
        if (specializationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specializationArray) {
                builder.specialization(parseDeviceSpecialization("specialization", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray versionArray = JsonSupport.getJsonArray(jsonObject, "version");
        if (versionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : versionArray) {
                builder.version(parseDeviceVersion("version", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyArray = JsonSupport.getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : propertyArray) {
                builder.property(parseDeviceProperty("property", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.patient(parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.owner(parseReference("owner", JsonSupport.getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactPoint("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray safetyArray = JsonSupport.getJsonArray(jsonObject, "safety");
        if (safetyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : safetyArray) {
                builder.safety(parseCodeableConcept("safety", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.parent(parseReference("parent", JsonSupport.getJsonValue(jsonObject, "parent", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Device.DeviceName parseDeviceDeviceName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Device.DeviceName", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        DeviceNameType type = (DeviceNameType) parseString(DeviceNameType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Device.DeviceName.Builder builder = Device.DeviceName.builder(name, type);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Device.Property parseDeviceProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Device.Property", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Device.Property.Builder builder = Device.Property.builder(type);
        parseBackboneElement(builder, jsonObject);
        JsonArray valueQuantityArray = JsonSupport.getJsonArray(jsonObject, "valueQuantity");
        if (valueQuantityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : valueQuantityArray) {
                builder.valueQuantity(parseQuantity("valueQuantity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray valueCodeArray = JsonSupport.getJsonArray(jsonObject, "valueCode");
        if (valueCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : valueCodeArray) {
                builder.valueCode(parseCodeableConcept("valueCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Device.Specialization parseDeviceSpecialization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Device.Specialization", jsonObject);
        CodeableConcept systemType = parseCodeableConcept("systemType", JsonSupport.getJsonValue(jsonObject, "systemType", JsonObject.class), -1);
        Device.Specialization.Builder builder = Device.Specialization.builder(systemType);
        parseBackboneElement(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    protected Device.UdiCarrier parseDeviceUdiCarrier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Device.UdiCarrier", jsonObject);
        Device.UdiCarrier.Builder builder = Device.UdiCarrier.builder();
        parseBackboneElement(builder, jsonObject);
        builder.deviceIdentifier(parseString("deviceIdentifier", JsonSupport.getJsonValue(jsonObject, "deviceIdentifier", JsonString.class), jsonObject.get("_deviceIdentifier"), -1));
        builder.issuer(parseUri("issuer", JsonSupport.getJsonValue(jsonObject, "issuer", JsonString.class), jsonObject.get("_issuer"), -1));
        builder.jurisdiction(parseUri("jurisdiction", JsonSupport.getJsonValue(jsonObject, "jurisdiction", JsonString.class), jsonObject.get("_jurisdiction"), -1));
        builder.carrierAIDC(parseBase64Binary("carrierAIDC", JsonSupport.getJsonValue(jsonObject, "carrierAIDC", JsonString.class), jsonObject.get("_carrierAIDC"), -1));
        builder.carrierHRF(parseString("carrierHRF", JsonSupport.getJsonValue(jsonObject, "carrierHRF", JsonString.class), jsonObject.get("_carrierHRF"), -1));
        builder.entryType((UDIEntryType) parseString(UDIEntryType.builder(), "entryType", JsonSupport.getJsonValue(jsonObject, "entryType", JsonString.class), jsonObject.get("_entryType"), -1));
        stackPop();
        return builder.build();
    }

    protected Device.Version parseDeviceVersion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Device.Version", jsonObject);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        Device.Version.Builder builder = Device.Version.builder(value);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.component(parseIdentifier("component", JsonSupport.getJsonValue(jsonObject, "component", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition parseDeviceDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition", jsonObject);
        DeviceDefinition.Builder builder = DeviceDefinition.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray udiDeviceIdentifierArray = JsonSupport.getJsonArray(jsonObject, "udiDeviceIdentifier");
        if (udiDeviceIdentifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiDeviceIdentifierArray) {
                builder.udiDeviceIdentifier(parseDeviceDefinitionUdiDeviceIdentifier("udiDeviceIdentifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.manufacturer(parseChoiceElement("manufacturer", jsonObject, "String", "Reference"));
        JsonArray deviceNameArray = JsonSupport.getJsonArray(jsonObject, "deviceName");
        if (deviceNameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : deviceNameArray) {
                builder.deviceName(parseDeviceDefinitionDeviceName("deviceName", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.modelNumber(parseString("modelNumber", JsonSupport.getJsonValue(jsonObject, "modelNumber", JsonString.class), jsonObject.get("_modelNumber"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray specializationArray = JsonSupport.getJsonArray(jsonObject, "specialization");
        if (specializationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specializationArray) {
                builder.specialization(parseDeviceDefinitionSpecialization("specialization", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray versionArray = JsonSupport.getJsonArray(jsonObject, "version", true);
        if (versionArray != null) {
            int index = 0;
            JsonArray _versionArray = jsonObject.getJsonArray("_version");
            for (JsonValue jsonValue : versionArray) {
                builder.version(parseString("version", jsonValue, JsonSupport.getJsonValue(_versionArray, index), index));
                index++;
            }
        }
        JsonArray safetyArray = JsonSupport.getJsonArray(jsonObject, "safety");
        if (safetyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : safetyArray) {
                builder.safety(parseCodeableConcept("safety", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray shelfLifeStorageArray = JsonSupport.getJsonArray(jsonObject, "shelfLifeStorage");
        if (shelfLifeStorageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : shelfLifeStorageArray) {
                builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", JsonSupport.getJsonValue(jsonObject, "physicalCharacteristics", JsonObject.class), -1));
        JsonArray languageCodeArray = JsonSupport.getJsonArray(jsonObject, "languageCode");
        if (languageCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : languageCodeArray) {
                builder.languageCode(parseCodeableConcept("languageCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray capabilityArray = JsonSupport.getJsonArray(jsonObject, "capability");
        if (capabilityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : capabilityArray) {
                builder.capability(parseDeviceDefinitionCapability("capability", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyArray = JsonSupport.getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : propertyArray) {
                builder.property(parseDeviceDefinitionProperty("property", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.owner(parseReference("owner", JsonSupport.getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactPoint("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.onlineInformation(parseUri("onlineInformation", JsonSupport.getJsonValue(jsonObject, "onlineInformation", JsonString.class), jsonObject.get("_onlineInformation"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity(parseQuantity("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.parentDevice(parseReference("parentDevice", JsonSupport.getJsonValue(jsonObject, "parentDevice", JsonObject.class), -1));
        JsonArray materialArray = JsonSupport.getJsonArray(jsonObject, "material");
        if (materialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : materialArray) {
                builder.material(parseDeviceDefinitionMaterial("material", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition.Capability parseDeviceDefinitionCapability(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition.Capability", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        DeviceDefinition.Capability.Builder builder = DeviceDefinition.Capability.builder(type);
        parseBackboneElement(builder, jsonObject);
        JsonArray descriptionArray = JsonSupport.getJsonArray(jsonObject, "description");
        if (descriptionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : descriptionArray) {
                builder.description(parseCodeableConcept("description", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition.DeviceName parseDeviceDefinitionDeviceName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition.DeviceName", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        DeviceNameType type = (DeviceNameType) parseString(DeviceNameType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        DeviceDefinition.DeviceName.Builder builder = DeviceDefinition.DeviceName.builder(name, type);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition.Material parseDeviceDefinitionMaterial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition.Material", jsonObject);
        CodeableConcept substance = parseCodeableConcept("substance", JsonSupport.getJsonValue(jsonObject, "substance", JsonObject.class), -1);
        DeviceDefinition.Material.Builder builder = DeviceDefinition.Material.builder(substance);
        parseBackboneElement(builder, jsonObject);
        builder.alternate(parseBoolean("alternate", JsonSupport.getJsonValue(jsonObject, "alternate", JsonValue.class), jsonObject.get("_alternate"), -1));
        builder.allergenicIndicator(parseBoolean("allergenicIndicator", JsonSupport.getJsonValue(jsonObject, "allergenicIndicator", JsonValue.class), jsonObject.get("_allergenicIndicator"), -1));
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition.Property parseDeviceDefinitionProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition.Property", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        DeviceDefinition.Property.Builder builder = DeviceDefinition.Property.builder(type);
        parseBackboneElement(builder, jsonObject);
        JsonArray valueQuantityArray = JsonSupport.getJsonArray(jsonObject, "valueQuantity");
        if (valueQuantityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : valueQuantityArray) {
                builder.valueQuantity(parseQuantity("valueQuantity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray valueCodeArray = JsonSupport.getJsonArray(jsonObject, "valueCode");
        if (valueCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : valueCodeArray) {
                builder.valueCode(parseCodeableConcept("valueCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition.Specialization parseDeviceDefinitionSpecialization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition.Specialization", jsonObject);
        String systemType = parseString("systemType", JsonSupport.getJsonValue(jsonObject, "systemType", JsonString.class), jsonObject.get("_systemType"), -1);
        DeviceDefinition.Specialization.Builder builder = DeviceDefinition.Specialization.builder(systemType);
        parseBackboneElement(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    protected DeviceDefinition.UdiDeviceIdentifier parseDeviceDefinitionUdiDeviceIdentifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceDefinition.UdiDeviceIdentifier", jsonObject);
        String deviceIdentifier = parseString("deviceIdentifier", JsonSupport.getJsonValue(jsonObject, "deviceIdentifier", JsonString.class), jsonObject.get("_deviceIdentifier"), -1);
        Uri issuer = parseUri("issuer", JsonSupport.getJsonValue(jsonObject, "issuer", JsonString.class), jsonObject.get("_issuer"), -1);
        Uri jurisdiction = parseUri("jurisdiction", JsonSupport.getJsonValue(jsonObject, "jurisdiction", JsonString.class), jsonObject.get("_jurisdiction"), -1);
        DeviceDefinition.UdiDeviceIdentifier.Builder builder = DeviceDefinition.UdiDeviceIdentifier.builder(deviceIdentifier, issuer, jurisdiction);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected DeviceMetric parseDeviceMetric(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceMetric", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        DeviceMetricCategory category = (DeviceMetricCategory) parseString(DeviceMetricCategory.builder(), "category", JsonSupport.getJsonValue(jsonObject, "category", JsonString.class), jsonObject.get("_category"), -1);
        DeviceMetric.Builder builder = DeviceMetric.builder(type, category);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.unit(parseCodeableConcept("unit", JsonSupport.getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.source(parseReference("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.parent(parseReference("parent", JsonSupport.getJsonValue(jsonObject, "parent", JsonObject.class), -1));
        builder.operationalStatus((DeviceMetricOperationalStatus) parseString(DeviceMetricOperationalStatus.builder(), "operationalStatus", JsonSupport.getJsonValue(jsonObject, "operationalStatus", JsonString.class), jsonObject.get("_operationalStatus"), -1));
        builder.color((DeviceMetricColor) parseString(DeviceMetricColor.builder(), "color", JsonSupport.getJsonValue(jsonObject, "color", JsonString.class), jsonObject.get("_color"), -1));
        builder.measurementPeriod(parseTiming("measurementPeriod", JsonSupport.getJsonValue(jsonObject, "measurementPeriod", JsonObject.class), -1));
        JsonArray calibrationArray = JsonSupport.getJsonArray(jsonObject, "calibration");
        if (calibrationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : calibrationArray) {
                builder.calibration(parseDeviceMetricCalibration("calibration", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DeviceMetric.Calibration parseDeviceMetricCalibration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceMetric.Calibration", jsonObject);
        DeviceMetric.Calibration.Builder builder = DeviceMetric.Calibration.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((DeviceMetricCalibrationType) parseString(DeviceMetricCalibrationType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.state((DeviceMetricCalibrationState) parseString(DeviceMetricCalibrationState.builder(), "state", JsonSupport.getJsonValue(jsonObject, "state", JsonString.class), jsonObject.get("_state"), -1));
        builder.time(parseInstant("time", JsonSupport.getJsonValue(jsonObject, "time", JsonString.class), jsonObject.get("_time"), -1));
        stackPop();
        return builder.build();
    }

    protected DeviceRequest parseDeviceRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceRequest", jsonObject);
        RequestIntent intent = (RequestIntent) parseString(RequestIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        Element code = parseChoiceElement("code", jsonObject, "Reference", "CodeableConcept");
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        DeviceRequest.Builder builder = DeviceRequest.builder(intent, code, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray priorRequestArray = JsonSupport.getJsonArray(jsonObject, "priorRequest");
        if (priorRequestArray != null) {
            int index = 0;
            for (JsonValue jsonValue : priorRequestArray) {
                builder.priorRequest(parseReference("priorRequest", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", JsonSupport.getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.status((DeviceRequestStatus) parseString(DeviceRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseDeviceRequestParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period", "Timing"));
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", JsonSupport.getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        builder.performerType(parseCodeableConcept("performerType", JsonSupport.getJsonValue(jsonObject, "performerType", JsonObject.class), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseReference("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseReference("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relevantHistoryArray = JsonSupport.getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relevantHistoryArray) {
                builder.relevantHistory(parseReference("relevantHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DeviceRequest.Parameter parseDeviceRequestParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceRequest.Parameter", jsonObject);
        DeviceRequest.Parameter.Builder builder = DeviceRequest.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, "CodeableConcept", "Quantity", "Range", "Boolean"));
        stackPop();
        return builder.build();
    }

    protected DeviceUseStatement parseDeviceUseStatement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DeviceUseStatement", jsonObject);
        DeviceUseStatementStatus status = (DeviceUseStatementStatus) parseString(DeviceUseStatementStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        Reference device = parseReference("device", JsonSupport.getJsonValue(jsonObject, "device", JsonObject.class), -1);
        DeviceUseStatement.Builder builder = DeviceUseStatement.builder(status, subject, device);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray derivedFromArray = JsonSupport.getJsonArray(jsonObject, "derivedFrom");
        if (derivedFromArray != null) {
            int index = 0;
            for (JsonValue jsonValue : derivedFromArray) {
                builder.derivedFrom(parseReference("derivedFrom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.timing(parseChoiceElement("timing", jsonObject, "Timing", "Period", "DateTime"));
        builder.recordedOn(parseDateTime("recordedOn", JsonSupport.getJsonValue(jsonObject, "recordedOn", JsonString.class), jsonObject.get("_recordedOn"), -1));
        builder.source(parseReference("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DiagnosticReport parseDiagnosticReport(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DiagnosticReport", jsonObject);
        DiagnosticReportStatus status = (DiagnosticReportStatus) parseString(DiagnosticReportStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        DiagnosticReport.Builder builder = DiagnosticReport.builder(status, code);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, "DateTime", "Period"));
        builder.issued(parseInstant("issued", JsonSupport.getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseReference("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray resultsInterpreterArray = JsonSupport.getJsonArray(jsonObject, "resultsInterpreter");
        if (resultsInterpreterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resultsInterpreterArray) {
                builder.resultsInterpreter(parseReference("resultsInterpreter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specimenArray = JsonSupport.getJsonArray(jsonObject, "specimen");
        if (specimenArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specimenArray) {
                builder.specimen(parseReference("specimen", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray resultArray = JsonSupport.getJsonArray(jsonObject, "result");
        if (resultArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resultArray) {
                builder.result(parseReference("result", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray imagingStudyArray = JsonSupport.getJsonArray(jsonObject, "imagingStudy");
        if (imagingStudyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : imagingStudyArray) {
                builder.imagingStudy(parseReference("imagingStudy", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray mediaArray = JsonSupport.getJsonArray(jsonObject, "media");
        if (mediaArray != null) {
            int index = 0;
            for (JsonValue jsonValue : mediaArray) {
                builder.media(parseDiagnosticReportMedia("media", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.conclusion(parseString("conclusion", JsonSupport.getJsonValue(jsonObject, "conclusion", JsonString.class), jsonObject.get("_conclusion"), -1));
        JsonArray conclusionCodeArray = JsonSupport.getJsonArray(jsonObject, "conclusionCode");
        if (conclusionCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conclusionCodeArray) {
                builder.conclusionCode(parseCodeableConcept("conclusionCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray presentedFormArray = JsonSupport.getJsonArray(jsonObject, "presentedForm");
        if (presentedFormArray != null) {
            int index = 0;
            for (JsonValue jsonValue : presentedFormArray) {
                builder.presentedForm(parseAttachment("presentedForm", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DiagnosticReport.Media parseDiagnosticReportMedia(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DiagnosticReport.Media", jsonObject);
        Reference link = parseReference("link", JsonSupport.getJsonValue(jsonObject, "link", JsonObject.class), -1);
        DiagnosticReport.Media.Builder builder = DiagnosticReport.Media.builder(link);
        parseBackboneElement(builder, jsonObject);
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected DocumentManifest parseDocumentManifest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DocumentManifest", jsonObject);
        DocumentReferenceStatus status = (DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<Reference> content = new ArrayList<>();
        JsonArray contentArray = JsonSupport.getJsonArray(jsonObject, "content");
        if (contentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contentArray) {
                content.add(parseReference("content", (JsonObject) jsonValue, index));
                index++;
            }
        }
        DocumentManifest.Builder builder = DocumentManifest.builder(status, content);
        parseDomainResource(builder, jsonObject);
        builder.masterIdentifier(parseIdentifier("masterIdentifier", JsonSupport.getJsonValue(jsonObject, "masterIdentifier", JsonObject.class), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.created(parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseReference("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray recipientArray = JsonSupport.getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : recipientArray) {
                builder.recipient(parseReference("recipient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.source(parseUri("source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray relatedArray = JsonSupport.getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArray) {
                builder.related(parseDocumentManifestRelated("related", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DocumentManifest.Related parseDocumentManifestRelated(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DocumentManifest.Related", jsonObject);
        DocumentManifest.Related.Builder builder = DocumentManifest.Related.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.ref(parseReference("ref", JsonSupport.getJsonValue(jsonObject, "ref", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected DocumentReference parseDocumentReference(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DocumentReference", jsonObject);
        DocumentReferenceStatus status = (DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<DocumentReference.Content> content = new ArrayList<>();
        JsonArray contentArray = JsonSupport.getJsonArray(jsonObject, "content");
        if (contentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contentArray) {
                content.add(parseDocumentReferenceContent("content", (JsonObject) jsonValue, index));
                index++;
            }
        }
        DocumentReference.Builder builder = DocumentReference.builder(status, content);
        parseDomainResource(builder, jsonObject);
        builder.masterIdentifier(parseIdentifier("masterIdentifier", JsonSupport.getJsonValue(jsonObject, "masterIdentifier", JsonObject.class), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.docStatus((ReferredDocumentStatus) parseString(ReferredDocumentStatus.builder(), "docStatus", JsonSupport.getJsonValue(jsonObject, "docStatus", JsonString.class), jsonObject.get("_docStatus"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.date(parseInstant("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseReference("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.authenticator(parseReference("authenticator", JsonSupport.getJsonValue(jsonObject, "authenticator", JsonObject.class), -1));
        builder.custodian(parseReference("custodian", JsonSupport.getJsonValue(jsonObject, "custodian", JsonObject.class), -1));
        JsonArray relatesToArray = JsonSupport.getJsonArray(jsonObject, "relatesTo");
        if (relatesToArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatesToArray) {
                builder.relatesTo(parseDocumentReferenceRelatesTo("relatesTo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray securityLabelArray = JsonSupport.getJsonArray(jsonObject, "securityLabel");
        if (securityLabelArray != null) {
            int index = 0;
            for (JsonValue jsonValue : securityLabelArray) {
                builder.securityLabel(parseCodeableConcept("securityLabel", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.context(parseDocumentReferenceContext("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected DocumentReference.Content parseDocumentReferenceContent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DocumentReference.Content", jsonObject);
        Attachment attachment = parseAttachment("attachment", JsonSupport.getJsonValue(jsonObject, "attachment", JsonObject.class), -1);
        DocumentReference.Content.Builder builder = DocumentReference.Content.builder(attachment);
        parseBackboneElement(builder, jsonObject);
        builder.format(parseCoding("format", JsonSupport.getJsonValue(jsonObject, "format", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected DocumentReference.Context parseDocumentReferenceContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DocumentReference.Context", jsonObject);
        DocumentReference.Context.Builder builder = DocumentReference.Context.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray encounterArray = JsonSupport.getJsonArray(jsonObject, "encounter");
        if (encounterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : encounterArray) {
                builder.encounter(parseReference("encounter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray eventArray = JsonSupport.getJsonArray(jsonObject, "event");
        if (eventArray != null) {
            int index = 0;
            for (JsonValue jsonValue : eventArray) {
                builder.event(parseCodeableConcept("event", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.facilityType(parseCodeableConcept("facilityType", JsonSupport.getJsonValue(jsonObject, "facilityType", JsonObject.class), -1));
        builder.practiceSetting(parseCodeableConcept("practiceSetting", JsonSupport.getJsonValue(jsonObject, "practiceSetting", JsonObject.class), -1));
        builder.sourcePatientInfo(parseReference("sourcePatientInfo", JsonSupport.getJsonValue(jsonObject, "sourcePatientInfo", JsonObject.class), -1));
        JsonArray relatedArray = JsonSupport.getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArray) {
                builder.related(parseReference("related", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected DocumentReference.RelatesTo parseDocumentReferenceRelatesTo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("DocumentReference.RelatesTo", jsonObject);
        DocumentRelationshipType code = (DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        Reference target = parseReference("target", JsonSupport.getJsonValue(jsonObject, "target", JsonObject.class), -1);
        DocumentReference.RelatesTo.Builder builder = DocumentReference.RelatesTo.builder(code, target);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected void parseDomainResource(DomainResource.Builder builder, JsonObject jsonObject) {
        parseResource(builder, jsonObject);
        builder.text(parseNarrative("text", JsonSupport.getJsonValue(jsonObject, "text", JsonObject.class), -1));
        JsonArray containedArray = JsonSupport.getJsonArray(jsonObject, "contained");
        if (containedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : containedArray) {
                builder.contained(parseResource("contained", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray extensionArray = JsonSupport.getJsonArray(jsonObject, "extension");
        if (extensionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : extensionArray) {
                builder.extension(parseExtension("extension", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray modifierExtensionArray = JsonSupport.getJsonArray(jsonObject, "modifierExtension");
        if (modifierExtensionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierExtensionArray) {
                builder.modifierExtension(parseExtension("modifierExtension", (JsonObject) jsonValue, index));
                index++;
            }
        }
    }

    protected Dosage parseDosage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Dosage", jsonObject);
        Dosage.Builder builder = Dosage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.sequence(parseInteger("sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray additionalInstructionArray = JsonSupport.getJsonArray(jsonObject, "additionalInstruction");
        if (additionalInstructionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : additionalInstructionArray) {
                builder.additionalInstruction(parseCodeableConcept("additionalInstruction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.patientInstruction(parseString("patientInstruction", JsonSupport.getJsonValue(jsonObject, "patientInstruction", JsonString.class), jsonObject.get("_patientInstruction"), -1));
        builder.timing(parseTiming("timing", JsonSupport.getJsonValue(jsonObject, "timing", JsonObject.class), -1));
        builder.asNeeded(parseChoiceElement("asNeeded", jsonObject, "Boolean", "CodeableConcept"));
        builder.site(parseCodeableConcept("site", JsonSupport.getJsonValue(jsonObject, "site", JsonObject.class), -1));
        builder.route(parseCodeableConcept("route", JsonSupport.getJsonValue(jsonObject, "route", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        JsonArray doseAndRateArray = JsonSupport.getJsonArray(jsonObject, "doseAndRate");
        if (doseAndRateArray != null) {
            int index = 0;
            for (JsonValue jsonValue : doseAndRateArray) {
                builder.doseAndRate(parseDosageDoseAndRate("doseAndRate", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.maxDosePerPeriod(parseRatio("maxDosePerPeriod", JsonSupport.getJsonValue(jsonObject, "maxDosePerPeriod", JsonObject.class), -1));
        builder.maxDosePerAdministration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerAdministration", JsonSupport.getJsonValue(jsonObject, "maxDosePerAdministration", JsonObject.class), -1));
        builder.maxDosePerLifetime((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerLifetime", JsonSupport.getJsonValue(jsonObject, "maxDosePerLifetime", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Dosage.DoseAndRate parseDosageDoseAndRate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Dosage.DoseAndRate", jsonObject);
        Dosage.DoseAndRate.Builder builder = Dosage.DoseAndRate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.dose(parseChoiceElement("dose", jsonObject, "Range", "SimpleQuantity"));
        builder.rate(parseChoiceElement("rate", jsonObject, "Ratio", "Range", "SimpleQuantity"));
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis parseEffectEvidenceSynthesis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference population = parseReference("population", JsonSupport.getJsonValue(jsonObject, "population", JsonObject.class), -1);
        Reference exposure = parseReference("exposure", JsonSupport.getJsonValue(jsonObject, "exposure", JsonObject.class), -1);
        Reference exposureAlternative = parseReference("exposureAlternative", JsonSupport.getJsonValue(jsonObject, "exposureAlternative", JsonObject.class), -1);
        Reference outcome = parseReference("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1);
        EffectEvidenceSynthesis.Builder builder = EffectEvidenceSynthesis.builder(status, population, exposure, exposureAlternative, outcome);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.synthesisType(parseCodeableConcept("synthesisType", JsonSupport.getJsonValue(jsonObject, "synthesisType", JsonObject.class), -1));
        builder.studyType(parseCodeableConcept("studyType", JsonSupport.getJsonValue(jsonObject, "studyType", JsonObject.class), -1));
        builder.sampleSize(parseEffectEvidenceSynthesisSampleSize("sampleSize", JsonSupport.getJsonValue(jsonObject, "sampleSize", JsonObject.class), -1));
        JsonArray resultsByExposureArray = JsonSupport.getJsonArray(jsonObject, "resultsByExposure");
        if (resultsByExposureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resultsByExposureArray) {
                builder.resultsByExposure(parseEffectEvidenceSynthesisResultsByExposure("resultsByExposure", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray effectEstimateArray = JsonSupport.getJsonArray(jsonObject, "effectEstimate");
        if (effectEstimateArray != null) {
            int index = 0;
            for (JsonValue jsonValue : effectEstimateArray) {
                builder.effectEstimate(parseEffectEvidenceSynthesisEffectEstimate("effectEstimate", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray certaintyArray = JsonSupport.getJsonArray(jsonObject, "certainty");
        if (certaintyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : certaintyArray) {
                builder.certainty(parseEffectEvidenceSynthesisCertainty("certainty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis.Certainty parseEffectEvidenceSynthesisCertainty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis.Certainty", jsonObject);
        EffectEvidenceSynthesis.Certainty.Builder builder = EffectEvidenceSynthesis.Certainty.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray ratingArray = JsonSupport.getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ratingArray) {
                builder.rating(parseCodeableConcept("rating", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray certaintySubcomponentArray = JsonSupport.getJsonArray(jsonObject, "certaintySubcomponent");
        if (certaintySubcomponentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : certaintySubcomponentArray) {
                builder.certaintySubcomponent(parseEffectEvidenceSynthesisCertaintyCertaintySubcomponent("certaintySubcomponent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis.Certainty.CertaintySubcomponent parseEffectEvidenceSynthesisCertaintyCertaintySubcomponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis.Certainty.CertaintySubcomponent", jsonObject);
        EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.Builder builder = EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray ratingArray = JsonSupport.getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ratingArray) {
                builder.rating(parseCodeableConcept("rating", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis.EffectEstimate parseEffectEvidenceSynthesisEffectEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis.EffectEstimate", jsonObject);
        EffectEvidenceSynthesis.EffectEstimate.Builder builder = EffectEvidenceSynthesis.EffectEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.variantState(parseCodeableConcept("variantState", JsonSupport.getJsonValue(jsonObject, "variantState", JsonObject.class), -1));
        builder.value(parseDecimal("value", JsonSupport.getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", JsonSupport.getJsonValue(jsonObject, "unitOfMeasure", JsonObject.class), -1));
        JsonArray precisionEstimateArray = JsonSupport.getJsonArray(jsonObject, "precisionEstimate");
        if (precisionEstimateArray != null) {
            int index = 0;
            for (JsonValue jsonValue : precisionEstimateArray) {
                builder.precisionEstimate(parseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate("precisionEstimate", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate parseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate", jsonObject);
        EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.Builder builder = EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.level(parseDecimal("level", JsonSupport.getJsonValue(jsonObject, "level", JsonNumber.class), jsonObject.get("_level"), -1));
        builder.from(parseDecimal("from", JsonSupport.getJsonValue(jsonObject, "from", JsonNumber.class), jsonObject.get("_from"), -1));
        builder.to(parseDecimal("to", JsonSupport.getJsonValue(jsonObject, "to", JsonNumber.class), jsonObject.get("_to"), -1));
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis.ResultsByExposure parseEffectEvidenceSynthesisResultsByExposure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis.ResultsByExposure", jsonObject);
        Reference riskEvidenceSynthesis = parseReference("riskEvidenceSynthesis", JsonSupport.getJsonValue(jsonObject, "riskEvidenceSynthesis", JsonObject.class), -1);
        EffectEvidenceSynthesis.ResultsByExposure.Builder builder = EffectEvidenceSynthesis.ResultsByExposure.builder(riskEvidenceSynthesis);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.exposureState((ExposureState) parseString(ExposureState.builder(), "exposureState", JsonSupport.getJsonValue(jsonObject, "exposureState", JsonString.class), jsonObject.get("_exposureState"), -1));
        builder.variantState(parseCodeableConcept("variantState", JsonSupport.getJsonValue(jsonObject, "variantState", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected EffectEvidenceSynthesis.SampleSize parseEffectEvidenceSynthesisSampleSize(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EffectEvidenceSynthesis.SampleSize", jsonObject);
        EffectEvidenceSynthesis.SampleSize.Builder builder = EffectEvidenceSynthesis.SampleSize.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.numberOfStudies(parseInteger("numberOfStudies", JsonSupport.getJsonValue(jsonObject, "numberOfStudies", JsonNumber.class), jsonObject.get("_numberOfStudies"), -1));
        builder.numberOfParticipants(parseInteger("numberOfParticipants", JsonSupport.getJsonValue(jsonObject, "numberOfParticipants", JsonNumber.class), jsonObject.get("_numberOfParticipants"), -1));
        stackPop();
        return builder.build();
    }

    protected void parseElement(Element.Builder builder, JsonObject jsonObject) {
        builder.id(parseJavaString("id", JsonSupport.getJsonValue(jsonObject, "id", JsonString.class), -1));
        JsonArray extensionArray = JsonSupport.getJsonArray(jsonObject, "extension");
        if (extensionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : extensionArray) {
                builder.extension(parseExtension("extension", (JsonObject) jsonValue, index));
                index++;
            }
        }
    }

    protected ElementDefinition parseElementDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition", jsonObject);
        String path = parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1);
        ElementDefinition.Builder builder = ElementDefinition.builder(path);
        parseBackboneElement(builder, jsonObject);
        JsonArray representationArray = JsonSupport.getJsonArray(jsonObject, "representation", true);
        if (representationArray != null) {
            int index = 0;
            JsonArray _representationArray = jsonObject.getJsonArray("_representation");
            for (JsonValue jsonValue : representationArray) {
                builder.representation((PropertyRepresentation) parseString(PropertyRepresentation.builder(), "representation", jsonValue, JsonSupport.getJsonValue(_representationArray, index), index));
                index++;
            }
        }
        builder.sliceName(parseString("sliceName", JsonSupport.getJsonValue(jsonObject, "sliceName", JsonString.class), jsonObject.get("_sliceName"), -1));
        builder.sliceIsConstraining(parseBoolean("sliceIsConstraining", JsonSupport.getJsonValue(jsonObject, "sliceIsConstraining", JsonValue.class), jsonObject.get("_sliceIsConstraining"), -1));
        builder.label(parseString("label", JsonSupport.getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCoding("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.slicing(parseElementDefinitionSlicing("slicing", JsonSupport.getJsonValue(jsonObject, "slicing", JsonObject.class), -1));
        builder._short(parseString("short", JsonSupport.getJsonValue(jsonObject, "short", JsonString.class), jsonObject.get("_short"), -1));
        builder.definition((Markdown) parseString(Markdown.builder(), "definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.requirements((Markdown) parseString(Markdown.builder(), "requirements", JsonSupport.getJsonValue(jsonObject, "requirements", JsonString.class), jsonObject.get("_requirements"), -1));
        JsonArray aliasArray = JsonSupport.getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            int index = 0;
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (JsonValue jsonValue : aliasArray) {
                builder.alias(parseString("alias", jsonValue, JsonSupport.getJsonValue(_aliasArray, index), index));
                index++;
            }
        }
        builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.base(parseElementDefinitionBase("base", JsonSupport.getJsonValue(jsonObject, "base", JsonObject.class), -1));
        builder.contentReference(parseUri("contentReference", JsonSupport.getJsonValue(jsonObject, "contentReference", JsonString.class), jsonObject.get("_contentReference"), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseElementDefinitionType("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.defaultValue(parseChoiceElement("defaultValue", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage"));
        builder.meaningWhenMissing((Markdown) parseString(Markdown.builder(), "meaningWhenMissing", JsonSupport.getJsonValue(jsonObject, "meaningWhenMissing", JsonString.class), jsonObject.get("_meaningWhenMissing"), -1));
        builder.orderMeaning(parseString("orderMeaning", JsonSupport.getJsonValue(jsonObject, "orderMeaning", JsonString.class), jsonObject.get("_orderMeaning"), -1));
        builder.fixed(parseChoiceElement("fixed", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage"));
        builder.pattern(parseChoiceElement("pattern", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage"));
        JsonArray exampleArray = JsonSupport.getJsonArray(jsonObject, "example");
        if (exampleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : exampleArray) {
                builder.example(parseElementDefinitionExample("example", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.minValue(parseChoiceElement("minValue", jsonObject, "Date", "DateTime", "Instant", "Time", "Decimal", "Integer", "PositiveInt", "UnsignedInt", "Quantity"));
        builder.maxValue(parseChoiceElement("maxValue", jsonObject, "Date", "DateTime", "Instant", "Time", "Decimal", "Integer", "PositiveInt", "UnsignedInt", "Quantity"));
        builder.maxLength(parseInteger("maxLength", JsonSupport.getJsonValue(jsonObject, "maxLength", JsonNumber.class), jsonObject.get("_maxLength"), -1));
        JsonArray conditionArray = JsonSupport.getJsonArray(jsonObject, "condition", true);
        if (conditionArray != null) {
            int index = 0;
            JsonArray _conditionArray = jsonObject.getJsonArray("_condition");
            for (JsonValue jsonValue : conditionArray) {
                builder.condition((Id) parseString(Id.builder(), "condition", jsonValue, JsonSupport.getJsonValue(_conditionArray, index), index));
                index++;
            }
        }
        JsonArray constraintArray = JsonSupport.getJsonArray(jsonObject, "constraint");
        if (constraintArray != null) {
            int index = 0;
            for (JsonValue jsonValue : constraintArray) {
                builder.constraint(parseElementDefinitionConstraint("constraint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.mustSupport(parseBoolean("mustSupport", JsonSupport.getJsonValue(jsonObject, "mustSupport", JsonValue.class), jsonObject.get("_mustSupport"), -1));
        builder.isModifier(parseBoolean("isModifier", JsonSupport.getJsonValue(jsonObject, "isModifier", JsonValue.class), jsonObject.get("_isModifier"), -1));
        builder.isModifierReason(parseString("isModifierReason", JsonSupport.getJsonValue(jsonObject, "isModifierReason", JsonString.class), jsonObject.get("_isModifierReason"), -1));
        builder.isSummary(parseBoolean("isSummary", JsonSupport.getJsonValue(jsonObject, "isSummary", JsonValue.class), jsonObject.get("_isSummary"), -1));
        builder.binding(parseElementDefinitionBinding("binding", JsonSupport.getJsonValue(jsonObject, "binding", JsonObject.class), -1));
        JsonArray mappingArray = JsonSupport.getJsonArray(jsonObject, "mapping");
        if (mappingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : mappingArray) {
                builder.mapping(parseElementDefinitionMapping("mapping", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Base parseElementDefinitionBase(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Base", jsonObject);
        String path = parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1);
        UnsignedInt min = (UnsignedInt) parseInteger(UnsignedInt.builder(), "min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1);
        String max = parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1);
        ElementDefinition.Base.Builder builder = ElementDefinition.Base.builder(path, min, max);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Binding parseElementDefinitionBinding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Binding", jsonObject);
        BindingStrength strength = (BindingStrength) parseString(BindingStrength.builder(), "strength", JsonSupport.getJsonValue(jsonObject, "strength", JsonString.class), jsonObject.get("_strength"), -1);
        ElementDefinition.Binding.Builder builder = ElementDefinition.Binding.builder(strength);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", JsonSupport.getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1));
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Constraint parseElementDefinitionConstraint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Constraint", jsonObject);
        Id key = (Id) parseString(Id.builder(), "key", JsonSupport.getJsonValue(jsonObject, "key", JsonString.class), jsonObject.get("_key"), -1);
        ConstraintSeverity severity = (ConstraintSeverity) parseString(ConstraintSeverity.builder(), "severity", JsonSupport.getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1);
        String human = parseString("human", JsonSupport.getJsonValue(jsonObject, "human", JsonString.class), jsonObject.get("_human"), -1);
        ElementDefinition.Constraint.Builder builder = ElementDefinition.Constraint.builder(key, severity, human);
        parseBackboneElement(builder, jsonObject);
        builder.requirements(parseString("requirements", JsonSupport.getJsonValue(jsonObject, "requirements", JsonString.class), jsonObject.get("_requirements"), -1));
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.xpath(parseString("xpath", JsonSupport.getJsonValue(jsonObject, "xpath", JsonString.class), jsonObject.get("_xpath"), -1));
        builder.source((Canonical) parseUri(Canonical.builder(), "source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Example parseElementDefinitionExample(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Example", jsonObject);
        String label = parseString("label", JsonSupport.getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1);
        Element value = parseChoiceElement("value", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage");
        ElementDefinition.Example.Builder builder = ElementDefinition.Example.builder(label, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Mapping parseElementDefinitionMapping(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Mapping", jsonObject);
        Id identity = (Id) parseString(Id.builder(), "identity", JsonSupport.getJsonValue(jsonObject, "identity", JsonString.class), jsonObject.get("_identity"), -1);
        String map = parseString("map", JsonSupport.getJsonValue(jsonObject, "map", JsonString.class), jsonObject.get("_map"), -1);
        ElementDefinition.Mapping.Builder builder = ElementDefinition.Mapping.builder(identity, map);
        parseBackboneElement(builder, jsonObject);
        builder.language((Code) parseString(Code.builder(), "language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Slicing parseElementDefinitionSlicing(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Slicing", jsonObject);
        SlicingRules rules = (SlicingRules) parseString(SlicingRules.builder(), "rules", JsonSupport.getJsonValue(jsonObject, "rules", JsonString.class), jsonObject.get("_rules"), -1);
        ElementDefinition.Slicing.Builder builder = ElementDefinition.Slicing.builder(rules);
        parseBackboneElement(builder, jsonObject);
        JsonArray discriminatorArray = JsonSupport.getJsonArray(jsonObject, "discriminator");
        if (discriminatorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : discriminatorArray) {
                builder.discriminator(parseElementDefinitionSlicingDiscriminator("discriminator", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.ordered(parseBoolean("ordered", JsonSupport.getJsonValue(jsonObject, "ordered", JsonValue.class), jsonObject.get("_ordered"), -1));
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Slicing.Discriminator parseElementDefinitionSlicingDiscriminator(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Slicing.Discriminator", jsonObject);
        DiscriminatorType type = (DiscriminatorType) parseString(DiscriminatorType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        String path = parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1);
        ElementDefinition.Slicing.Discriminator.Builder builder = ElementDefinition.Slicing.Discriminator.builder(type, path);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ElementDefinition.Type parseElementDefinitionType(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ElementDefinition.Type", jsonObject);
        Uri code = parseUri("code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        ElementDefinition.Type.Builder builder = ElementDefinition.Type.builder(code);
        parseBackboneElement(builder, jsonObject);
        JsonArray profileArray = JsonSupport.getJsonArray(jsonObject, "profile", true);
        if (profileArray != null) {
            int index = 0;
            JsonArray _profileArray = jsonObject.getJsonArray("_profile");
            for (JsonValue jsonValue : profileArray) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", jsonValue, JsonSupport.getJsonValue(_profileArray, index), index));
                index++;
            }
        }
        JsonArray targetProfileArray = JsonSupport.getJsonArray(jsonObject, "targetProfile", true);
        if (targetProfileArray != null) {
            int index = 0;
            JsonArray _targetProfileArray = jsonObject.getJsonArray("_targetProfile");
            for (JsonValue jsonValue : targetProfileArray) {
                builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", jsonValue, JsonSupport.getJsonValue(_targetProfileArray, index), index));
                index++;
            }
        }
        JsonArray aggregationArray = JsonSupport.getJsonArray(jsonObject, "aggregation", true);
        if (aggregationArray != null) {
            int index = 0;
            JsonArray _aggregationArray = jsonObject.getJsonArray("_aggregation");
            for (JsonValue jsonValue : aggregationArray) {
                builder.aggregation((AggregationMode) parseString(AggregationMode.builder(), "aggregation", jsonValue, JsonSupport.getJsonValue(_aggregationArray, index), index));
                index++;
            }
        }
        builder.versioning((ReferenceVersionRules) parseString(ReferenceVersionRules.builder(), "versioning", JsonSupport.getJsonValue(jsonObject, "versioning", JsonString.class), jsonObject.get("_versioning"), -1));
        stackPop();
        return builder.build();
    }

    protected Encounter parseEncounter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter", jsonObject);
        EncounterStatus status = (EncounterStatus) parseString(EncounterStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Coding clazz = parseCoding("class", JsonSupport.getJsonValue(jsonObject, "class", JsonObject.class), -1);
        Encounter.Builder builder = Encounter.builder(status, clazz);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray statusHistoryArray = JsonSupport.getJsonArray(jsonObject, "statusHistory");
        if (statusHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : statusHistoryArray) {
                builder.statusHistory(parseEncounterStatusHistory("statusHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray classHistoryArray = JsonSupport.getJsonArray(jsonObject, "classHistory");
        if (classHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : classHistoryArray) {
                builder.classHistory(parseEncounterClassHistory("classHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviceType(parseCodeableConcept("serviceType", JsonSupport.getJsonValue(jsonObject, "serviceType", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray episodeOfCareArray = JsonSupport.getJsonArray(jsonObject, "episodeOfCare");
        if (episodeOfCareArray != null) {
            int index = 0;
            for (JsonValue jsonValue : episodeOfCareArray) {
                builder.episodeOfCare(parseReference("episodeOfCare", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parseEncounterParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray appointmentArray = JsonSupport.getJsonArray(jsonObject, "appointment");
        if (appointmentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : appointmentArray) {
                builder.appointment(parseReference("appointment", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.length((Duration) parseQuantity(Duration.builder(), "length", JsonSupport.getJsonValue(jsonObject, "length", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray diagnosisArray = JsonSupport.getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            int index = 0;
            for (JsonValue jsonValue : diagnosisArray) {
                builder.diagnosis(parseEncounterDiagnosis("diagnosis", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray accountArray = JsonSupport.getJsonArray(jsonObject, "account");
        if (accountArray != null) {
            int index = 0;
            for (JsonValue jsonValue : accountArray) {
                builder.account(parseReference("account", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.hospitalization(parseEncounterHospitalization("hospitalization", JsonSupport.getJsonValue(jsonObject, "hospitalization", JsonObject.class), -1));
        JsonArray locationArray = JsonSupport.getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationArray) {
                builder.location(parseEncounterLocation("location", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviceProvider(parseReference("serviceProvider", JsonSupport.getJsonValue(jsonObject, "serviceProvider", JsonObject.class), -1));
        builder.partOf(parseReference("partOf", JsonSupport.getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Encounter.ClassHistory parseEncounterClassHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter.ClassHistory", jsonObject);
        Coding clazz = parseCoding("class", JsonSupport.getJsonValue(jsonObject, "class", JsonObject.class), -1);
        Period period = parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1);
        Encounter.ClassHistory.Builder builder = Encounter.ClassHistory.builder(clazz, period);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Encounter.Diagnosis parseEncounterDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter.Diagnosis", jsonObject);
        Reference condition = parseReference("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonObject.class), -1);
        Encounter.Diagnosis.Builder builder = Encounter.Diagnosis.builder(condition);
        parseBackboneElement(builder, jsonObject);
        builder.use(parseCodeableConcept("use", JsonSupport.getJsonValue(jsonObject, "use", JsonObject.class), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", JsonSupport.getJsonValue(jsonObject, "rank", JsonNumber.class), jsonObject.get("_rank"), -1));
        stackPop();
        return builder.build();
    }

    protected Encounter.Hospitalization parseEncounterHospitalization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter.Hospitalization", jsonObject);
        Encounter.Hospitalization.Builder builder = Encounter.Hospitalization.builder();
        parseBackboneElement(builder, jsonObject);
        builder.preAdmissionIdentifier(parseIdentifier("preAdmissionIdentifier", JsonSupport.getJsonValue(jsonObject, "preAdmissionIdentifier", JsonObject.class), -1));
        builder.origin(parseReference("origin", JsonSupport.getJsonValue(jsonObject, "origin", JsonObject.class), -1));
        builder.admitSource(parseCodeableConcept("admitSource", JsonSupport.getJsonValue(jsonObject, "admitSource", JsonObject.class), -1));
        builder.reAdmission(parseCodeableConcept("reAdmission", JsonSupport.getJsonValue(jsonObject, "reAdmission", JsonObject.class), -1));
        JsonArray dietPreferenceArray = JsonSupport.getJsonArray(jsonObject, "dietPreference");
        if (dietPreferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dietPreferenceArray) {
                builder.dietPreference(parseCodeableConcept("dietPreference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialCourtesyArray = JsonSupport.getJsonArray(jsonObject, "specialCourtesy");
        if (specialCourtesyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialCourtesyArray) {
                builder.specialCourtesy(parseCodeableConcept("specialCourtesy", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialArrangementArray = JsonSupport.getJsonArray(jsonObject, "specialArrangement");
        if (specialArrangementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialArrangementArray) {
                builder.specialArrangement(parseCodeableConcept("specialArrangement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.destination(parseReference("destination", JsonSupport.getJsonValue(jsonObject, "destination", JsonObject.class), -1));
        builder.dischargeDisposition(parseCodeableConcept("dischargeDisposition", JsonSupport.getJsonValue(jsonObject, "dischargeDisposition", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Encounter.Location parseEncounterLocation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter.Location", jsonObject);
        Reference location = parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1);
        Encounter.Location.Builder builder = Encounter.Location.builder(location);
        parseBackboneElement(builder, jsonObject);
        builder.status((EncounterLocationStatus) parseString(EncounterLocationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.physicalType(parseCodeableConcept("physicalType", JsonSupport.getJsonValue(jsonObject, "physicalType", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Encounter.Participant parseEncounterParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter.Participant", jsonObject);
        Encounter.Participant.Builder builder = Encounter.Participant.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.individual(parseReference("individual", JsonSupport.getJsonValue(jsonObject, "individual", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Encounter.StatusHistory parseEncounterStatusHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Encounter.StatusHistory", jsonObject);
        EncounterStatus status = (EncounterStatus) parseString(EncounterStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Period period = parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1);
        Encounter.StatusHistory.Builder builder = Encounter.StatusHistory.builder(status, period);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Endpoint parseEndpoint(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Endpoint", jsonObject);
        EndpointStatus status = (EndpointStatus) parseString(EndpointStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Coding connectionType = parseCoding("connectionType", JsonSupport.getJsonValue(jsonObject, "connectionType", JsonObject.class), -1);
        java.util.List<CodeableConcept> payloadType = new ArrayList<>();
        JsonArray payloadTypeArray = JsonSupport.getJsonArray(jsonObject, "payloadType");
        if (payloadTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : payloadTypeArray) {
                payloadType.add(parseCodeableConcept("payloadType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Url address = (Url) parseUri(Url.builder(), "address", JsonSupport.getJsonValue(jsonObject, "address", JsonString.class), jsonObject.get("_address"), -1);
        Endpoint.Builder builder = Endpoint.builder(status, connectionType, payloadType, address);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.managingOrganization(parseReference("managingOrganization", JsonSupport.getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactPoint("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray payloadMimeTypeArray = JsonSupport.getJsonArray(jsonObject, "payloadMimeType", true);
        if (payloadMimeTypeArray != null) {
            int index = 0;
            JsonArray _payloadMimeTypeArray = jsonObject.getJsonArray("_payloadMimeType");
            for (JsonValue jsonValue : payloadMimeTypeArray) {
                builder.payloadMimeType((Code) parseString(Code.builder(), "payloadMimeType", jsonValue, JsonSupport.getJsonValue(_payloadMimeTypeArray, index), index));
                index++;
            }
        }
        JsonArray headerArray = JsonSupport.getJsonArray(jsonObject, "header", true);
        if (headerArray != null) {
            int index = 0;
            JsonArray _headerArray = jsonObject.getJsonArray("_header");
            for (JsonValue jsonValue : headerArray) {
                builder.header(parseString("header", jsonValue, JsonSupport.getJsonValue(_headerArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EnrollmentRequest parseEnrollmentRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EnrollmentRequest", jsonObject);
        EnrollmentRequest.Builder builder = EnrollmentRequest.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((EnrollmentRequestStatus) parseString(EnrollmentRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.created(parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.insurer(parseReference("insurer", JsonSupport.getJsonValue(jsonObject, "insurer", JsonObject.class), -1));
        builder.provider(parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.candidate(parseReference("candidate", JsonSupport.getJsonValue(jsonObject, "candidate", JsonObject.class), -1));
        builder.coverage(parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected EnrollmentResponse parseEnrollmentResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EnrollmentResponse", jsonObject);
        EnrollmentResponse.Builder builder = EnrollmentResponse.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((EnrollmentResponseStatus) parseString(EnrollmentResponseStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.request(parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", JsonSupport.getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.created(parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1));
        builder.organization(parseReference("organization", JsonSupport.getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.requestProvider(parseReference("requestProvider", JsonSupport.getJsonValue(jsonObject, "requestProvider", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected EpisodeOfCare parseEpisodeOfCare(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EpisodeOfCare", jsonObject);
        EpisodeOfCareStatus status = (EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        EpisodeOfCare.Builder builder = EpisodeOfCare.builder(status, patient);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray statusHistoryArray = JsonSupport.getJsonArray(jsonObject, "statusHistory");
        if (statusHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : statusHistoryArray) {
                builder.statusHistory(parseEpisodeOfCareStatusHistory("statusHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray diagnosisArray = JsonSupport.getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            int index = 0;
            for (JsonValue jsonValue : diagnosisArray) {
                builder.diagnosis(parseEpisodeOfCareDiagnosis("diagnosis", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.managingOrganization(parseReference("managingOrganization", JsonSupport.getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray referralRequestArray = JsonSupport.getJsonArray(jsonObject, "referralRequest");
        if (referralRequestArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referralRequestArray) {
                builder.referralRequest(parseReference("referralRequest", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.careManager(parseReference("careManager", JsonSupport.getJsonValue(jsonObject, "careManager", JsonObject.class), -1));
        JsonArray teamArray = JsonSupport.getJsonArray(jsonObject, "team");
        if (teamArray != null) {
            int index = 0;
            for (JsonValue jsonValue : teamArray) {
                builder.team(parseReference("team", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray accountArray = JsonSupport.getJsonArray(jsonObject, "account");
        if (accountArray != null) {
            int index = 0;
            for (JsonValue jsonValue : accountArray) {
                builder.account(parseReference("account", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EpisodeOfCare.Diagnosis parseEpisodeOfCareDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EpisodeOfCare.Diagnosis", jsonObject);
        Reference condition = parseReference("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonObject.class), -1);
        EpisodeOfCare.Diagnosis.Builder builder = EpisodeOfCare.Diagnosis.builder(condition);
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", JsonSupport.getJsonValue(jsonObject, "rank", JsonNumber.class), jsonObject.get("_rank"), -1));
        stackPop();
        return builder.build();
    }

    protected EpisodeOfCare.StatusHistory parseEpisodeOfCareStatusHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EpisodeOfCare.StatusHistory", jsonObject);
        EpisodeOfCareStatus status = (EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Period period = parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1);
        EpisodeOfCare.StatusHistory.Builder builder = EpisodeOfCare.StatusHistory.builder(status, period);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected EventDefinition parseEventDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EventDefinition", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<TriggerDefinition> trigger = new ArrayList<>();
        JsonArray triggerArray = JsonSupport.getJsonArray(jsonObject, "trigger");
        if (triggerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : triggerArray) {
                trigger.add(parseTriggerDefinition("trigger", (JsonObject) jsonValue, index));
                index++;
            }
        }
        EventDefinition.Builder builder = EventDefinition.builder(status, trigger);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Evidence parseEvidence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Evidence", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference exposureBackground = parseReference("exposureBackground", JsonSupport.getJsonValue(jsonObject, "exposureBackground", JsonObject.class), -1);
        Evidence.Builder builder = Evidence.builder(status, exposureBackground);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", JsonSupport.getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray exposureVariantArray = JsonSupport.getJsonArray(jsonObject, "exposureVariant");
        if (exposureVariantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : exposureVariantArray) {
                builder.exposureVariant(parseReference("exposureVariant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray outcomeArray = JsonSupport.getJsonArray(jsonObject, "outcome");
        if (outcomeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outcomeArray) {
                builder.outcome(parseReference("outcome", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected EvidenceVariable parseEvidenceVariable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EvidenceVariable", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<EvidenceVariable.Characteristic> characteristic = new ArrayList<>();
        JsonArray characteristicArray = JsonSupport.getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : characteristicArray) {
                characteristic.add(parseEvidenceVariableCharacteristic("characteristic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        EvidenceVariable.Builder builder = EvidenceVariable.builder(status, characteristic);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", JsonSupport.getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type((EvidenceVariableType) parseString(EvidenceVariableType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        stackPop();
        return builder.build();
    }

    protected EvidenceVariable.Characteristic parseEvidenceVariableCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("EvidenceVariable.Characteristic", jsonObject);
        Element definition = parseChoiceElement("definition", jsonObject, "Reference", "Canonical", "CodeableConcept", "Expression", "DataRequirement", "TriggerDefinition");
        EvidenceVariable.Characteristic.Builder builder = EvidenceVariable.Characteristic.builder(definition);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray usageContextArray = JsonSupport.getJsonArray(jsonObject, "usageContext");
        if (usageContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : usageContextArray) {
                builder.usageContext(parseUsageContext("usageContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.exclude(parseBoolean("exclude", JsonSupport.getJsonValue(jsonObject, "exclude", JsonValue.class), jsonObject.get("_exclude"), -1));
        builder.participantEffective(parseChoiceElement("participantEffective", jsonObject, "DateTime", "Period", "Duration", "Timing"));
        builder.timeFromStart((Duration) parseQuantity(Duration.builder(), "timeFromStart", JsonSupport.getJsonValue(jsonObject, "timeFromStart", JsonObject.class), -1));
        builder.groupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "groupMeasure", JsonSupport.getJsonValue(jsonObject, "groupMeasure", JsonString.class), jsonObject.get("_groupMeasure"), -1));
        stackPop();
        return builder.build();
    }

    protected ExampleScenario parseExampleScenario(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ExampleScenario.Builder builder = ExampleScenario.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        JsonArray actorArray = JsonSupport.getJsonArray(jsonObject, "actor");
        if (actorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actorArray) {
                builder.actor(parseExampleScenarioActor("actor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instanceArray = JsonSupport.getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : instanceArray) {
                builder.instance(parseExampleScenarioInstance("instance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray processArray = JsonSupport.getJsonArray(jsonObject, "process");
        if (processArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processArray) {
                builder.process(parseExampleScenarioProcess("process", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray workflowArray = JsonSupport.getJsonArray(jsonObject, "workflow", true);
        if (workflowArray != null) {
            int index = 0;
            JsonArray _workflowArray = jsonObject.getJsonArray("_workflow");
            for (JsonValue jsonValue : workflowArray) {
                builder.workflow((Canonical) parseUri(Canonical.builder(), "workflow", jsonValue, JsonSupport.getJsonValue(_workflowArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Actor parseExampleScenarioActor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Actor", jsonObject);
        String actorId = parseString("actorId", JsonSupport.getJsonValue(jsonObject, "actorId", JsonString.class), jsonObject.get("_actorId"), -1);
        ExampleScenarioActorType type = (ExampleScenarioActorType) parseString(ExampleScenarioActorType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        ExampleScenario.Actor.Builder builder = ExampleScenario.Actor.builder(actorId, type);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Instance parseExampleScenarioInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Instance", jsonObject);
        String resourceId = parseString("resourceId", JsonSupport.getJsonValue(jsonObject, "resourceId", JsonString.class), jsonObject.get("_resourceId"), -1);
        FHIRResourceType resourceType = (FHIRResourceType) parseString(FHIRResourceType.builder(), "resourceType", JsonSupport.getJsonValue(jsonObject, "resourceType", JsonString.class), jsonObject.get("_resourceType"), -1);
        ExampleScenario.Instance.Builder builder = ExampleScenario.Instance.builder(resourceId, resourceType);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray versionArray = JsonSupport.getJsonArray(jsonObject, "version");
        if (versionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : versionArray) {
                builder.version(parseExampleScenarioInstanceVersion("version", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray containedInstanceArray = JsonSupport.getJsonArray(jsonObject, "containedInstance");
        if (containedInstanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : containedInstanceArray) {
                builder.containedInstance(parseExampleScenarioInstanceContainedInstance("containedInstance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Instance.ContainedInstance parseExampleScenarioInstanceContainedInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Instance.ContainedInstance", jsonObject);
        String resourceId = parseString("resourceId", JsonSupport.getJsonValue(jsonObject, "resourceId", JsonString.class), jsonObject.get("_resourceId"), -1);
        ExampleScenario.Instance.ContainedInstance.Builder builder = ExampleScenario.Instance.ContainedInstance.builder(resourceId);
        parseBackboneElement(builder, jsonObject);
        builder.versionId(parseString("versionId", JsonSupport.getJsonValue(jsonObject, "versionId", JsonString.class), jsonObject.get("_versionId"), -1));
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Instance.Version parseExampleScenarioInstanceVersion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Instance.Version", jsonObject);
        String versionId = parseString("versionId", JsonSupport.getJsonValue(jsonObject, "versionId", JsonString.class), jsonObject.get("_versionId"), -1);
        Markdown description = (Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1);
        ExampleScenario.Instance.Version.Builder builder = ExampleScenario.Instance.Version.builder(versionId, description);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Process parseExampleScenarioProcess(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Process", jsonObject);
        String title = parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1);
        ExampleScenario.Process.Builder builder = ExampleScenario.Process.builder(title);
        parseBackboneElement(builder, jsonObject);
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.preConditions((Markdown) parseString(Markdown.builder(), "preConditions", JsonSupport.getJsonValue(jsonObject, "preConditions", JsonString.class), jsonObject.get("_preConditions"), -1));
        builder.postConditions((Markdown) parseString(Markdown.builder(), "postConditions", JsonSupport.getJsonValue(jsonObject, "postConditions", JsonString.class), jsonObject.get("_postConditions"), -1));
        JsonArray stepArray = JsonSupport.getJsonArray(jsonObject, "step");
        if (stepArray != null) {
            int index = 0;
            for (JsonValue jsonValue : stepArray) {
                builder.step(parseExampleScenarioProcessStep("step", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Process.Step parseExampleScenarioProcessStep(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Process.Step", jsonObject);
        ExampleScenario.Process.Step.Builder builder = ExampleScenario.Process.Step.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray processArray = JsonSupport.getJsonArray(jsonObject, "process");
        if (processArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processArray) {
                builder.process(parseExampleScenarioProcess("process", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.pause(parseBoolean("pause", JsonSupport.getJsonValue(jsonObject, "pause", JsonValue.class), jsonObject.get("_pause"), -1));
        builder.operation(parseExampleScenarioProcessStepOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        JsonArray alternativeArray = JsonSupport.getJsonArray(jsonObject, "alternative");
        if (alternativeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : alternativeArray) {
                builder.alternative(parseExampleScenarioProcessStepAlternative("alternative", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Process.Step.Alternative parseExampleScenarioProcessStepAlternative(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Process.Step.Alternative", jsonObject);
        String title = parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1);
        ExampleScenario.Process.Step.Alternative.Builder builder = ExampleScenario.Process.Step.Alternative.builder(title);
        parseBackboneElement(builder, jsonObject);
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray stepArray = JsonSupport.getJsonArray(jsonObject, "step");
        if (stepArray != null) {
            int index = 0;
            for (JsonValue jsonValue : stepArray) {
                builder.step(parseExampleScenarioProcessStep("step", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExampleScenario.Process.Step.Operation parseExampleScenarioProcessStepOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExampleScenario.Process.Step.Operation", jsonObject);
        String number = parseString("number", JsonSupport.getJsonValue(jsonObject, "number", JsonString.class), jsonObject.get("_number"), -1);
        ExampleScenario.Process.Step.Operation.Builder builder = ExampleScenario.Process.Step.Operation.builder(number);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseString("type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.initiator(parseString("initiator", JsonSupport.getJsonValue(jsonObject, "initiator", JsonString.class), jsonObject.get("_initiator"), -1));
        builder.receiver(parseString("receiver", JsonSupport.getJsonValue(jsonObject, "receiver", JsonString.class), jsonObject.get("_receiver"), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.initiatorActive(parseBoolean("initiatorActive", JsonSupport.getJsonValue(jsonObject, "initiatorActive", JsonValue.class), jsonObject.get("_initiatorActive"), -1));
        builder.receiverActive(parseBoolean("receiverActive", JsonSupport.getJsonValue(jsonObject, "receiverActive", JsonValue.class), jsonObject.get("_receiverActive"), -1));
        builder.request(parseExampleScenarioInstanceContainedInstance("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.response(parseExampleScenarioInstanceContainedInstance("response", JsonSupport.getJsonValue(jsonObject, "response", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit parseExplanationOfBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit", jsonObject);
        ExplanationOfBenefitStatus status = (ExplanationOfBenefitStatus) parseString(ExplanationOfBenefitStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Use use = (Use) parseString(Use.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference insurer = parseReference("insurer", JsonSupport.getJsonValue(jsonObject, "insurer", JsonObject.class), -1);
        Reference provider = parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1);
        RemittanceOutcome outcome = (RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1);
        java.util.List<ExplanationOfBenefit.Insurance> insurance = new ArrayList<>();
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                insurance.add(parseExplanationOfBenefitInsurance("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ExplanationOfBenefit.Builder builder = ExplanationOfBenefit.builder(status, type, use, patient, created, insurer, provider, outcome, insurance);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subType(parseCodeableConcept("subType", JsonSupport.getJsonValue(jsonObject, "subType", JsonObject.class), -1));
        builder.billablePeriod(parsePeriod("billablePeriod", JsonSupport.getJsonValue(jsonObject, "billablePeriod", JsonObject.class), -1));
        builder.enterer(parseReference("enterer", JsonSupport.getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.fundsReserveRequested(parseCodeableConcept("fundsReserveRequested", JsonSupport.getJsonValue(jsonObject, "fundsReserveRequested", JsonObject.class), -1));
        builder.fundsReserve(parseCodeableConcept("fundsReserve", JsonSupport.getJsonValue(jsonObject, "fundsReserve", JsonObject.class), -1));
        JsonArray relatedArray = JsonSupport.getJsonArray(jsonObject, "related");
        if (relatedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArray) {
                builder.related(parseExplanationOfBenefitRelated("related", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.prescription(parseReference("prescription", JsonSupport.getJsonValue(jsonObject, "prescription", JsonObject.class), -1));
        builder.originalPrescription(parseReference("originalPrescription", JsonSupport.getJsonValue(jsonObject, "originalPrescription", JsonObject.class), -1));
        builder.payee(parseExplanationOfBenefitPayee("payee", JsonSupport.getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.referral(parseReference("referral", JsonSupport.getJsonValue(jsonObject, "referral", JsonObject.class), -1));
        builder.facility(parseReference("facility", JsonSupport.getJsonValue(jsonObject, "facility", JsonObject.class), -1));
        builder.claim(parseReference("claim", JsonSupport.getJsonValue(jsonObject, "claim", JsonObject.class), -1));
        builder.claimResponse(parseReference("claimResponse", JsonSupport.getJsonValue(jsonObject, "claimResponse", JsonObject.class), -1));
        builder.disposition(parseString("disposition", JsonSupport.getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        JsonArray preAuthRefArray = JsonSupport.getJsonArray(jsonObject, "preAuthRef", true);
        if (preAuthRefArray != null) {
            int index = 0;
            JsonArray _preAuthRefArray = jsonObject.getJsonArray("_preAuthRef");
            for (JsonValue jsonValue : preAuthRefArray) {
                builder.preAuthRef(parseString("preAuthRef", jsonValue, JsonSupport.getJsonValue(_preAuthRefArray, index), index));
                index++;
            }
        }
        JsonArray preAuthRefPeriodArray = JsonSupport.getJsonArray(jsonObject, "preAuthRefPeriod");
        if (preAuthRefPeriodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : preAuthRefPeriodArray) {
                builder.preAuthRefPeriod(parsePeriod("preAuthRefPeriod", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray careTeamArray = JsonSupport.getJsonArray(jsonObject, "careTeam");
        if (careTeamArray != null) {
            int index = 0;
            for (JsonValue jsonValue : careTeamArray) {
                builder.careTeam(parseExplanationOfBenefitCareTeam("careTeam", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseExplanationOfBenefitSupportingInfo("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray diagnosisArray = JsonSupport.getJsonArray(jsonObject, "diagnosis");
        if (diagnosisArray != null) {
            int index = 0;
            for (JsonValue jsonValue : diagnosisArray) {
                builder.diagnosis(parseExplanationOfBenefitDiagnosis("diagnosis", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray procedureArray = JsonSupport.getJsonArray(jsonObject, "procedure");
        if (procedureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : procedureArray) {
                builder.procedure(parseExplanationOfBenefitProcedure("procedure", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.precedence((PositiveInt) parseInteger(PositiveInt.builder(), "precedence", JsonSupport.getJsonValue(jsonObject, "precedence", JsonNumber.class), jsonObject.get("_precedence"), -1));
        builder.accident(parseExplanationOfBenefitAccident("accident", JsonSupport.getJsonValue(jsonObject, "accident", JsonObject.class), -1));
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseExplanationOfBenefitItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray addItemArray = JsonSupport.getJsonArray(jsonObject, "addItem");
        if (addItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addItemArray) {
                builder.addItem(parseExplanationOfBenefitAddItem("addItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray totalArray = JsonSupport.getJsonArray(jsonObject, "total");
        if (totalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : totalArray) {
                builder.total(parseExplanationOfBenefitTotal("total", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.payment(parseExplanationOfBenefitPayment("payment", JsonSupport.getJsonValue(jsonObject, "payment", JsonObject.class), -1));
        builder.formCode(parseCodeableConcept("formCode", JsonSupport.getJsonValue(jsonObject, "formCode", JsonObject.class), -1));
        builder.form(parseAttachment("form", JsonSupport.getJsonValue(jsonObject, "form", JsonObject.class), -1));
        JsonArray processNoteArray = JsonSupport.getJsonArray(jsonObject, "processNote");
        if (processNoteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processNoteArray) {
                builder.processNote(parseExplanationOfBenefitProcessNote("processNote", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.benefitPeriod(parsePeriod("benefitPeriod", JsonSupport.getJsonValue(jsonObject, "benefitPeriod", JsonObject.class), -1));
        JsonArray benefitBalanceArray = JsonSupport.getJsonArray(jsonObject, "benefitBalance");
        if (benefitBalanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : benefitBalanceArray) {
                builder.benefitBalance(parseExplanationOfBenefitBenefitBalance("benefitBalance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Accident parseExplanationOfBenefitAccident(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Accident", jsonObject);
        ExplanationOfBenefit.Accident.Builder builder = ExplanationOfBenefit.Accident.builder();
        parseBackboneElement(builder, jsonObject);
        builder.date(parseDate("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.location(parseChoiceElement("location", jsonObject, "Address", "Reference"));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.AddItem parseExplanationOfBenefitAddItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.AddItem", jsonObject);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        ExplanationOfBenefit.AddItem.Builder builder = ExplanationOfBenefit.AddItem.builder(productOrService);
        parseBackboneElement(builder, jsonObject);
        JsonArray itemSequenceArray = JsonSupport.getJsonArray(jsonObject, "itemSequence", true);
        if (itemSequenceArray != null) {
            int index = 0;
            JsonArray _itemSequenceArray = jsonObject.getJsonArray("_itemSequence");
            for (JsonValue jsonValue : itemSequenceArray) {
                builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", jsonValue, JsonSupport.getJsonValue(_itemSequenceArray, index), index));
                index++;
            }
        }
        JsonArray detailSequenceArray = JsonSupport.getJsonArray(jsonObject, "detailSequence", true);
        if (detailSequenceArray != null) {
            int index = 0;
            JsonArray _detailSequenceArray = jsonObject.getJsonArray("_detailSequence");
            for (JsonValue jsonValue : detailSequenceArray) {
                builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", jsonValue, JsonSupport.getJsonValue(_detailSequenceArray, index), index));
                index++;
            }
        }
        JsonArray subDetailSequenceArray = JsonSupport.getJsonArray(jsonObject, "subDetailSequence", true);
        if (subDetailSequenceArray != null) {
            int index = 0;
            JsonArray _subDetailSequenceArray = jsonObject.getJsonArray("_subDetailSequence");
            for (JsonValue jsonValue : subDetailSequenceArray) {
                builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", jsonValue, JsonSupport.getJsonValue(_subDetailSequenceArray, index), index));
                index++;
            }
        }
        JsonArray providerArray = JsonSupport.getJsonArray(jsonObject, "provider");
        if (providerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : providerArray) {
                builder.provider(parseReference("provider", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, "Date", "Period"));
        builder.location(parseChoiceElement("location", jsonObject, "CodeableConcept", "Address", "Reference"));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = JsonSupport.getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subSiteArray) {
                builder.subSite(parseCodeableConcept("subSite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseExplanationOfBenefitAddItemDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.AddItem.Detail parseExplanationOfBenefitAddItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.AddItem.Detail", jsonObject);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        ExplanationOfBenefit.AddItem.Detail.Builder builder = ExplanationOfBenefit.AddItem.Detail.builder(productOrService);
        parseBackboneElement(builder, jsonObject);
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray subDetailArray = JsonSupport.getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subDetailArray) {
                builder.subDetail(parseExplanationOfBenefitAddItemDetailSubDetail("subDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.AddItem.Detail.SubDetail parseExplanationOfBenefitAddItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.AddItem.Detail.SubDetail", jsonObject);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        ExplanationOfBenefit.AddItem.Detail.SubDetail.Builder builder = ExplanationOfBenefit.AddItem.Detail.SubDetail.builder(productOrService);
        parseBackboneElement(builder, jsonObject);
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.BenefitBalance parseExplanationOfBenefitBenefitBalance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.BenefitBalance", jsonObject);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        ExplanationOfBenefit.BenefitBalance.Builder builder = ExplanationOfBenefit.BenefitBalance.builder(category);
        parseBackboneElement(builder, jsonObject);
        builder.excluded(parseBoolean("excluded", JsonSupport.getJsonValue(jsonObject, "excluded", JsonValue.class), jsonObject.get("_excluded"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.network(parseCodeableConcept("network", JsonSupport.getJsonValue(jsonObject, "network", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", JsonSupport.getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.term(parseCodeableConcept("term", JsonSupport.getJsonValue(jsonObject, "term", JsonObject.class), -1));
        JsonArray financialArray = JsonSupport.getJsonArray(jsonObject, "financial");
        if (financialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : financialArray) {
                builder.financial(parseExplanationOfBenefitBenefitBalanceFinancial("financial", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.BenefitBalance.Financial parseExplanationOfBenefitBenefitBalanceFinancial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.BenefitBalance.Financial", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        ExplanationOfBenefit.BenefitBalance.Financial.Builder builder = ExplanationOfBenefit.BenefitBalance.Financial.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.allowed(parseChoiceElement("allowed", jsonObject, "UnsignedInt", "String", "Money"));
        builder.used(parseChoiceElement("used", jsonObject, "UnsignedInt", "Money"));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.CareTeam parseExplanationOfBenefitCareTeam(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.CareTeam", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Reference provider = parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1);
        ExplanationOfBenefit.CareTeam.Builder builder = ExplanationOfBenefit.CareTeam.builder(sequence, provider);
        parseBackboneElement(builder, jsonObject);
        builder.responsible(parseBoolean("responsible", JsonSupport.getJsonValue(jsonObject, "responsible", JsonValue.class), jsonObject.get("_responsible"), -1));
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.qualification(parseCodeableConcept("qualification", JsonSupport.getJsonValue(jsonObject, "qualification", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Diagnosis parseExplanationOfBenefitDiagnosis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Diagnosis", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Element diagnosis = parseChoiceElement("diagnosis", jsonObject, "CodeableConcept", "Reference");
        ExplanationOfBenefit.Diagnosis.Builder builder = ExplanationOfBenefit.Diagnosis.builder(sequence, diagnosis);
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.onAdmission(parseCodeableConcept("onAdmission", JsonSupport.getJsonValue(jsonObject, "onAdmission", JsonObject.class), -1));
        builder.packageCode(parseCodeableConcept("packageCode", JsonSupport.getJsonValue(jsonObject, "packageCode", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Insurance parseExplanationOfBenefitInsurance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Insurance", jsonObject);
        Boolean focal = parseBoolean("focal", JsonSupport.getJsonValue(jsonObject, "focal", JsonValue.class), jsonObject.get("_focal"), -1);
        Reference coverage = parseReference("coverage", JsonSupport.getJsonValue(jsonObject, "coverage", JsonObject.class), -1);
        ExplanationOfBenefit.Insurance.Builder builder = ExplanationOfBenefit.Insurance.builder(focal, coverage);
        parseBackboneElement(builder, jsonObject);
        JsonArray preAuthRefArray = JsonSupport.getJsonArray(jsonObject, "preAuthRef", true);
        if (preAuthRefArray != null) {
            int index = 0;
            JsonArray _preAuthRefArray = jsonObject.getJsonArray("_preAuthRef");
            for (JsonValue jsonValue : preAuthRefArray) {
                builder.preAuthRef(parseString("preAuthRef", jsonValue, JsonSupport.getJsonValue(_preAuthRefArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Item parseExplanationOfBenefitItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Item", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        ExplanationOfBenefit.Item.Builder builder = ExplanationOfBenefit.Item.builder(sequence, productOrService);
        parseBackboneElement(builder, jsonObject);
        JsonArray careTeamSequenceArray = JsonSupport.getJsonArray(jsonObject, "careTeamSequence", true);
        if (careTeamSequenceArray != null) {
            int index = 0;
            JsonArray _careTeamSequenceArray = jsonObject.getJsonArray("_careTeamSequence");
            for (JsonValue jsonValue : careTeamSequenceArray) {
                builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", jsonValue, JsonSupport.getJsonValue(_careTeamSequenceArray, index), index));
                index++;
            }
        }
        JsonArray diagnosisSequenceArray = JsonSupport.getJsonArray(jsonObject, "diagnosisSequence", true);
        if (diagnosisSequenceArray != null) {
            int index = 0;
            JsonArray _diagnosisSequenceArray = jsonObject.getJsonArray("_diagnosisSequence");
            for (JsonValue jsonValue : diagnosisSequenceArray) {
                builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", jsonValue, JsonSupport.getJsonValue(_diagnosisSequenceArray, index), index));
                index++;
            }
        }
        JsonArray procedureSequenceArray = JsonSupport.getJsonArray(jsonObject, "procedureSequence", true);
        if (procedureSequenceArray != null) {
            int index = 0;
            JsonArray _procedureSequenceArray = jsonObject.getJsonArray("_procedureSequence");
            for (JsonValue jsonValue : procedureSequenceArray) {
                builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", jsonValue, JsonSupport.getJsonValue(_procedureSequenceArray, index), index));
                index++;
            }
        }
        JsonArray informationSequenceArray = JsonSupport.getJsonArray(jsonObject, "informationSequence", true);
        if (informationSequenceArray != null) {
            int index = 0;
            JsonArray _informationSequenceArray = jsonObject.getJsonArray("_informationSequence");
            for (JsonValue jsonValue : informationSequenceArray) {
                builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", jsonValue, JsonSupport.getJsonValue(_informationSequenceArray, index), index));
                index++;
            }
        }
        builder.revenue(parseCodeableConcept("revenue", JsonSupport.getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.serviced(parseChoiceElement("serviced", jsonObject, "Date", "Period"));
        builder.location(parseChoiceElement("location", jsonObject, "CodeableConcept", "Address", "Reference"));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        JsonArray subSiteArray = JsonSupport.getJsonArray(jsonObject, "subSite");
        if (subSiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subSiteArray) {
                builder.subSite(parseCodeableConcept("subSite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray encounterArray = JsonSupport.getJsonArray(jsonObject, "encounter");
        if (encounterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : encounterArray) {
                builder.encounter(parseReference("encounter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parseExplanationOfBenefitItemDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Item.Adjudication parseExplanationOfBenefitItemAdjudication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Item.Adjudication", jsonObject);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        ExplanationOfBenefit.Item.Adjudication.Builder builder = ExplanationOfBenefit.Item.Adjudication.builder(category);
        parseBackboneElement(builder, jsonObject);
        builder.reason(parseCodeableConcept("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        builder.amount(parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.value(parseDecimal("value", JsonSupport.getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Item.Detail parseExplanationOfBenefitItemDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Item.Detail", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        ExplanationOfBenefit.Item.Detail.Builder builder = ExplanationOfBenefit.Item.Detail.builder(sequence, productOrService);
        parseBackboneElement(builder, jsonObject);
        builder.revenue(parseCodeableConcept("revenue", JsonSupport.getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray subDetailArray = JsonSupport.getJsonArray(jsonObject, "subDetail");
        if (subDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subDetailArray) {
                builder.subDetail(parseExplanationOfBenefitItemDetailSubDetail("subDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Item.Detail.SubDetail parseExplanationOfBenefitItemDetailSubDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Item.Detail.SubDetail", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept productOrService = parseCodeableConcept("productOrService", JsonSupport.getJsonValue(jsonObject, "productOrService", JsonObject.class), -1);
        ExplanationOfBenefit.Item.Detail.SubDetail.Builder builder = ExplanationOfBenefit.Item.Detail.SubDetail.builder(sequence, productOrService);
        parseBackboneElement(builder, jsonObject);
        builder.revenue(parseCodeableConcept("revenue", JsonSupport.getJsonValue(jsonObject, "revenue", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier");
        if (modifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier(parseCodeableConcept("modifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programCodeArray = JsonSupport.getJsonArray(jsonObject, "programCode");
        if (programCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programCodeArray) {
                builder.programCode(parseCodeableConcept("programCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.unitPrice(parseMoney("unitPrice", JsonSupport.getJsonValue(jsonObject, "unitPrice", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.net(parseMoney("net", JsonSupport.getJsonValue(jsonObject, "net", JsonObject.class), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteNumberArray = JsonSupport.getJsonArray(jsonObject, "noteNumber", true);
        if (noteNumberArray != null) {
            int index = 0;
            JsonArray _noteNumberArray = jsonObject.getJsonArray("_noteNumber");
            for (JsonValue jsonValue : noteNumberArray) {
                builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", jsonValue, JsonSupport.getJsonValue(_noteNumberArray, index), index));
                index++;
            }
        }
        JsonArray adjudicationArray = JsonSupport.getJsonArray(jsonObject, "adjudication");
        if (adjudicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : adjudicationArray) {
                builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Payee parseExplanationOfBenefitPayee(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Payee", jsonObject);
        ExplanationOfBenefit.Payee.Builder builder = ExplanationOfBenefit.Payee.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.party(parseReference("party", JsonSupport.getJsonValue(jsonObject, "party", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Payment parseExplanationOfBenefitPayment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Payment", jsonObject);
        ExplanationOfBenefit.Payment.Builder builder = ExplanationOfBenefit.Payment.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.adjustment(parseMoney("adjustment", JsonSupport.getJsonValue(jsonObject, "adjustment", JsonObject.class), -1));
        builder.adjustmentReason(parseCodeableConcept("adjustmentReason", JsonSupport.getJsonValue(jsonObject, "adjustmentReason", JsonObject.class), -1));
        builder.date(parseDate("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.amount(parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Procedure parseExplanationOfBenefitProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Procedure", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        Element procedure = parseChoiceElement("procedure", jsonObject, "CodeableConcept", "Reference");
        ExplanationOfBenefit.Procedure.Builder builder = ExplanationOfBenefit.Procedure.builder(sequence, procedure);
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray udiArray = JsonSupport.getJsonArray(jsonObject, "udi");
        if (udiArray != null) {
            int index = 0;
            for (JsonValue jsonValue : udiArray) {
                builder.udi(parseReference("udi", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.ProcessNote parseExplanationOfBenefitProcessNote(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.ProcessNote", jsonObject);
        ExplanationOfBenefit.ProcessNote.Builder builder = ExplanationOfBenefit.ProcessNote.builder();
        parseBackboneElement(builder, jsonObject);
        builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", JsonSupport.getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.type((NoteType) parseString(NoteType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.language(parseCodeableConcept("language", JsonSupport.getJsonValue(jsonObject, "language", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Related parseExplanationOfBenefitRelated(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Related", jsonObject);
        ExplanationOfBenefit.Related.Builder builder = ExplanationOfBenefit.Related.builder();
        parseBackboneElement(builder, jsonObject);
        builder.claim(parseReference("claim", JsonSupport.getJsonValue(jsonObject, "claim", JsonObject.class), -1));
        builder.relationship(parseCodeableConcept("relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.reference(parseIdentifier("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.SupportingInfo parseExplanationOfBenefitSupportingInfo(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.SupportingInfo", jsonObject);
        PositiveInt sequence = (PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        ExplanationOfBenefit.SupportingInfo.Builder builder = ExplanationOfBenefit.SupportingInfo.builder(sequence, category);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, "Date", "Period"));
        builder.value(parseChoiceElement("value", jsonObject, "Boolean", "String", "Quantity", "Attachment", "Reference"));
        builder.reason(parseCoding("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ExplanationOfBenefit.Total parseExplanationOfBenefitTotal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ExplanationOfBenefit.Total", jsonObject);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        Money amount = parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1);
        ExplanationOfBenefit.Total.Builder builder = ExplanationOfBenefit.Total.builder(category, amount);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Expression parseExpression(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Expression", jsonObject);
        Code language = (Code) parseString(Code.builder(), "language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1);
        Expression.Builder builder = Expression.builder(language);
        parseElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.name((Id) parseString(Id.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.reference(parseUri("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        stackPop();
        return builder.build();
    }

    protected Extension parseExtension(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Extension", jsonObject);
        java.lang.String url = parseJavaString("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), -1);
        Extension.Builder builder = Extension.builder(url);
        parseElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage"));
        stackPop();
        return builder.build();
    }

    protected FamilyMemberHistory parseFamilyMemberHistory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("FamilyMemberHistory", jsonObject);
        FamilyHistoryStatus status = (FamilyHistoryStatus) parseString(FamilyHistoryStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        CodeableConcept relationship = parseCodeableConcept("relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonObject.class), -1);
        FamilyMemberHistory.Builder builder = FamilyMemberHistory.builder(status, patient, relationship);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", JsonSupport.getJsonValue(jsonObject, "dataAbsentReason", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.sex(parseCodeableConcept("sex", JsonSupport.getJsonValue(jsonObject, "sex", JsonObject.class), -1));
        builder.born(parseChoiceElement("born", jsonObject, "Period", "Date", "String"));
        builder.age(parseChoiceElement("age", jsonObject, "Age", "Range", "String"));
        builder.estimatedAge(parseBoolean("estimatedAge", JsonSupport.getJsonValue(jsonObject, "estimatedAge", JsonValue.class), jsonObject.get("_estimatedAge"), -1));
        builder.deceased(parseChoiceElement("deceased", jsonObject, "Boolean", "Age", "Range", "Date", "String"));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conditionArray = JsonSupport.getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conditionArray) {
                builder.condition(parseFamilyMemberHistoryCondition("condition", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected FamilyMemberHistory.Condition parseFamilyMemberHistoryCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("FamilyMemberHistory.Condition", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        FamilyMemberHistory.Condition.Builder builder = FamilyMemberHistory.Condition.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.outcome(parseCodeableConcept("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.contributedToDeath(parseBoolean("contributedToDeath", JsonSupport.getJsonValue(jsonObject, "contributedToDeath", JsonValue.class), jsonObject.get("_contributedToDeath"), -1));
        builder.onset(parseChoiceElement("onset", jsonObject, "Age", "Range", "Period", "String"));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Flag parseFlag(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Flag", jsonObject);
        FlagStatus status = (FlagStatus) parseString(FlagStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        Flag.Builder builder = Flag.builder(status, code, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Goal parseGoal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Goal", jsonObject);
        GoalLifecycleStatus lifecycleStatus = (GoalLifecycleStatus) parseString(GoalLifecycleStatus.builder(), "lifecycleStatus", JsonSupport.getJsonValue(jsonObject, "lifecycleStatus", JsonString.class), jsonObject.get("_lifecycleStatus"), -1);
        CodeableConcept description = parseCodeableConcept("description", JsonSupport.getJsonValue(jsonObject, "description", JsonObject.class), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        Goal.Builder builder = Goal.builder(lifecycleStatus, description, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.achievementStatus(parseCodeableConcept("achievementStatus", JsonSupport.getJsonValue(jsonObject, "achievementStatus", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority(parseCodeableConcept("priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.start(parseChoiceElement("start", jsonObject, "Date", "CodeableConcept"));
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parseGoalTarget("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusDate(parseDate("statusDate", JsonSupport.getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.statusReason(parseString("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonString.class), jsonObject.get("_statusReason"), -1));
        builder.expressedBy(parseReference("expressedBy", JsonSupport.getJsonValue(jsonObject, "expressedBy", JsonObject.class), -1));
        JsonArray addressesArray = JsonSupport.getJsonArray(jsonObject, "addresses");
        if (addressesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressesArray) {
                builder.addresses(parseReference("addresses", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray outcomeCodeArray = JsonSupport.getJsonArray(jsonObject, "outcomeCode");
        if (outcomeCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outcomeCodeArray) {
                builder.outcomeCode(parseCodeableConcept("outcomeCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray outcomeReferenceArray = JsonSupport.getJsonArray(jsonObject, "outcomeReference");
        if (outcomeReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outcomeReferenceArray) {
                builder.outcomeReference(parseReference("outcomeReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Goal.Target parseGoalTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Goal.Target", jsonObject);
        Goal.Target.Builder builder = Goal.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.measure(parseCodeableConcept("measure", JsonSupport.getJsonValue(jsonObject, "measure", JsonObject.class), -1));
        builder.detail(parseChoiceElement("detail", jsonObject, "Quantity", "Range", "CodeableConcept", "String", "Boolean", "Integer", "Ratio"));
        builder.due(parseChoiceElement("due", jsonObject, "Date", "Duration"));
        stackPop();
        return builder.build();
    }

    protected GraphDefinition parseGraphDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("GraphDefinition", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ResourceType start = (ResourceType) parseString(ResourceType.builder(), "start", JsonSupport.getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1);
        GraphDefinition.Builder builder = GraphDefinition.builder(name, status, start);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parseGraphDefinitionLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected GraphDefinition.Link parseGraphDefinitionLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("GraphDefinition.Link", jsonObject);
        GraphDefinition.Link.Builder builder = GraphDefinition.Link.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.sliceName(parseString("sliceName", JsonSupport.getJsonValue(jsonObject, "sliceName", JsonString.class), jsonObject.get("_sliceName"), -1));
        builder.min(parseInteger("min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parseGraphDefinitionLinkTarget("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected GraphDefinition.Link.Target parseGraphDefinitionLinkTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("GraphDefinition.Link.Target", jsonObject);
        ResourceType type = (ResourceType) parseString(ResourceType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        GraphDefinition.Link.Target.Builder builder = GraphDefinition.Link.Target.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.params(parseString("params", JsonSupport.getJsonValue(jsonObject, "params", JsonString.class), jsonObject.get("_params"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        JsonArray compartmentArray = JsonSupport.getJsonArray(jsonObject, "compartment");
        if (compartmentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : compartmentArray) {
                builder.compartment(parseGraphDefinitionLinkTargetCompartment("compartment", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parseGraphDefinitionLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected GraphDefinition.Link.Target.Compartment parseGraphDefinitionLinkTargetCompartment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("GraphDefinition.Link.Target.Compartment", jsonObject);
        GraphCompartmentUse use = (GraphCompartmentUse) parseString(GraphCompartmentUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1);
        CompartmentCode code = (CompartmentCode) parseString(CompartmentCode.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        GraphCompartmentRule rule = (GraphCompartmentRule) parseString(GraphCompartmentRule.builder(), "rule", JsonSupport.getJsonValue(jsonObject, "rule", JsonString.class), jsonObject.get("_rule"), -1);
        GraphDefinition.Link.Target.Compartment.Builder builder = GraphDefinition.Link.Target.Compartment.builder(use, code, rule);
        parseBackboneElement(builder, jsonObject);
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected Group parseGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Group", jsonObject);
        GroupType type = (GroupType) parseString(GroupType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Boolean actual = parseBoolean("actual", JsonSupport.getJsonValue(jsonObject, "actual", JsonValue.class), jsonObject.get("_actual"), -1);
        Group.Builder builder = Group.builder(type, actual);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.quantity((UnsignedInt) parseInteger(UnsignedInt.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonNumber.class), jsonObject.get("_quantity"), -1));
        builder.managingEntity(parseReference("managingEntity", JsonSupport.getJsonValue(jsonObject, "managingEntity", JsonObject.class), -1));
        JsonArray characteristicArray = JsonSupport.getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : characteristicArray) {
                builder.characteristic(parseGroupCharacteristic("characteristic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray memberArray = JsonSupport.getJsonArray(jsonObject, "member");
        if (memberArray != null) {
            int index = 0;
            for (JsonValue jsonValue : memberArray) {
                builder.member(parseGroupMember("member", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Group.Characteristic parseGroupCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Group.Characteristic", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Element value = parseChoiceElement("value", jsonObject, "CodeableConcept", "Boolean", "Quantity", "Range", "Reference");
        Boolean exclude = parseBoolean("exclude", JsonSupport.getJsonValue(jsonObject, "exclude", JsonValue.class), jsonObject.get("_exclude"), -1);
        Group.Characteristic.Builder builder = Group.Characteristic.builder(code, value, exclude);
        parseBackboneElement(builder, jsonObject);
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Group.Member parseGroupMember(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Group.Member", jsonObject);
        Reference entity = parseReference("entity", JsonSupport.getJsonValue(jsonObject, "entity", JsonObject.class), -1);
        Group.Member.Builder builder = Group.Member.builder(entity);
        parseBackboneElement(builder, jsonObject);
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.inactive(parseBoolean("inactive", JsonSupport.getJsonValue(jsonObject, "inactive", JsonValue.class), jsonObject.get("_inactive"), -1));
        stackPop();
        return builder.build();
    }

    protected GuidanceResponse parseGuidanceResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("GuidanceResponse", jsonObject);
        Element module = parseChoiceElement("module", jsonObject, "Uri", "Canonical", "CodeableConcept");
        GuidanceResponseStatus status = (GuidanceResponseStatus) parseString(GuidanceResponseStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        GuidanceResponse.Builder builder = GuidanceResponse.builder(module, status);
        parseDomainResource(builder, jsonObject);
        builder.requestIdentifier(parseIdentifier("requestIdentifier", JsonSupport.getJsonValue(jsonObject, "requestIdentifier", JsonObject.class), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrenceDateTime(parseDateTime("occurrenceDateTime", JsonSupport.getJsonValue(jsonObject, "occurrenceDateTime", JsonString.class), jsonObject.get("_occurrenceDateTime"), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray evaluationMessageArray = JsonSupport.getJsonArray(jsonObject, "evaluationMessage");
        if (evaluationMessageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : evaluationMessageArray) {
                builder.evaluationMessage(parseReference("evaluationMessage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.outputParameters(parseReference("outputParameters", JsonSupport.getJsonValue(jsonObject, "outputParameters", JsonObject.class), -1));
        builder.result(parseReference("result", JsonSupport.getJsonValue(jsonObject, "result", JsonObject.class), -1));
        JsonArray dataRequirementArray = JsonSupport.getJsonArray(jsonObject, "dataRequirement");
        if (dataRequirementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dataRequirementArray) {
                builder.dataRequirement(parseDataRequirement("dataRequirement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected HealthcareService parseHealthcareService(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("HealthcareService", jsonObject);
        HealthcareService.Builder builder = HealthcareService.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.providedBy(parseReference("providedBy", JsonSupport.getJsonValue(jsonObject, "providedBy", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialtyArray = JsonSupport.getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialtyArray) {
                builder.specialty(parseCodeableConcept("specialty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray locationArray = JsonSupport.getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationArray) {
                builder.location(parseReference("location", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.extraDetails((Markdown) parseString(Markdown.builder(), "extraDetails", JsonSupport.getJsonValue(jsonObject, "extraDetails", JsonString.class), jsonObject.get("_extraDetails"), -1));
        builder.photo(parseAttachment("photo", JsonSupport.getJsonValue(jsonObject, "photo", JsonObject.class), -1));
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray coverageAreaArray = JsonSupport.getJsonArray(jsonObject, "coverageArea");
        if (coverageAreaArray != null) {
            int index = 0;
            for (JsonValue jsonValue : coverageAreaArray) {
                builder.coverageArea(parseReference("coverageArea", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray serviceProvisionCodeArray = JsonSupport.getJsonArray(jsonObject, "serviceProvisionCode");
        if (serviceProvisionCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceProvisionCodeArray) {
                builder.serviceProvisionCode(parseCodeableConcept("serviceProvisionCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray eligibilityArray = JsonSupport.getJsonArray(jsonObject, "eligibility");
        if (eligibilityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : eligibilityArray) {
                builder.eligibility(parseHealthcareServiceEligibility("eligibility", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programArray = JsonSupport.getJsonArray(jsonObject, "program");
        if (programArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programArray) {
                builder.program(parseCodeableConcept("program", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray characteristicArray = JsonSupport.getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : characteristicArray) {
                builder.characteristic(parseCodeableConcept("characteristic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray communicationArray = JsonSupport.getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : communicationArray) {
                builder.communication(parseCodeableConcept("communication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray referralMethodArray = JsonSupport.getJsonArray(jsonObject, "referralMethod");
        if (referralMethodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referralMethodArray) {
                builder.referralMethod(parseCodeableConcept("referralMethod", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.appointmentRequired(parseBoolean("appointmentRequired", JsonSupport.getJsonValue(jsonObject, "appointmentRequired", JsonValue.class), jsonObject.get("_appointmentRequired"), -1));
        JsonArray availableTimeArray = JsonSupport.getJsonArray(jsonObject, "availableTime");
        if (availableTimeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : availableTimeArray) {
                builder.availableTime(parseHealthcareServiceAvailableTime("availableTime", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray notAvailableArray = JsonSupport.getJsonArray(jsonObject, "notAvailable");
        if (notAvailableArray != null) {
            int index = 0;
            for (JsonValue jsonValue : notAvailableArray) {
                builder.notAvailable(parseHealthcareServiceNotAvailable("notAvailable", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", JsonSupport.getJsonValue(jsonObject, "availabilityExceptions", JsonString.class), jsonObject.get("_availabilityExceptions"), -1));
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected HealthcareService.AvailableTime parseHealthcareServiceAvailableTime(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("HealthcareService.AvailableTime", jsonObject);
        HealthcareService.AvailableTime.Builder builder = HealthcareService.AvailableTime.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray daysOfWeekArray = JsonSupport.getJsonArray(jsonObject, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            int index = 0;
            JsonArray _daysOfWeekArray = jsonObject.getJsonArray("_daysOfWeek");
            for (JsonValue jsonValue : daysOfWeekArray) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", jsonValue, JsonSupport.getJsonValue(_daysOfWeekArray, index), index));
                index++;
            }
        }
        builder.allDay(parseBoolean("allDay", JsonSupport.getJsonValue(jsonObject, "allDay", JsonValue.class), jsonObject.get("_allDay"), -1));
        builder.availableStartTime(parseTime("availableStartTime", JsonSupport.getJsonValue(jsonObject, "availableStartTime", JsonString.class), jsonObject.get("_availableStartTime"), -1));
        builder.availableEndTime(parseTime("availableEndTime", JsonSupport.getJsonValue(jsonObject, "availableEndTime", JsonString.class), jsonObject.get("_availableEndTime"), -1));
        stackPop();
        return builder.build();
    }

    protected HealthcareService.Eligibility parseHealthcareServiceEligibility(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("HealthcareService.Eligibility", jsonObject);
        HealthcareService.Eligibility.Builder builder = HealthcareService.Eligibility.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected HealthcareService.NotAvailable parseHealthcareServiceNotAvailable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("HealthcareService.NotAvailable", jsonObject);
        String description = parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1);
        HealthcareService.NotAvailable.Builder builder = HealthcareService.NotAvailable.builder(description);
        parseBackboneElement(builder, jsonObject);
        builder.during(parsePeriod("during", JsonSupport.getJsonValue(jsonObject, "during", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected HumanName parseHumanName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("HumanName", jsonObject);
        HumanName.Builder builder = HumanName.builder();
        parseElement(builder, jsonObject);
        builder.use((NameUse) parseString(NameUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.family(parseString("family", JsonSupport.getJsonValue(jsonObject, "family", JsonString.class), jsonObject.get("_family"), -1));
        JsonArray givenArray = JsonSupport.getJsonArray(jsonObject, "given", true);
        if (givenArray != null) {
            int index = 0;
            JsonArray _givenArray = jsonObject.getJsonArray("_given");
            for (JsonValue jsonValue : givenArray) {
                builder.given(parseString("given", jsonValue, JsonSupport.getJsonValue(_givenArray, index), index));
                index++;
            }
        }
        JsonArray prefixArray = JsonSupport.getJsonArray(jsonObject, "prefix", true);
        if (prefixArray != null) {
            int index = 0;
            JsonArray _prefixArray = jsonObject.getJsonArray("_prefix");
            for (JsonValue jsonValue : prefixArray) {
                builder.prefix(parseString("prefix", jsonValue, JsonSupport.getJsonValue(_prefixArray, index), index));
                index++;
            }
        }
        JsonArray suffixArray = JsonSupport.getJsonArray(jsonObject, "suffix", true);
        if (suffixArray != null) {
            int index = 0;
            JsonArray _suffixArray = jsonObject.getJsonArray("_suffix");
            for (JsonValue jsonValue : suffixArray) {
                builder.suffix(parseString("suffix", jsonValue, JsonSupport.getJsonValue(_suffixArray, index), index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Identifier parseIdentifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Identifier", jsonObject);
        Identifier.Builder builder = Identifier.builder();
        parseElement(builder, jsonObject);
        builder.use((IdentifierUse) parseString(IdentifierUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.system(parseUri("system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.value(parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.assigner(parseReference("assigner", JsonSupport.getJsonValue(jsonObject, "assigner", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ImagingStudy parseImagingStudy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImagingStudy", jsonObject);
        ImagingStudyStatus status = (ImagingStudyStatus) parseString(ImagingStudyStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        ImagingStudy.Builder builder = ImagingStudy.builder(status, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray modalityArray = JsonSupport.getJsonArray(jsonObject, "modality");
        if (modalityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : modalityArray) {
                builder.modality(parseCoding("modality", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.started(parseDateTime("started", JsonSupport.getJsonValue(jsonObject, "started", JsonString.class), jsonObject.get("_started"), -1));
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.referrer(parseReference("referrer", JsonSupport.getJsonValue(jsonObject, "referrer", JsonObject.class), -1));
        JsonArray interpreterArray = JsonSupport.getJsonArray(jsonObject, "interpreter");
        if (interpreterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : interpreterArray) {
                builder.interpreter(parseReference("interpreter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.numberOfSeries((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfSeries", JsonSupport.getJsonValue(jsonObject, "numberOfSeries", JsonNumber.class), jsonObject.get("_numberOfSeries"), -1));
        builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", JsonSupport.getJsonValue(jsonObject, "numberOfInstances", JsonNumber.class), jsonObject.get("_numberOfInstances"), -1));
        builder.procedureReference(parseReference("procedureReference", JsonSupport.getJsonValue(jsonObject, "procedureReference", JsonObject.class), -1));
        JsonArray procedureCodeArray = JsonSupport.getJsonArray(jsonObject, "procedureCode");
        if (procedureCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : procedureCodeArray) {
                builder.procedureCode(parseCodeableConcept("procedureCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray seriesArray = JsonSupport.getJsonArray(jsonObject, "series");
        if (seriesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : seriesArray) {
                builder.series(parseImagingStudySeries("series", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImagingStudy.Series parseImagingStudySeries(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImagingStudy.Series", jsonObject);
        Id uid = (Id) parseString(Id.builder(), "uid", JsonSupport.getJsonValue(jsonObject, "uid", JsonString.class), jsonObject.get("_uid"), -1);
        Coding modality = parseCoding("modality", JsonSupport.getJsonValue(jsonObject, "modality", JsonObject.class), -1);
        ImagingStudy.Series.Builder builder = ImagingStudy.Series.builder(uid, modality);
        parseBackboneElement(builder, jsonObject);
        builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", JsonSupport.getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", JsonSupport.getJsonValue(jsonObject, "numberOfInstances", JsonNumber.class), jsonObject.get("_numberOfInstances"), -1));
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.bodySite(parseCoding("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.laterality(parseCoding("laterality", JsonSupport.getJsonValue(jsonObject, "laterality", JsonObject.class), -1));
        JsonArray specimenArray = JsonSupport.getJsonArray(jsonObject, "specimen");
        if (specimenArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specimenArray) {
                builder.specimen(parseReference("specimen", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.started(parseDateTime("started", JsonSupport.getJsonValue(jsonObject, "started", JsonString.class), jsonObject.get("_started"), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseImagingStudySeriesPerformer("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instanceArray = JsonSupport.getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : instanceArray) {
                builder.instance(parseImagingStudySeriesInstance("instance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImagingStudy.Series.Instance parseImagingStudySeriesInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImagingStudy.Series.Instance", jsonObject);
        Id uid = (Id) parseString(Id.builder(), "uid", JsonSupport.getJsonValue(jsonObject, "uid", JsonString.class), jsonObject.get("_uid"), -1);
        Coding sopClass = parseCoding("sopClass", JsonSupport.getJsonValue(jsonObject, "sopClass", JsonObject.class), -1);
        ImagingStudy.Series.Instance.Builder builder = ImagingStudy.Series.Instance.builder(uid, sopClass);
        parseBackboneElement(builder, jsonObject);
        builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", JsonSupport.getJsonValue(jsonObject, "number", JsonNumber.class), jsonObject.get("_number"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        stackPop();
        return builder.build();
    }

    protected ImagingStudy.Series.Performer parseImagingStudySeriesPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImagingStudy.Series.Performer", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        ImagingStudy.Series.Performer.Builder builder = ImagingStudy.Series.Performer.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", JsonSupport.getJsonValue(jsonObject, "function", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Immunization parseImmunization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Immunization", jsonObject);
        ImmunizationStatus status = (ImmunizationStatus) parseString(ImmunizationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept vaccineCode = parseCodeableConcept("vaccineCode", JsonSupport.getJsonValue(jsonObject, "vaccineCode", JsonObject.class), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        Element occurrence = parseChoiceElement("occurrence", jsonObject, "DateTime", "String");
        Immunization.Builder builder = Immunization.builder(status, vaccineCode, patient, occurrence);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.recorded(parseDateTime("recorded", JsonSupport.getJsonValue(jsonObject, "recorded", JsonString.class), jsonObject.get("_recorded"), -1));
        builder.primarySource(parseBoolean("primarySource", JsonSupport.getJsonValue(jsonObject, "primarySource", JsonValue.class), jsonObject.get("_primarySource"), -1));
        builder.reportOrigin(parseCodeableConcept("reportOrigin", JsonSupport.getJsonValue(jsonObject, "reportOrigin", JsonObject.class), -1));
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.manufacturer(parseReference("manufacturer", JsonSupport.getJsonValue(jsonObject, "manufacturer", JsonObject.class), -1));
        builder.lotNumber(parseString("lotNumber", JsonSupport.getJsonValue(jsonObject, "lotNumber", JsonString.class), jsonObject.get("_lotNumber"), -1));
        builder.expirationDate(parseDate("expirationDate", JsonSupport.getJsonValue(jsonObject, "expirationDate", JsonString.class), jsonObject.get("_expirationDate"), -1));
        builder.site(parseCodeableConcept("site", JsonSupport.getJsonValue(jsonObject, "site", JsonObject.class), -1));
        builder.route(parseCodeableConcept("route", JsonSupport.getJsonValue(jsonObject, "route", JsonObject.class), -1));
        builder.doseQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "doseQuantity", JsonSupport.getJsonValue(jsonObject, "doseQuantity", JsonObject.class), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseImmunizationPerformer("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.isSubpotent(parseBoolean("isSubpotent", JsonSupport.getJsonValue(jsonObject, "isSubpotent", JsonValue.class), jsonObject.get("_isSubpotent"), -1));
        JsonArray subpotentReasonArray = JsonSupport.getJsonArray(jsonObject, "subpotentReason");
        if (subpotentReasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subpotentReasonArray) {
                builder.subpotentReason(parseCodeableConcept("subpotentReason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray educationArray = JsonSupport.getJsonArray(jsonObject, "education");
        if (educationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : educationArray) {
                builder.education(parseImmunizationEducation("education", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray programEligibilityArray = JsonSupport.getJsonArray(jsonObject, "programEligibility");
        if (programEligibilityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : programEligibilityArray) {
                builder.programEligibility(parseCodeableConcept("programEligibility", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.fundingSource(parseCodeableConcept("fundingSource", JsonSupport.getJsonValue(jsonObject, "fundingSource", JsonObject.class), -1));
        JsonArray reactionArray = JsonSupport.getJsonArray(jsonObject, "reaction");
        if (reactionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reactionArray) {
                builder.reaction(parseImmunizationReaction("reaction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray protocolAppliedArray = JsonSupport.getJsonArray(jsonObject, "protocolApplied");
        if (protocolAppliedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : protocolAppliedArray) {
                builder.protocolApplied(parseImmunizationProtocolApplied("protocolApplied", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Immunization.Education parseImmunizationEducation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Immunization.Education", jsonObject);
        Immunization.Education.Builder builder = Immunization.Education.builder();
        parseBackboneElement(builder, jsonObject);
        builder.documentType(parseString("documentType", JsonSupport.getJsonValue(jsonObject, "documentType", JsonString.class), jsonObject.get("_documentType"), -1));
        builder.reference(parseUri("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        builder.publicationDate(parseDateTime("publicationDate", JsonSupport.getJsonValue(jsonObject, "publicationDate", JsonString.class), jsonObject.get("_publicationDate"), -1));
        builder.presentationDate(parseDateTime("presentationDate", JsonSupport.getJsonValue(jsonObject, "presentationDate", JsonString.class), jsonObject.get("_presentationDate"), -1));
        stackPop();
        return builder.build();
    }

    protected Immunization.Performer parseImmunizationPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Immunization.Performer", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        Immunization.Performer.Builder builder = Immunization.Performer.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", JsonSupport.getJsonValue(jsonObject, "function", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Immunization.ProtocolApplied parseImmunizationProtocolApplied(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Immunization.ProtocolApplied", jsonObject);
        Element doseNumber = parseChoiceElement("doseNumber", jsonObject, "PositiveInt", "String");
        Immunization.ProtocolApplied.Builder builder = Immunization.ProtocolApplied.builder(doseNumber);
        parseBackboneElement(builder, jsonObject);
        builder.series(parseString("series", JsonSupport.getJsonValue(jsonObject, "series", JsonString.class), jsonObject.get("_series"), -1));
        builder.authority(parseReference("authority", JsonSupport.getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        JsonArray targetDiseaseArray = JsonSupport.getJsonArray(jsonObject, "targetDisease");
        if (targetDiseaseArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetDiseaseArray) {
                builder.targetDisease(parseCodeableConcept("targetDisease", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonObject, "PositiveInt", "String"));
        stackPop();
        return builder.build();
    }

    protected Immunization.Reaction parseImmunizationReaction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Immunization.Reaction", jsonObject);
        Immunization.Reaction.Builder builder = Immunization.Reaction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.detail(parseReference("detail", JsonSupport.getJsonValue(jsonObject, "detail", JsonObject.class), -1));
        builder.reported(parseBoolean("reported", JsonSupport.getJsonValue(jsonObject, "reported", JsonValue.class), jsonObject.get("_reported"), -1));
        stackPop();
        return builder.build();
    }

    protected ImmunizationEvaluation parseImmunizationEvaluation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImmunizationEvaluation", jsonObject);
        ImmunizationEvaluationStatus status = (ImmunizationEvaluationStatus) parseString(ImmunizationEvaluationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        CodeableConcept targetDisease = parseCodeableConcept("targetDisease", JsonSupport.getJsonValue(jsonObject, "targetDisease", JsonObject.class), -1);
        Reference immunizationEvent = parseReference("immunizationEvent", JsonSupport.getJsonValue(jsonObject, "immunizationEvent", JsonObject.class), -1);
        CodeableConcept doseStatus = parseCodeableConcept("doseStatus", JsonSupport.getJsonValue(jsonObject, "doseStatus", JsonObject.class), -1);
        ImmunizationEvaluation.Builder builder = ImmunizationEvaluation.builder(status, patient, targetDisease, immunizationEvent, doseStatus);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.authority(parseReference("authority", JsonSupport.getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        JsonArray doseStatusReasonArray = JsonSupport.getJsonArray(jsonObject, "doseStatusReason");
        if (doseStatusReasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : doseStatusReasonArray) {
                builder.doseStatusReason(parseCodeableConcept("doseStatusReason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.series(parseString("series", JsonSupport.getJsonValue(jsonObject, "series", JsonString.class), jsonObject.get("_series"), -1));
        builder.doseNumber(parseChoiceElement("doseNumber", jsonObject, "PositiveInt", "String"));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonObject, "PositiveInt", "String"));
        stackPop();
        return builder.build();
    }

    protected ImmunizationRecommendation parseImmunizationRecommendation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImmunizationRecommendation", jsonObject);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime date = parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        java.util.List<ImmunizationRecommendation.Recommendation> recommendation = new ArrayList<>();
        JsonArray recommendationArray = JsonSupport.getJsonArray(jsonObject, "recommendation");
        if (recommendationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : recommendationArray) {
                recommendation.add(parseImmunizationRecommendationRecommendation("recommendation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ImmunizationRecommendation.Builder builder = ImmunizationRecommendation.builder(patient, date, recommendation);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.authority(parseReference("authority", JsonSupport.getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ImmunizationRecommendation.Recommendation parseImmunizationRecommendationRecommendation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImmunizationRecommendation.Recommendation", jsonObject);
        CodeableConcept forecastStatus = parseCodeableConcept("forecastStatus", JsonSupport.getJsonValue(jsonObject, "forecastStatus", JsonObject.class), -1);
        ImmunizationRecommendation.Recommendation.Builder builder = ImmunizationRecommendation.Recommendation.builder(forecastStatus);
        parseBackboneElement(builder, jsonObject);
        JsonArray vaccineCodeArray = JsonSupport.getJsonArray(jsonObject, "vaccineCode");
        if (vaccineCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : vaccineCodeArray) {
                builder.vaccineCode(parseCodeableConcept("vaccineCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.targetDisease(parseCodeableConcept("targetDisease", JsonSupport.getJsonValue(jsonObject, "targetDisease", JsonObject.class), -1));
        JsonArray contraindicatedVaccineCodeArray = JsonSupport.getJsonArray(jsonObject, "contraindicatedVaccineCode");
        if (contraindicatedVaccineCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contraindicatedVaccineCodeArray) {
                builder.contraindicatedVaccineCode(parseCodeableConcept("contraindicatedVaccineCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray forecastReasonArray = JsonSupport.getJsonArray(jsonObject, "forecastReason");
        if (forecastReasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : forecastReasonArray) {
                builder.forecastReason(parseCodeableConcept("forecastReason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dateCriterionArray = JsonSupport.getJsonArray(jsonObject, "dateCriterion");
        if (dateCriterionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dateCriterionArray) {
                builder.dateCriterion(parseImmunizationRecommendationRecommendationDateCriterion("dateCriterion", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.series(parseString("series", JsonSupport.getJsonValue(jsonObject, "series", JsonString.class), jsonObject.get("_series"), -1));
        builder.doseNumber(parseChoiceElement("doseNumber", jsonObject, "PositiveInt", "String"));
        builder.seriesDoses(parseChoiceElement("seriesDoses", jsonObject, "PositiveInt", "String"));
        JsonArray supportingImmunizationArray = JsonSupport.getJsonArray(jsonObject, "supportingImmunization");
        if (supportingImmunizationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingImmunizationArray) {
                builder.supportingImmunization(parseReference("supportingImmunization", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingPatientInformationArray = JsonSupport.getJsonArray(jsonObject, "supportingPatientInformation");
        if (supportingPatientInformationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingPatientInformationArray) {
                builder.supportingPatientInformation(parseReference("supportingPatientInformation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImmunizationRecommendation.Recommendation.DateCriterion parseImmunizationRecommendationRecommendationDateCriterion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImmunizationRecommendation.Recommendation.DateCriterion", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        DateTime value = parseDateTime("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        ImmunizationRecommendation.Recommendation.DateCriterion.Builder builder = ImmunizationRecommendation.Recommendation.DateCriterion.builder(code, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide parseImplementationGuide(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Id packageId = (Id) parseString(Id.builder(), "packageId", JsonSupport.getJsonValue(jsonObject, "packageId", JsonString.class), jsonObject.get("_packageId"), -1);
        java.util.List<FHIRVersion> fhirVersion = new ArrayList<>();
        JsonArray fhirVersionArray = JsonSupport.getJsonArray(jsonObject, "fhirVersion", true);
        if (fhirVersionArray != null) {
            int index = 0;
            JsonArray _fhirVersionArray = jsonObject.getJsonArray("_fhirVersion");
            for (JsonValue jsonValue : fhirVersionArray) {
                fhirVersion.add((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", jsonValue, JsonSupport.getJsonValue(_fhirVersionArray, index), index));
                index++;
            }
        }
        ImplementationGuide.Builder builder = ImplementationGuide.builder(url, name, status, packageId, fhirVersion);
        parseDomainResource(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.license((SPDXLicense) parseString(SPDXLicense.builder(), "license", JsonSupport.getJsonValue(jsonObject, "license", JsonString.class), jsonObject.get("_license"), -1));
        JsonArray dependsOnArray = JsonSupport.getJsonArray(jsonObject, "dependsOn");
        if (dependsOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dependsOnArray) {
                builder.dependsOn(parseImplementationGuideDependsOn("dependsOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray globalArray = JsonSupport.getJsonArray(jsonObject, "global");
        if (globalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : globalArray) {
                builder.global(parseImplementationGuideGlobal("global", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.definition(parseImplementationGuideDefinition("definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonObject.class), -1));
        builder.manifest(parseImplementationGuideManifest("manifest", JsonSupport.getJsonValue(jsonObject, "manifest", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Definition parseImplementationGuideDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Definition", jsonObject);
        java.util.List<ImplementationGuide.Definition.Resource> resource = new ArrayList<>();
        JsonArray resourceArray = JsonSupport.getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resourceArray) {
                resource.add(parseImplementationGuideDefinitionResource("resource", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ImplementationGuide.Definition.Builder builder = ImplementationGuide.Definition.builder(resource);
        parseBackboneElement(builder, jsonObject);
        JsonArray groupingArray = JsonSupport.getJsonArray(jsonObject, "grouping");
        if (groupingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : groupingArray) {
                builder.grouping(parseImplementationGuideDefinitionGrouping("grouping", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.page(parseImplementationGuideDefinitionPage("page", JsonSupport.getJsonValue(jsonObject, "page", JsonObject.class), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseImplementationGuideDefinitionParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray templateArray = JsonSupport.getJsonArray(jsonObject, "template");
        if (templateArray != null) {
            int index = 0;
            for (JsonValue jsonValue : templateArray) {
                builder.template(parseImplementationGuideDefinitionTemplate("template", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Definition.Grouping parseImplementationGuideDefinitionGrouping(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Definition.Grouping", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        ImplementationGuide.Definition.Grouping.Builder builder = ImplementationGuide.Definition.Grouping.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Definition.Page parseImplementationGuideDefinitionPage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Definition.Page", jsonObject);
        Element name = parseChoiceElement("name", jsonObject, "Url", "Reference");
        String title = parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1);
        GuidePageGeneration generation = (GuidePageGeneration) parseString(GuidePageGeneration.builder(), "generation", JsonSupport.getJsonValue(jsonObject, "generation", JsonString.class), jsonObject.get("_generation"), -1);
        ImplementationGuide.Definition.Page.Builder builder = ImplementationGuide.Definition.Page.builder(name, title, generation);
        parseBackboneElement(builder, jsonObject);
        JsonArray pageArray = JsonSupport.getJsonArray(jsonObject, "page");
        if (pageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : pageArray) {
                builder.page(parseImplementationGuideDefinitionPage("page", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Definition.Parameter parseImplementationGuideDefinitionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Definition.Parameter", jsonObject);
        GuideParameterCode code = (GuideParameterCode) parseString(GuideParameterCode.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        ImplementationGuide.Definition.Parameter.Builder builder = ImplementationGuide.Definition.Parameter.builder(code, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Definition.Resource parseImplementationGuideDefinitionResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Definition.Resource", jsonObject);
        Reference reference = parseReference("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1);
        ImplementationGuide.Definition.Resource.Builder builder = ImplementationGuide.Definition.Resource.builder(reference);
        parseBackboneElement(builder, jsonObject);
        JsonArray fhirVersionArray = JsonSupport.getJsonArray(jsonObject, "fhirVersion", true);
        if (fhirVersionArray != null) {
            int index = 0;
            JsonArray _fhirVersionArray = jsonObject.getJsonArray("_fhirVersion");
            for (JsonValue jsonValue : fhirVersionArray) {
                builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", jsonValue, JsonSupport.getJsonValue(_fhirVersionArray, index), index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.example(parseChoiceElement("example", jsonObject, "Boolean", "Canonical"));
        builder.groupingId((Id) parseString(Id.builder(), "groupingId", JsonSupport.getJsonValue(jsonObject, "groupingId", JsonString.class), jsonObject.get("_groupingId"), -1));
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Definition.Template parseImplementationGuideDefinitionTemplate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Definition.Template", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        String source = parseString("source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1);
        ImplementationGuide.Definition.Template.Builder builder = ImplementationGuide.Definition.Template.builder(code, source);
        parseBackboneElement(builder, jsonObject);
        builder.scope(parseString("scope", JsonSupport.getJsonValue(jsonObject, "scope", JsonString.class), jsonObject.get("_scope"), -1));
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.DependsOn parseImplementationGuideDependsOn(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.DependsOn", jsonObject);
        Canonical uri = (Canonical) parseUri(Canonical.builder(), "uri", JsonSupport.getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1);
        ImplementationGuide.DependsOn.Builder builder = ImplementationGuide.DependsOn.builder(uri);
        parseBackboneElement(builder, jsonObject);
        builder.packageId((Id) parseString(Id.builder(), "packageId", JsonSupport.getJsonValue(jsonObject, "packageId", JsonString.class), jsonObject.get("_packageId"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Global parseImplementationGuideGlobal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Global", jsonObject);
        ResourceType type = (ResourceType) parseString(ResourceType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Canonical profile = (Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1);
        ImplementationGuide.Global.Builder builder = ImplementationGuide.Global.builder(type, profile);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Manifest parseImplementationGuideManifest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Manifest", jsonObject);
        java.util.List<ImplementationGuide.Manifest.Resource> resource = new ArrayList<>();
        JsonArray resourceArray = JsonSupport.getJsonArray(jsonObject, "resource");
        if (resourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : resourceArray) {
                resource.add(parseImplementationGuideManifestResource("resource", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ImplementationGuide.Manifest.Builder builder = ImplementationGuide.Manifest.builder(resource);
        parseBackboneElement(builder, jsonObject);
        builder.rendering((Url) parseUri(Url.builder(), "rendering", JsonSupport.getJsonValue(jsonObject, "rendering", JsonString.class), jsonObject.get("_rendering"), -1));
        JsonArray pageArray = JsonSupport.getJsonArray(jsonObject, "page");
        if (pageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : pageArray) {
                builder.page(parseImplementationGuideManifestPage("page", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray imageArray = JsonSupport.getJsonArray(jsonObject, "image", true);
        if (imageArray != null) {
            int index = 0;
            JsonArray _imageArray = jsonObject.getJsonArray("_image");
            for (JsonValue jsonValue : imageArray) {
                builder.image(parseString("image", jsonValue, JsonSupport.getJsonValue(_imageArray, index), index));
                index++;
            }
        }
        JsonArray otherArray = JsonSupport.getJsonArray(jsonObject, "other", true);
        if (otherArray != null) {
            int index = 0;
            JsonArray _otherArray = jsonObject.getJsonArray("_other");
            for (JsonValue jsonValue : otherArray) {
                builder.other(parseString("other", jsonValue, JsonSupport.getJsonValue(_otherArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Manifest.Page parseImplementationGuideManifestPage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Manifest.Page", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        ImplementationGuide.Manifest.Page.Builder builder = ImplementationGuide.Manifest.Page.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray anchorArray = JsonSupport.getJsonArray(jsonObject, "anchor", true);
        if (anchorArray != null) {
            int index = 0;
            JsonArray _anchorArray = jsonObject.getJsonArray("_anchor");
            for (JsonValue jsonValue : anchorArray) {
                builder.anchor(parseString("anchor", jsonValue, JsonSupport.getJsonValue(_anchorArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ImplementationGuide.Manifest.Resource parseImplementationGuideManifestResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ImplementationGuide.Manifest.Resource", jsonObject);
        Reference reference = parseReference("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonObject.class), -1);
        ImplementationGuide.Manifest.Resource.Builder builder = ImplementationGuide.Manifest.Resource.builder(reference);
        parseBackboneElement(builder, jsonObject);
        builder.example(parseChoiceElement("example", jsonObject, "Boolean", "Canonical"));
        builder.relativePath((Url) parseUri(Url.builder(), "relativePath", JsonSupport.getJsonValue(jsonObject, "relativePath", JsonString.class), jsonObject.get("_relativePath"), -1));
        stackPop();
        return builder.build();
    }

    protected Instant parseInstant(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Instant.Builder builder = Instant.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan parseInsurancePlan(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan", jsonObject);
        InsurancePlan.Builder builder = InsurancePlan.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray aliasArray = JsonSupport.getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            int index = 0;
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (JsonValue jsonValue : aliasArray) {
                builder.alias(parseString("alias", jsonValue, JsonSupport.getJsonValue(_aliasArray, index), index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.ownedBy(parseReference("ownedBy", JsonSupport.getJsonValue(jsonObject, "ownedBy", JsonObject.class), -1));
        builder.administeredBy(parseReference("administeredBy", JsonSupport.getJsonValue(jsonObject, "administeredBy", JsonObject.class), -1));
        JsonArray coverageAreaArray = JsonSupport.getJsonArray(jsonObject, "coverageArea");
        if (coverageAreaArray != null) {
            int index = 0;
            for (JsonValue jsonValue : coverageAreaArray) {
                builder.coverageArea(parseReference("coverageArea", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseInsurancePlanContact("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray networkArray = JsonSupport.getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : networkArray) {
                builder.network(parseReference("network", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray coverageArray = JsonSupport.getJsonArray(jsonObject, "coverage");
        if (coverageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : coverageArray) {
                builder.coverage(parseInsurancePlanCoverage("coverage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray planArray = JsonSupport.getJsonArray(jsonObject, "plan");
        if (planArray != null) {
            int index = 0;
            for (JsonValue jsonValue : planArray) {
                builder.plan(parseInsurancePlanPlan("plan", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Contact parseInsurancePlanContact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Contact", jsonObject);
        InsurancePlan.Contact.Builder builder = InsurancePlan.Contact.builder();
        parseBackboneElement(builder, jsonObject);
        builder.purpose(parseCodeableConcept("purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonObject.class), -1));
        builder.name(parseHumanName("name", JsonSupport.getJsonValue(jsonObject, "name", JsonObject.class), -1));
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.address(parseAddress("address", JsonSupport.getJsonValue(jsonObject, "address", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Coverage parseInsurancePlanCoverage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Coverage", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        java.util.List<InsurancePlan.Coverage.Benefit> benefit = new ArrayList<>();
        JsonArray benefitArray = JsonSupport.getJsonArray(jsonObject, "benefit");
        if (benefitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : benefitArray) {
                benefit.add(parseInsurancePlanCoverageBenefit("benefit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        InsurancePlan.Coverage.Builder builder = InsurancePlan.Coverage.builder(type, benefit);
        parseBackboneElement(builder, jsonObject);
        JsonArray networkArray = JsonSupport.getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : networkArray) {
                builder.network(parseReference("network", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Coverage.Benefit parseInsurancePlanCoverageBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Coverage.Benefit", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        InsurancePlan.Coverage.Benefit.Builder builder = InsurancePlan.Coverage.Benefit.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.requirement(parseString("requirement", JsonSupport.getJsonValue(jsonObject, "requirement", JsonString.class), jsonObject.get("_requirement"), -1));
        JsonArray limitArray = JsonSupport.getJsonArray(jsonObject, "limit");
        if (limitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : limitArray) {
                builder.limit(parseInsurancePlanCoverageBenefitLimit("limit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Coverage.Benefit.Limit parseInsurancePlanCoverageBenefitLimit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Coverage.Benefit.Limit", jsonObject);
        InsurancePlan.Coverage.Benefit.Limit.Builder builder = InsurancePlan.Coverage.Benefit.Limit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseQuantity("value", JsonSupport.getJsonValue(jsonObject, "value", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Plan parseInsurancePlanPlan(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Plan", jsonObject);
        InsurancePlan.Plan.Builder builder = InsurancePlan.Plan.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray coverageAreaArray = JsonSupport.getJsonArray(jsonObject, "coverageArea");
        if (coverageAreaArray != null) {
            int index = 0;
            for (JsonValue jsonValue : coverageAreaArray) {
                builder.coverageArea(parseReference("coverageArea", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray networkArray = JsonSupport.getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : networkArray) {
                builder.network(parseReference("network", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray generalCostArray = JsonSupport.getJsonArray(jsonObject, "generalCost");
        if (generalCostArray != null) {
            int index = 0;
            for (JsonValue jsonValue : generalCostArray) {
                builder.generalCost(parseInsurancePlanPlanGeneralCost("generalCost", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specificCostArray = JsonSupport.getJsonArray(jsonObject, "specificCost");
        if (specificCostArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specificCostArray) {
                builder.specificCost(parseInsurancePlanPlanSpecificCost("specificCost", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Plan.GeneralCost parseInsurancePlanPlanGeneralCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Plan.GeneralCost", jsonObject);
        InsurancePlan.Plan.GeneralCost.Builder builder = InsurancePlan.Plan.GeneralCost.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.groupSize((PositiveInt) parseInteger(PositiveInt.builder(), "groupSize", JsonSupport.getJsonValue(jsonObject, "groupSize", JsonNumber.class), jsonObject.get("_groupSize"), -1));
        builder.cost(parseMoney("cost", JsonSupport.getJsonValue(jsonObject, "cost", JsonObject.class), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Plan.SpecificCost parseInsurancePlanPlanSpecificCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Plan.SpecificCost", jsonObject);
        CodeableConcept category = parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1);
        InsurancePlan.Plan.SpecificCost.Builder builder = InsurancePlan.Plan.SpecificCost.builder(category);
        parseBackboneElement(builder, jsonObject);
        JsonArray benefitArray = JsonSupport.getJsonArray(jsonObject, "benefit");
        if (benefitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : benefitArray) {
                builder.benefit(parseInsurancePlanPlanSpecificCostBenefit("benefit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Plan.SpecificCost.Benefit parseInsurancePlanPlanSpecificCostBenefit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Plan.SpecificCost.Benefit", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        InsurancePlan.Plan.SpecificCost.Benefit.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.builder(type);
        parseBackboneElement(builder, jsonObject);
        JsonArray costArray = JsonSupport.getJsonArray(jsonObject, "cost");
        if (costArray != null) {
            int index = 0;
            for (JsonValue jsonValue : costArray) {
                builder.cost(parseInsurancePlanPlanSpecificCostBenefitCost("cost", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected InsurancePlan.Plan.SpecificCost.Benefit.Cost parseInsurancePlanPlanSpecificCostBenefitCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("InsurancePlan.Plan.SpecificCost.Benefit.Cost", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        InsurancePlan.Plan.SpecificCost.Benefit.Cost.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.Cost.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.applicability(parseCodeableConcept("applicability", JsonSupport.getJsonValue(jsonObject, "applicability", JsonObject.class), -1));
        JsonArray qualifiersArray = JsonSupport.getJsonArray(jsonObject, "qualifiers");
        if (qualifiersArray != null) {
            int index = 0;
            for (JsonValue jsonValue : qualifiersArray) {
                builder.qualifiers(parseCodeableConcept("qualifiers", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.value(parseQuantity("value", JsonSupport.getJsonValue(jsonObject, "value", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Integer parseInteger(Integer.Builder builder, java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.NUMBER) {
            JsonNumber jsonNumber = (JsonNumber) jsonValue;
            builder.value(jsonNumber.intValueExact());
        }
        stackPop();
        return builder.build();
    }

    protected Integer parseInteger(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        return parseInteger(Integer.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    protected Invoice parseInvoice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Invoice", jsonObject);
        InvoiceStatus status = (InvoiceStatus) parseString(InvoiceStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Invoice.Builder builder = Invoice.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.cancelledReason(parseString("cancelledReason", JsonSupport.getJsonValue(jsonObject, "cancelledReason", JsonString.class), jsonObject.get("_cancelledReason"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.recipient(parseReference("recipient", JsonSupport.getJsonValue(jsonObject, "recipient", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parseInvoiceParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.issuer(parseReference("issuer", JsonSupport.getJsonValue(jsonObject, "issuer", JsonObject.class), -1));
        builder.account(parseReference("account", JsonSupport.getJsonValue(jsonObject, "account", JsonObject.class), -1));
        JsonArray lineItemArray = JsonSupport.getJsonArray(jsonObject, "lineItem");
        if (lineItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : lineItemArray) {
                builder.lineItem(parseInvoiceLineItem("lineItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray totalPriceComponentArray = JsonSupport.getJsonArray(jsonObject, "totalPriceComponent");
        if (totalPriceComponentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : totalPriceComponentArray) {
                builder.totalPriceComponent(parseInvoiceLineItemPriceComponent("totalPriceComponent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.totalNet(parseMoney("totalNet", JsonSupport.getJsonValue(jsonObject, "totalNet", JsonObject.class), -1));
        builder.totalGross(parseMoney("totalGross", JsonSupport.getJsonValue(jsonObject, "totalGross", JsonObject.class), -1));
        builder.paymentTerms((Markdown) parseString(Markdown.builder(), "paymentTerms", JsonSupport.getJsonValue(jsonObject, "paymentTerms", JsonString.class), jsonObject.get("_paymentTerms"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Invoice.LineItem parseInvoiceLineItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Invoice.LineItem", jsonObject);
        Element chargeItem = parseChoiceElement("chargeItem", jsonObject, "Reference", "CodeableConcept");
        Invoice.LineItem.Builder builder = Invoice.LineItem.builder(chargeItem);
        parseBackboneElement(builder, jsonObject);
        builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonNumber.class), jsonObject.get("_sequence"), -1));
        JsonArray priceComponentArray = JsonSupport.getJsonArray(jsonObject, "priceComponent");
        if (priceComponentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : priceComponentArray) {
                builder.priceComponent(parseInvoiceLineItemPriceComponent("priceComponent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Invoice.LineItem.PriceComponent parseInvoiceLineItemPriceComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Invoice.LineItem.PriceComponent", jsonObject);
        InvoicePriceComponentType type = (InvoicePriceComponentType) parseString(InvoicePriceComponentType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Invoice.LineItem.PriceComponent.Builder builder = Invoice.LineItem.PriceComponent.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.amount(parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Invoice.Participant parseInvoiceParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Invoice.Participant", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        Invoice.Participant.Builder builder = Invoice.Participant.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Library parseLibrary(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Library", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Library.Builder builder = Library.builder(status, type);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseParameterDefinition("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dataRequirementArray = JsonSupport.getJsonArray(jsonObject, "dataRequirement");
        if (dataRequirementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dataRequirementArray) {
                builder.dataRequirement(parseDataRequirement("dataRequirement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contentArray = JsonSupport.getJsonArray(jsonObject, "content");
        if (contentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contentArray) {
                builder.content(parseAttachment("content", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Linkage parseLinkage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Linkage", jsonObject);
        java.util.List<Linkage.Item> item = new ArrayList<>();
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                item.add(parseLinkageItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Linkage.Builder builder = Linkage.builder(item);
        parseDomainResource(builder, jsonObject);
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Linkage.Item parseLinkageItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Linkage.Item", jsonObject);
        LinkageType type = (LinkageType) parseString(LinkageType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Reference resource = parseReference("resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonObject.class), -1);
        Linkage.Item.Builder builder = Linkage.Item.builder(type, resource);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected List parseList(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("List", jsonObject);
        ListStatus status = (ListStatus) parseString(ListStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ListMode mode = (ListMode) parseString(ListMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        List.Builder builder = List.builder(status, mode);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.source(parseReference("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1));
        builder.orderedBy(parseCodeableConcept("orderedBy", JsonSupport.getJsonValue(jsonObject, "orderedBy", JsonObject.class), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray entryArray = JsonSupport.getJsonArray(jsonObject, "entry");
        if (entryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : entryArray) {
                builder.entry(parseListEntry("entry", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.emptyReason(parseCodeableConcept("emptyReason", JsonSupport.getJsonValue(jsonObject, "emptyReason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected List.Entry parseListEntry(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("List.Entry", jsonObject);
        Reference item = parseReference("item", JsonSupport.getJsonValue(jsonObject, "item", JsonObject.class), -1);
        List.Entry.Builder builder = List.Entry.builder(item);
        parseBackboneElement(builder, jsonObject);
        builder.flag(parseCodeableConcept("flag", JsonSupport.getJsonValue(jsonObject, "flag", JsonObject.class), -1));
        builder.deleted(parseBoolean("deleted", JsonSupport.getJsonValue(jsonObject, "deleted", JsonValue.class), jsonObject.get("_deleted"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        stackPop();
        return builder.build();
    }

    protected Location parseLocation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Location", jsonObject);
        Location.Builder builder = Location.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((LocationStatus) parseString(LocationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.operationalStatus(parseCoding("operationalStatus", JsonSupport.getJsonValue(jsonObject, "operationalStatus", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray aliasArray = JsonSupport.getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            int index = 0;
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (JsonValue jsonValue : aliasArray) {
                builder.alias(parseString("alias", jsonValue, JsonSupport.getJsonValue(_aliasArray, index), index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.mode((LocationMode) parseString(LocationMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.address(parseAddress("address", JsonSupport.getJsonValue(jsonObject, "address", JsonObject.class), -1));
        builder.physicalType(parseCodeableConcept("physicalType", JsonSupport.getJsonValue(jsonObject, "physicalType", JsonObject.class), -1));
        builder.position(parseLocationPosition("position", JsonSupport.getJsonValue(jsonObject, "position", JsonObject.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", JsonSupport.getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        builder.partOf(parseReference("partOf", JsonSupport.getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        JsonArray hoursOfOperationArray = JsonSupport.getJsonArray(jsonObject, "hoursOfOperation");
        if (hoursOfOperationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : hoursOfOperationArray) {
                builder.hoursOfOperation(parseLocationHoursOfOperation("hoursOfOperation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", JsonSupport.getJsonValue(jsonObject, "availabilityExceptions", JsonString.class), jsonObject.get("_availabilityExceptions"), -1));
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Location.HoursOfOperation parseLocationHoursOfOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Location.HoursOfOperation", jsonObject);
        Location.HoursOfOperation.Builder builder = Location.HoursOfOperation.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray daysOfWeekArray = JsonSupport.getJsonArray(jsonObject, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            int index = 0;
            JsonArray _daysOfWeekArray = jsonObject.getJsonArray("_daysOfWeek");
            for (JsonValue jsonValue : daysOfWeekArray) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", jsonValue, JsonSupport.getJsonValue(_daysOfWeekArray, index), index));
                index++;
            }
        }
        builder.allDay(parseBoolean("allDay", JsonSupport.getJsonValue(jsonObject, "allDay", JsonValue.class), jsonObject.get("_allDay"), -1));
        builder.openingTime(parseTime("openingTime", JsonSupport.getJsonValue(jsonObject, "openingTime", JsonString.class), jsonObject.get("_openingTime"), -1));
        builder.closingTime(parseTime("closingTime", JsonSupport.getJsonValue(jsonObject, "closingTime", JsonString.class), jsonObject.get("_closingTime"), -1));
        stackPop();
        return builder.build();
    }

    protected Location.Position parseLocationPosition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Location.Position", jsonObject);
        Decimal longitude = parseDecimal("longitude", JsonSupport.getJsonValue(jsonObject, "longitude", JsonNumber.class), jsonObject.get("_longitude"), -1);
        Decimal latitude = parseDecimal("latitude", JsonSupport.getJsonValue(jsonObject, "latitude", JsonNumber.class), jsonObject.get("_latitude"), -1);
        Location.Position.Builder builder = Location.Position.builder(longitude, latitude);
        parseBackboneElement(builder, jsonObject);
        builder.altitude(parseDecimal("altitude", JsonSupport.getJsonValue(jsonObject, "altitude", JsonNumber.class), jsonObject.get("_altitude"), -1));
        stackPop();
        return builder.build();
    }

    protected MarketingStatus parseMarketingStatus(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MarketingStatus", jsonObject);
        CodeableConcept country = parseCodeableConcept("country", JsonSupport.getJsonValue(jsonObject, "country", JsonObject.class), -1);
        CodeableConcept status = parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1);
        Period dateRange = parsePeriod("dateRange", JsonSupport.getJsonValue(jsonObject, "dateRange", JsonObject.class), -1);
        MarketingStatus.Builder builder = MarketingStatus.builder(country, status, dateRange);
        parseBackboneElement(builder, jsonObject);
        builder.jurisdiction(parseCodeableConcept("jurisdiction", JsonSupport.getJsonValue(jsonObject, "jurisdiction", JsonObject.class), -1));
        builder.restoreDate(parseDateTime("restoreDate", JsonSupport.getJsonValue(jsonObject, "restoreDate", JsonString.class), jsonObject.get("_restoreDate"), -1));
        stackPop();
        return builder.build();
    }

    protected Measure parseMeasure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Measure", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Measure.Builder builder = Measure.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray libraryArray = JsonSupport.getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            int index = 0;
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (JsonValue jsonValue : libraryArray) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", jsonValue, JsonSupport.getJsonValue(_libraryArray, index), index));
                index++;
            }
        }
        builder.disclaimer((Markdown) parseString(Markdown.builder(), "disclaimer", JsonSupport.getJsonValue(jsonObject, "disclaimer", JsonString.class), jsonObject.get("_disclaimer"), -1));
        builder.scoring(parseCodeableConcept("scoring", JsonSupport.getJsonValue(jsonObject, "scoring", JsonObject.class), -1));
        builder.compositeScoring(parseCodeableConcept("compositeScoring", JsonSupport.getJsonValue(jsonObject, "compositeScoring", JsonObject.class), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.riskAdjustment(parseString("riskAdjustment", JsonSupport.getJsonValue(jsonObject, "riskAdjustment", JsonString.class), jsonObject.get("_riskAdjustment"), -1));
        builder.rateAggregation(parseString("rateAggregation", JsonSupport.getJsonValue(jsonObject, "rateAggregation", JsonString.class), jsonObject.get("_rateAggregation"), -1));
        builder.rationale((Markdown) parseString(Markdown.builder(), "rationale", JsonSupport.getJsonValue(jsonObject, "rationale", JsonString.class), jsonObject.get("_rationale"), -1));
        builder.clinicalRecommendationStatement((Markdown) parseString(Markdown.builder(), "clinicalRecommendationStatement", JsonSupport.getJsonValue(jsonObject, "clinicalRecommendationStatement", JsonString.class), jsonObject.get("_clinicalRecommendationStatement"), -1));
        builder.improvementNotation(parseCodeableConcept("improvementNotation", JsonSupport.getJsonValue(jsonObject, "improvementNotation", JsonObject.class), -1));
        JsonArray definitionArray = JsonSupport.getJsonArray(jsonObject, "definition", true);
        if (definitionArray != null) {
            int index = 0;
            JsonArray _definitionArray = jsonObject.getJsonArray("_definition");
            for (JsonValue jsonValue : definitionArray) {
                builder.definition((Markdown) parseString(Markdown.builder(), "definition", jsonValue, JsonSupport.getJsonValue(_definitionArray, index), index));
                index++;
            }
        }
        builder.guidance((Markdown) parseString(Markdown.builder(), "guidance", JsonSupport.getJsonValue(jsonObject, "guidance", JsonString.class), jsonObject.get("_guidance"), -1));
        JsonArray groupArray = JsonSupport.getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            int index = 0;
            for (JsonValue jsonValue : groupArray) {
                builder.group(parseMeasureGroup("group", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supplementalDataArray = JsonSupport.getJsonArray(jsonObject, "supplementalData");
        if (supplementalDataArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supplementalDataArray) {
                builder.supplementalData(parseMeasureSupplementalData("supplementalData", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Measure.Group parseMeasureGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Measure.Group", jsonObject);
        Measure.Group.Builder builder = Measure.Group.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray populationArray = JsonSupport.getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : populationArray) {
                builder.population(parseMeasureGroupPopulation("population", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray stratifierArray = JsonSupport.getJsonArray(jsonObject, "stratifier");
        if (stratifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : stratifierArray) {
                builder.stratifier(parseMeasureGroupStratifier("stratifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Measure.Group.Population parseMeasureGroupPopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Measure.Group.Population", jsonObject);
        Expression criteria = parseExpression("criteria", JsonSupport.getJsonValue(jsonObject, "criteria", JsonObject.class), -1);
        Measure.Group.Population.Builder builder = Measure.Group.Population.builder(criteria);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected Measure.Group.Stratifier parseMeasureGroupStratifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Measure.Group.Stratifier", jsonObject);
        Measure.Group.Stratifier.Builder builder = Measure.Group.Stratifier.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.criteria(parseExpression("criteria", JsonSupport.getJsonValue(jsonObject, "criteria", JsonObject.class), -1));
        JsonArray componentArray = JsonSupport.getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : componentArray) {
                builder.component(parseMeasureGroupStratifierComponent("component", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Measure.Group.Stratifier.Component parseMeasureGroupStratifierComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Measure.Group.Stratifier.Component", jsonObject);
        Expression criteria = parseExpression("criteria", JsonSupport.getJsonValue(jsonObject, "criteria", JsonObject.class), -1);
        Measure.Group.Stratifier.Component.Builder builder = Measure.Group.Stratifier.Component.builder(criteria);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected Measure.SupplementalData parseMeasureSupplementalData(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Measure.SupplementalData", jsonObject);
        Expression criteria = parseExpression("criteria", JsonSupport.getJsonValue(jsonObject, "criteria", JsonObject.class), -1);
        Measure.SupplementalData.Builder builder = Measure.SupplementalData.builder(criteria);
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray usageArray = JsonSupport.getJsonArray(jsonObject, "usage");
        if (usageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : usageArray) {
                builder.usage(parseCodeableConcept("usage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected MeasureReport parseMeasureReport(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport", jsonObject);
        MeasureReportStatus status = (MeasureReportStatus) parseString(MeasureReportStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        MeasureReportType type = (MeasureReportType) parseString(MeasureReportType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Canonical measure = (Canonical) parseUri(Canonical.builder(), "measure", JsonSupport.getJsonValue(jsonObject, "measure", JsonString.class), jsonObject.get("_measure"), -1);
        Period period = parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1);
        MeasureReport.Builder builder = MeasureReport.builder(status, type, measure, period);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.reporter(parseReference("reporter", JsonSupport.getJsonValue(jsonObject, "reporter", JsonObject.class), -1));
        builder.improvementNotation(parseCodeableConcept("improvementNotation", JsonSupport.getJsonValue(jsonObject, "improvementNotation", JsonObject.class), -1));
        JsonArray groupArray = JsonSupport.getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            int index = 0;
            for (JsonValue jsonValue : groupArray) {
                builder.group(parseMeasureReportGroup("group", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray evaluatedResourceArray = JsonSupport.getJsonArray(jsonObject, "evaluatedResource");
        if (evaluatedResourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : evaluatedResourceArray) {
                builder.evaluatedResource(parseReference("evaluatedResource", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MeasureReport.Group parseMeasureReportGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport.Group", jsonObject);
        MeasureReport.Group.Builder builder = MeasureReport.Group.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray populationArray = JsonSupport.getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : populationArray) {
                builder.population(parseMeasureReportGroupPopulation("population", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.measureScore(parseQuantity("measureScore", JsonSupport.getJsonValue(jsonObject, "measureScore", JsonObject.class), -1));
        JsonArray stratifierArray = JsonSupport.getJsonArray(jsonObject, "stratifier");
        if (stratifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : stratifierArray) {
                builder.stratifier(parseMeasureReportGroupStratifier("stratifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MeasureReport.Group.Population parseMeasureReportGroupPopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport.Group.Population", jsonObject);
        MeasureReport.Group.Population.Builder builder = MeasureReport.Group.Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.count(parseInteger("count", JsonSupport.getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        builder.subjectResults(parseReference("subjectResults", JsonSupport.getJsonValue(jsonObject, "subjectResults", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MeasureReport.Group.Stratifier parseMeasureReportGroupStratifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport.Group.Stratifier", jsonObject);
        MeasureReport.Group.Stratifier.Builder builder = MeasureReport.Group.Stratifier.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray stratumArray = JsonSupport.getJsonArray(jsonObject, "stratum");
        if (stratumArray != null) {
            int index = 0;
            for (JsonValue jsonValue : stratumArray) {
                builder.stratum(parseMeasureReportGroupStratifierStratum("stratum", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MeasureReport.Group.Stratifier.Stratum parseMeasureReportGroupStratifierStratum(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport.Group.Stratifier.Stratum", jsonObject);
        MeasureReport.Group.Stratifier.Stratum.Builder builder = MeasureReport.Group.Stratifier.Stratum.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseCodeableConcept("value", JsonSupport.getJsonValue(jsonObject, "value", JsonObject.class), -1));
        JsonArray componentArray = JsonSupport.getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : componentArray) {
                builder.component(parseMeasureReportGroupStratifierStratumComponent("component", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray populationArray = JsonSupport.getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : populationArray) {
                builder.population(parseMeasureReportGroupStratifierStratumPopulation("population", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.measureScore(parseQuantity("measureScore", JsonSupport.getJsonValue(jsonObject, "measureScore", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MeasureReport.Group.Stratifier.Stratum.Component parseMeasureReportGroupStratifierStratumComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport.Group.Stratifier.Stratum.Component", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        CodeableConcept value = parseCodeableConcept("value", JsonSupport.getJsonValue(jsonObject, "value", JsonObject.class), -1);
        MeasureReport.Group.Stratifier.Stratum.Component.Builder builder = MeasureReport.Group.Stratifier.Stratum.Component.builder(code, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MeasureReport.Group.Stratifier.Stratum.Population parseMeasureReportGroupStratifierStratumPopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MeasureReport.Group.Stratifier.Stratum.Population", jsonObject);
        MeasureReport.Group.Stratifier.Stratum.Population.Builder builder = MeasureReport.Group.Stratifier.Stratum.Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.count(parseInteger("count", JsonSupport.getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        builder.subjectResults(parseReference("subjectResults", JsonSupport.getJsonValue(jsonObject, "subjectResults", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Media parseMedia(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Media", jsonObject);
        MediaStatus status = (MediaStatus) parseString(MediaStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Attachment content = parseAttachment("content", JsonSupport.getJsonValue(jsonObject, "content", JsonObject.class), -1);
        Media.Builder builder = Media.builder(status, content);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.modality(parseCodeableConcept("modality", JsonSupport.getJsonValue(jsonObject, "modality", JsonObject.class), -1));
        builder.view(parseCodeableConcept("view", JsonSupport.getJsonValue(jsonObject, "view", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.created(parseChoiceElement("created", jsonObject, "DateTime", "Period"));
        builder.issued(parseInstant("issued", JsonSupport.getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        builder.operator(parseReference("operator", JsonSupport.getJsonValue(jsonObject, "operator", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.deviceName(parseString("deviceName", JsonSupport.getJsonValue(jsonObject, "deviceName", JsonString.class), jsonObject.get("_deviceName"), -1));
        builder.device(parseReference("device", JsonSupport.getJsonValue(jsonObject, "device", JsonObject.class), -1));
        builder.height((PositiveInt) parseInteger(PositiveInt.builder(), "height", JsonSupport.getJsonValue(jsonObject, "height", JsonNumber.class), jsonObject.get("_height"), -1));
        builder.width((PositiveInt) parseInteger(PositiveInt.builder(), "width", JsonSupport.getJsonValue(jsonObject, "width", JsonNumber.class), jsonObject.get("_width"), -1));
        builder.frames((PositiveInt) parseInteger(PositiveInt.builder(), "frames", JsonSupport.getJsonValue(jsonObject, "frames", JsonNumber.class), jsonObject.get("_frames"), -1));
        builder.duration(parseDecimal("duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonNumber.class), jsonObject.get("_duration"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Medication parseMedication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Medication", jsonObject);
        Medication.Builder builder = Medication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status((MedicationStatus) parseString(MedicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.manufacturer(parseReference("manufacturer", JsonSupport.getJsonValue(jsonObject, "manufacturer", JsonObject.class), -1));
        builder.form(parseCodeableConcept("form", JsonSupport.getJsonValue(jsonObject, "form", JsonObject.class), -1));
        builder.amount(parseRatio("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        JsonArray ingredientArray = JsonSupport.getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ingredientArray) {
                builder.ingredient(parseMedicationIngredient("ingredient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.batch(parseMedicationBatch("batch", JsonSupport.getJsonValue(jsonObject, "batch", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Medication.Batch parseMedicationBatch(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Medication.Batch", jsonObject);
        Medication.Batch.Builder builder = Medication.Batch.builder();
        parseBackboneElement(builder, jsonObject);
        builder.lotNumber(parseString("lotNumber", JsonSupport.getJsonValue(jsonObject, "lotNumber", JsonString.class), jsonObject.get("_lotNumber"), -1));
        builder.expirationDate(parseDateTime("expirationDate", JsonSupport.getJsonValue(jsonObject, "expirationDate", JsonString.class), jsonObject.get("_expirationDate"), -1));
        stackPop();
        return builder.build();
    }

    protected Medication.Ingredient parseMedicationIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Medication.Ingredient", jsonObject);
        Element item = parseChoiceElement("item", jsonObject, "CodeableConcept", "Reference");
        Medication.Ingredient.Builder builder = Medication.Ingredient.builder(item);
        parseBackboneElement(builder, jsonObject);
        builder.isActive(parseBoolean("isActive", JsonSupport.getJsonValue(jsonObject, "isActive", JsonValue.class), jsonObject.get("_isActive"), -1));
        builder.strength(parseRatio("strength", JsonSupport.getJsonValue(jsonObject, "strength", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationAdministration parseMedicationAdministration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationAdministration", jsonObject);
        MedicationAdministrationStatus status = (MedicationAdministrationStatus) parseString(MedicationAdministrationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Element medication = parseChoiceElement("medication", jsonObject, "CodeableConcept", "Reference");
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        Element effective = parseChoiceElement("effective", jsonObject, "DateTime", "Period");
        MedicationAdministration.Builder builder = MedicationAdministration.builder(status, medication, subject, effective);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesArray = JsonSupport.getJsonArray(jsonObject, "instantiates", true);
        if (instantiatesArray != null) {
            int index = 0;
            JsonArray _instantiatesArray = jsonObject.getJsonArray("_instantiates");
            for (JsonValue jsonValue : instantiatesArray) {
                builder.instantiates(parseUri("instantiates", jsonValue, JsonSupport.getJsonValue(_instantiatesArray, index), index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray statusReasonArray = JsonSupport.getJsonArray(jsonObject, "statusReason");
        if (statusReasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : statusReasonArray) {
                builder.statusReason(parseCodeableConcept("statusReason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.context(parseReference("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray supportingInformationArray = JsonSupport.getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInformationArray) {
                builder.supportingInformation(parseReference("supportingInformation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseMedicationAdministrationPerformer("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.request(parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        JsonArray deviceArray = JsonSupport.getJsonArray(jsonObject, "device");
        if (deviceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : deviceArray) {
                builder.device(parseReference("device", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.dosage(parseMedicationAdministrationDosage("dosage", JsonSupport.getJsonValue(jsonObject, "dosage", JsonObject.class), -1));
        JsonArray eventHistoryArray = JsonSupport.getJsonArray(jsonObject, "eventHistory");
        if (eventHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : eventHistoryArray) {
                builder.eventHistory(parseReference("eventHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationAdministration.Dosage parseMedicationAdministrationDosage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationAdministration.Dosage", jsonObject);
        MedicationAdministration.Dosage.Builder builder = MedicationAdministration.Dosage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        builder.site(parseCodeableConcept("site", JsonSupport.getJsonValue(jsonObject, "site", JsonObject.class), -1));
        builder.route(parseCodeableConcept("route", JsonSupport.getJsonValue(jsonObject, "route", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.dose((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dose", JsonSupport.getJsonValue(jsonObject, "dose", JsonObject.class), -1));
        builder.rate(parseChoiceElement("rate", jsonObject, "Ratio", "SimpleQuantity"));
        stackPop();
        return builder.build();
    }

    protected MedicationAdministration.Performer parseMedicationAdministrationPerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationAdministration.Performer", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        MedicationAdministration.Performer.Builder builder = MedicationAdministration.Performer.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", JsonSupport.getJsonValue(jsonObject, "function", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationDispense parseMedicationDispense(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationDispense", jsonObject);
        MedicationDispenseStatus status = (MedicationDispenseStatus) parseString(MedicationDispenseStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Element medication = parseChoiceElement("medication", jsonObject, "CodeableConcept", "Reference");
        MedicationDispense.Builder builder = MedicationDispense.builder(status, medication);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseChoiceElement("statusReason", jsonObject, "CodeableConcept", "Reference"));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.context(parseReference("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray supportingInformationArray = JsonSupport.getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInformationArray) {
                builder.supportingInformation(parseReference("supportingInformation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseMedicationDispensePerformer("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray authorizingPrescriptionArray = JsonSupport.getJsonArray(jsonObject, "authorizingPrescription");
        if (authorizingPrescriptionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorizingPrescriptionArray) {
                builder.authorizingPrescription(parseReference("authorizingPrescription", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.daysSupply((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "daysSupply", JsonSupport.getJsonValue(jsonObject, "daysSupply", JsonObject.class), -1));
        builder.whenPrepared(parseDateTime("whenPrepared", JsonSupport.getJsonValue(jsonObject, "whenPrepared", JsonString.class), jsonObject.get("_whenPrepared"), -1));
        builder.whenHandedOver(parseDateTime("whenHandedOver", JsonSupport.getJsonValue(jsonObject, "whenHandedOver", JsonString.class), jsonObject.get("_whenHandedOver"), -1));
        builder.destination(parseReference("destination", JsonSupport.getJsonValue(jsonObject, "destination", JsonObject.class), -1));
        JsonArray receiverArray = JsonSupport.getJsonArray(jsonObject, "receiver");
        if (receiverArray != null) {
            int index = 0;
            for (JsonValue jsonValue : receiverArray) {
                builder.receiver(parseReference("receiver", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dosageInstructionArray = JsonSupport.getJsonArray(jsonObject, "dosageInstruction");
        if (dosageInstructionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dosageInstructionArray) {
                builder.dosageInstruction(parseDosage("dosageInstruction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.substitution(parseMedicationDispenseSubstitution("substitution", JsonSupport.getJsonValue(jsonObject, "substitution", JsonObject.class), -1));
        JsonArray detectedIssueArray = JsonSupport.getJsonArray(jsonObject, "detectedIssue");
        if (detectedIssueArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detectedIssueArray) {
                builder.detectedIssue(parseReference("detectedIssue", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray eventHistoryArray = JsonSupport.getJsonArray(jsonObject, "eventHistory");
        if (eventHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : eventHistoryArray) {
                builder.eventHistory(parseReference("eventHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationDispense.Performer parseMedicationDispensePerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationDispense.Performer", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        MedicationDispense.Performer.Builder builder = MedicationDispense.Performer.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", JsonSupport.getJsonValue(jsonObject, "function", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationDispense.Substitution parseMedicationDispenseSubstitution(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationDispense.Substitution", jsonObject);
        Boolean wasSubstituted = parseBoolean("wasSubstituted", JsonSupport.getJsonValue(jsonObject, "wasSubstituted", JsonValue.class), jsonObject.get("_wasSubstituted"), -1);
        MedicationDispense.Substitution.Builder builder = MedicationDispense.Substitution.builder(wasSubstituted);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray reasonArray = JsonSupport.getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonArray) {
                builder.reason(parseCodeableConcept("reason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray responsiblePartyArray = JsonSupport.getJsonArray(jsonObject, "responsibleParty");
        if (responsiblePartyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : responsiblePartyArray) {
                builder.responsibleParty(parseReference("responsibleParty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge parseMedicationKnowledge(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge", jsonObject);
        MedicationKnowledge.Builder builder = MedicationKnowledge.builder();
        parseDomainResource(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status((MedicationKnowledgeStatus) parseString(MedicationKnowledgeStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.manufacturer(parseReference("manufacturer", JsonSupport.getJsonValue(jsonObject, "manufacturer", JsonObject.class), -1));
        builder.doseForm(parseCodeableConcept("doseForm", JsonSupport.getJsonValue(jsonObject, "doseForm", JsonObject.class), -1));
        builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        JsonArray synonymArray = JsonSupport.getJsonArray(jsonObject, "synonym", true);
        if (synonymArray != null) {
            int index = 0;
            JsonArray _synonymArray = jsonObject.getJsonArray("_synonym");
            for (JsonValue jsonValue : synonymArray) {
                builder.synonym(parseString("synonym", jsonValue, JsonSupport.getJsonValue(_synonymArray, index), index));
                index++;
            }
        }
        JsonArray relatedMedicationKnowledgeArray = JsonSupport.getJsonArray(jsonObject, "relatedMedicationKnowledge");
        if (relatedMedicationKnowledgeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedMedicationKnowledgeArray) {
                builder.relatedMedicationKnowledge(parseMedicationKnowledgeRelatedMedicationKnowledge("relatedMedicationKnowledge", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray associatedMedicationArray = JsonSupport.getJsonArray(jsonObject, "associatedMedication");
        if (associatedMedicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : associatedMedicationArray) {
                builder.associatedMedication(parseReference("associatedMedication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray productTypeArray = JsonSupport.getJsonArray(jsonObject, "productType");
        if (productTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : productTypeArray) {
                builder.productType(parseCodeableConcept("productType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray monographArray = JsonSupport.getJsonArray(jsonObject, "monograph");
        if (monographArray != null) {
            int index = 0;
            for (JsonValue jsonValue : monographArray) {
                builder.monograph(parseMedicationKnowledgeMonograph("monograph", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray ingredientArray = JsonSupport.getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ingredientArray) {
                builder.ingredient(parseMedicationKnowledgeIngredient("ingredient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.preparationInstruction((Markdown) parseString(Markdown.builder(), "preparationInstruction", JsonSupport.getJsonValue(jsonObject, "preparationInstruction", JsonString.class), jsonObject.get("_preparationInstruction"), -1));
        JsonArray intendedRouteArray = JsonSupport.getJsonArray(jsonObject, "intendedRoute");
        if (intendedRouteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : intendedRouteArray) {
                builder.intendedRoute(parseCodeableConcept("intendedRoute", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray costArray = JsonSupport.getJsonArray(jsonObject, "cost");
        if (costArray != null) {
            int index = 0;
            for (JsonValue jsonValue : costArray) {
                builder.cost(parseMedicationKnowledgeCost("cost", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray monitoringProgramArray = JsonSupport.getJsonArray(jsonObject, "monitoringProgram");
        if (monitoringProgramArray != null) {
            int index = 0;
            for (JsonValue jsonValue : monitoringProgramArray) {
                builder.monitoringProgram(parseMedicationKnowledgeMonitoringProgram("monitoringProgram", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray administrationGuidelinesArray = JsonSupport.getJsonArray(jsonObject, "administrationGuidelines");
        if (administrationGuidelinesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : administrationGuidelinesArray) {
                builder.administrationGuidelines(parseMedicationKnowledgeAdministrationGuidelines("administrationGuidelines", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray medicineClassificationArray = JsonSupport.getJsonArray(jsonObject, "medicineClassification");
        if (medicineClassificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : medicineClassificationArray) {
                builder.medicineClassification(parseMedicationKnowledgeMedicineClassification("medicineClassification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.packaging(parseMedicationKnowledgePackaging("packaging", JsonSupport.getJsonValue(jsonObject, "packaging", JsonObject.class), -1));
        JsonArray drugCharacteristicArray = JsonSupport.getJsonArray(jsonObject, "drugCharacteristic");
        if (drugCharacteristicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : drugCharacteristicArray) {
                builder.drugCharacteristic(parseMedicationKnowledgeDrugCharacteristic("drugCharacteristic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contraindicationArray = JsonSupport.getJsonArray(jsonObject, "contraindication");
        if (contraindicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contraindicationArray) {
                builder.contraindication(parseReference("contraindication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray regulatoryArray = JsonSupport.getJsonArray(jsonObject, "regulatory");
        if (regulatoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : regulatoryArray) {
                builder.regulatory(parseMedicationKnowledgeRegulatory("regulatory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray kineticsArray = JsonSupport.getJsonArray(jsonObject, "kinetics");
        if (kineticsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : kineticsArray) {
                builder.kinetics(parseMedicationKnowledgeKinetics("kinetics", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.AdministrationGuidelines parseMedicationKnowledgeAdministrationGuidelines(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.AdministrationGuidelines", jsonObject);
        MedicationKnowledge.AdministrationGuidelines.Builder builder = MedicationKnowledge.AdministrationGuidelines.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray dosageArray = JsonSupport.getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dosageArray) {
                builder.dosage(parseMedicationKnowledgeAdministrationGuidelinesDosage("dosage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.indication(parseChoiceElement("indication", jsonObject, "CodeableConcept", "Reference"));
        JsonArray patientCharacteristicsArray = JsonSupport.getJsonArray(jsonObject, "patientCharacteristics");
        if (patientCharacteristicsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : patientCharacteristicsArray) {
                builder.patientCharacteristics(parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics("patientCharacteristics", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.AdministrationGuidelines.Dosage parseMedicationKnowledgeAdministrationGuidelinesDosage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.AdministrationGuidelines.Dosage", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        java.util.List<Dosage> dosage = new ArrayList<>();
        JsonArray dosageArray = JsonSupport.getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dosageArray) {
                dosage.add(parseDosage("dosage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        MedicationKnowledge.AdministrationGuidelines.Dosage.Builder builder = MedicationKnowledge.AdministrationGuidelines.Dosage.builder(type, dosage);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics", jsonObject);
        Element characteristic = parseChoiceElement("characteristic", jsonObject, "CodeableConcept", "SimpleQuantity");
        MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.Builder builder = MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.builder(characteristic);
        parseBackboneElement(builder, jsonObject);
        JsonArray valueArray = JsonSupport.getJsonArray(jsonObject, "value", true);
        if (valueArray != null) {
            int index = 0;
            JsonArray _valueArray = jsonObject.getJsonArray("_value");
            for (JsonValue jsonValue : valueArray) {
                builder.value(parseString("value", jsonValue, JsonSupport.getJsonValue(_valueArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Cost parseMedicationKnowledgeCost(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Cost", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Money cost = parseMoney("cost", JsonSupport.getJsonValue(jsonObject, "cost", JsonObject.class), -1);
        MedicationKnowledge.Cost.Builder builder = MedicationKnowledge.Cost.builder(type, cost);
        parseBackboneElement(builder, jsonObject);
        builder.source(parseString("source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.DrugCharacteristic parseMedicationKnowledgeDrugCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.DrugCharacteristic", jsonObject);
        MedicationKnowledge.DrugCharacteristic.Builder builder = MedicationKnowledge.DrugCharacteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, "CodeableConcept", "String", "SimpleQuantity", "Base64Binary"));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Ingredient parseMedicationKnowledgeIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Ingredient", jsonObject);
        Element item = parseChoiceElement("item", jsonObject, "CodeableConcept", "Reference");
        MedicationKnowledge.Ingredient.Builder builder = MedicationKnowledge.Ingredient.builder(item);
        parseBackboneElement(builder, jsonObject);
        builder.isActive(parseBoolean("isActive", JsonSupport.getJsonValue(jsonObject, "isActive", JsonValue.class), jsonObject.get("_isActive"), -1));
        builder.strength(parseRatio("strength", JsonSupport.getJsonValue(jsonObject, "strength", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Kinetics parseMedicationKnowledgeKinetics(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Kinetics", jsonObject);
        MedicationKnowledge.Kinetics.Builder builder = MedicationKnowledge.Kinetics.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray areaUnderCurveArray = JsonSupport.getJsonArray(jsonObject, "areaUnderCurve");
        if (areaUnderCurveArray != null) {
            int index = 0;
            for (JsonValue jsonValue : areaUnderCurveArray) {
                builder.areaUnderCurve((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "areaUnderCurve", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray lethalDose50Array = JsonSupport.getJsonArray(jsonObject, "lethalDose50");
        if (lethalDose50Array != null) {
            int index = 0;
            for (JsonValue jsonValue : lethalDose50Array) {
                builder.lethalDose50((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "lethalDose50", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.halfLifePeriod((Duration) parseQuantity(Duration.builder(), "halfLifePeriod", JsonSupport.getJsonValue(jsonObject, "halfLifePeriod", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.MedicineClassification parseMedicationKnowledgeMedicineClassification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.MedicineClassification", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        MedicationKnowledge.MedicineClassification.Builder builder = MedicationKnowledge.MedicineClassification.builder(type);
        parseBackboneElement(builder, jsonObject);
        JsonArray classificationArray = JsonSupport.getJsonArray(jsonObject, "classification");
        if (classificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : classificationArray) {
                builder.classification(parseCodeableConcept("classification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.MonitoringProgram parseMedicationKnowledgeMonitoringProgram(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.MonitoringProgram", jsonObject);
        MedicationKnowledge.MonitoringProgram.Builder builder = MedicationKnowledge.MonitoringProgram.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Monograph parseMedicationKnowledgeMonograph(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Monograph", jsonObject);
        MedicationKnowledge.Monograph.Builder builder = MedicationKnowledge.Monograph.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.source(parseReference("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Packaging parseMedicationKnowledgePackaging(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Packaging", jsonObject);
        MedicationKnowledge.Packaging.Builder builder = MedicationKnowledge.Packaging.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Regulatory parseMedicationKnowledgeRegulatory(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Regulatory", jsonObject);
        Reference regulatoryAuthority = parseReference("regulatoryAuthority", JsonSupport.getJsonValue(jsonObject, "regulatoryAuthority", JsonObject.class), -1);
        MedicationKnowledge.Regulatory.Builder builder = MedicationKnowledge.Regulatory.builder(regulatoryAuthority);
        parseBackboneElement(builder, jsonObject);
        JsonArray substitutionArray = JsonSupport.getJsonArray(jsonObject, "substitution");
        if (substitutionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : substitutionArray) {
                builder.substitution(parseMedicationKnowledgeRegulatorySubstitution("substitution", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray scheduleArray = JsonSupport.getJsonArray(jsonObject, "schedule");
        if (scheduleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : scheduleArray) {
                builder.schedule(parseMedicationKnowledgeRegulatorySchedule("schedule", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.maxDispense(parseMedicationKnowledgeRegulatoryMaxDispense("maxDispense", JsonSupport.getJsonValue(jsonObject, "maxDispense", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Regulatory.MaxDispense parseMedicationKnowledgeRegulatoryMaxDispense(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Regulatory.MaxDispense", jsonObject);
        SimpleQuantity quantity = (SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1);
        MedicationKnowledge.Regulatory.MaxDispense.Builder builder = MedicationKnowledge.Regulatory.MaxDispense.builder(quantity);
        parseBackboneElement(builder, jsonObject);
        builder.period((Duration) parseQuantity(Duration.builder(), "period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Regulatory.Schedule parseMedicationKnowledgeRegulatorySchedule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Regulatory.Schedule", jsonObject);
        CodeableConcept schedule = parseCodeableConcept("schedule", JsonSupport.getJsonValue(jsonObject, "schedule", JsonObject.class), -1);
        MedicationKnowledge.Regulatory.Schedule.Builder builder = MedicationKnowledge.Regulatory.Schedule.builder(schedule);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.Regulatory.Substitution parseMedicationKnowledgeRegulatorySubstitution(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.Regulatory.Substitution", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Boolean allowed = parseBoolean("allowed", JsonSupport.getJsonValue(jsonObject, "allowed", JsonValue.class), jsonObject.get("_allowed"), -1);
        MedicationKnowledge.Regulatory.Substitution.Builder builder = MedicationKnowledge.Regulatory.Substitution.builder(type, allowed);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicationKnowledge.RelatedMedicationKnowledge parseMedicationKnowledgeRelatedMedicationKnowledge(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationKnowledge.RelatedMedicationKnowledge", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        java.util.List<Reference> reference = new ArrayList<>();
        JsonArray referenceArray = JsonSupport.getJsonArray(jsonObject, "reference");
        if (referenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceArray) {
                reference.add(parseReference("reference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        MedicationKnowledge.RelatedMedicationKnowledge.Builder builder = MedicationKnowledge.RelatedMedicationKnowledge.builder(type, reference);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicationRequest parseMedicationRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationRequest", jsonObject);
        MedicationRequestStatus status = (MedicationRequestStatus) parseString(MedicationRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        MedicationRequestIntent intent = (MedicationRequestIntent) parseString(MedicationRequestIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        Element medication = parseChoiceElement("medication", jsonObject, "CodeableConcept", "Reference");
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        MedicationRequest.Builder builder = MedicationRequest.builder(status, intent, medication, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority((MedicationRequestPriority) parseString(MedicationRequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", JsonSupport.getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.reported(parseChoiceElement("reported", jsonObject, "Boolean", "Reference"));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        JsonArray supportingInformationArray = JsonSupport.getJsonArray(jsonObject, "supportingInformation");
        if (supportingInformationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInformationArray) {
                builder.supportingInformation(parseReference("supportingInformation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", JsonSupport.getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        builder.performerType(parseCodeableConcept("performerType", JsonSupport.getJsonValue(jsonObject, "performerType", JsonObject.class), -1));
        builder.recorder(parseReference("recorder", JsonSupport.getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", JsonSupport.getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.courseOfTherapyType(parseCodeableConcept("courseOfTherapyType", JsonSupport.getJsonValue(jsonObject, "courseOfTherapyType", JsonObject.class), -1));
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseReference("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dosageInstructionArray = JsonSupport.getJsonArray(jsonObject, "dosageInstruction");
        if (dosageInstructionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dosageInstructionArray) {
                builder.dosageInstruction(parseDosage("dosageInstruction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.dispenseRequest(parseMedicationRequestDispenseRequest("dispenseRequest", JsonSupport.getJsonValue(jsonObject, "dispenseRequest", JsonObject.class), -1));
        builder.substitution(parseMedicationRequestSubstitution("substitution", JsonSupport.getJsonValue(jsonObject, "substitution", JsonObject.class), -1));
        builder.priorPrescription(parseReference("priorPrescription", JsonSupport.getJsonValue(jsonObject, "priorPrescription", JsonObject.class), -1));
        JsonArray detectedIssueArray = JsonSupport.getJsonArray(jsonObject, "detectedIssue");
        if (detectedIssueArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detectedIssueArray) {
                builder.detectedIssue(parseReference("detectedIssue", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray eventHistoryArray = JsonSupport.getJsonArray(jsonObject, "eventHistory");
        if (eventHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : eventHistoryArray) {
                builder.eventHistory(parseReference("eventHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicationRequest.DispenseRequest parseMedicationRequestDispenseRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationRequest.DispenseRequest", jsonObject);
        MedicationRequest.DispenseRequest.Builder builder = MedicationRequest.DispenseRequest.builder();
        parseBackboneElement(builder, jsonObject);
        builder.initialFill(parseMedicationRequestDispenseRequestInitialFill("initialFill", JsonSupport.getJsonValue(jsonObject, "initialFill", JsonObject.class), -1));
        builder.dispenseInterval((Duration) parseQuantity(Duration.builder(), "dispenseInterval", JsonSupport.getJsonValue(jsonObject, "dispenseInterval", JsonObject.class), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", JsonSupport.getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        builder.numberOfRepeatsAllowed((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfRepeatsAllowed", JsonSupport.getJsonValue(jsonObject, "numberOfRepeatsAllowed", JsonNumber.class), jsonObject.get("_numberOfRepeatsAllowed"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.expectedSupplyDuration((Duration) parseQuantity(Duration.builder(), "expectedSupplyDuration", JsonSupport.getJsonValue(jsonObject, "expectedSupplyDuration", JsonObject.class), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationRequest.DispenseRequest.InitialFill parseMedicationRequestDispenseRequestInitialFill(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationRequest.DispenseRequest.InitialFill", jsonObject);
        MedicationRequest.DispenseRequest.InitialFill.Builder builder = MedicationRequest.DispenseRequest.InitialFill.builder();
        parseBackboneElement(builder, jsonObject);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.duration((Duration) parseQuantity(Duration.builder(), "duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationRequest.Substitution parseMedicationRequestSubstitution(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationRequest.Substitution", jsonObject);
        Element allowed = parseChoiceElement("allowed", jsonObject, "Boolean", "CodeableConcept");
        MedicationRequest.Substitution.Builder builder = MedicationRequest.Substitution.builder(allowed);
        parseBackboneElement(builder, jsonObject);
        builder.reason(parseCodeableConcept("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicationStatement parseMedicationStatement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicationStatement", jsonObject);
        MedicationStatementStatus status = (MedicationStatementStatus) parseString(MedicationStatementStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Element medication = parseChoiceElement("medication", jsonObject, "CodeableConcept", "Reference");
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        MedicationStatement.Builder builder = MedicationStatement.builder(status, medication, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray statusReasonArray = JsonSupport.getJsonArray(jsonObject, "statusReason");
        if (statusReasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : statusReasonArray) {
                builder.statusReason(parseCodeableConcept("statusReason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.context(parseReference("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, "DateTime", "Period"));
        builder.dateAsserted(parseDateTime("dateAsserted", JsonSupport.getJsonValue(jsonObject, "dateAsserted", JsonString.class), jsonObject.get("_dateAsserted"), -1));
        builder.informationSource(parseReference("informationSource", JsonSupport.getJsonValue(jsonObject, "informationSource", JsonObject.class), -1));
        JsonArray derivedFromArray = JsonSupport.getJsonArray(jsonObject, "derivedFrom");
        if (derivedFromArray != null) {
            int index = 0;
            for (JsonValue jsonValue : derivedFromArray) {
                builder.derivedFrom(parseReference("derivedFrom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dosageArray = JsonSupport.getJsonArray(jsonObject, "dosage");
        if (dosageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dosageArray) {
                builder.dosage(parseDosage("dosage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProduct parseMedicinalProduct(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProduct", jsonObject);
        java.util.List<MedicinalProduct.Name> name = new ArrayList<>();
        JsonArray nameArray = JsonSupport.getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nameArray) {
                name.add(parseMedicinalProductName("name", (JsonObject) jsonValue, index));
                index++;
            }
        }
        MedicinalProduct.Builder builder = MedicinalProduct.builder(name);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.domain(parseCoding("domain", JsonSupport.getJsonValue(jsonObject, "domain", JsonObject.class), -1));
        builder.combinedPharmaceuticalDoseForm(parseCodeableConcept("combinedPharmaceuticalDoseForm", JsonSupport.getJsonValue(jsonObject, "combinedPharmaceuticalDoseForm", JsonObject.class), -1));
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", JsonSupport.getJsonValue(jsonObject, "legalStatusOfSupply", JsonObject.class), -1));
        builder.additionalMonitoringIndicator(parseCodeableConcept("additionalMonitoringIndicator", JsonSupport.getJsonValue(jsonObject, "additionalMonitoringIndicator", JsonObject.class), -1));
        JsonArray specialMeasuresArray = JsonSupport.getJsonArray(jsonObject, "specialMeasures", true);
        if (specialMeasuresArray != null) {
            int index = 0;
            JsonArray _specialMeasuresArray = jsonObject.getJsonArray("_specialMeasures");
            for (JsonValue jsonValue : specialMeasuresArray) {
                builder.specialMeasures(parseString("specialMeasures", jsonValue, JsonSupport.getJsonValue(_specialMeasuresArray, index), index));
                index++;
            }
        }
        builder.paediatricUseIndicator(parseCodeableConcept("paediatricUseIndicator", JsonSupport.getJsonValue(jsonObject, "paediatricUseIndicator", JsonObject.class), -1));
        JsonArray productClassificationArray = JsonSupport.getJsonArray(jsonObject, "productClassification");
        if (productClassificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : productClassificationArray) {
                builder.productClassification(parseCodeableConcept("productClassification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray marketingStatusArray = JsonSupport.getJsonArray(jsonObject, "marketingStatus");
        if (marketingStatusArray != null) {
            int index = 0;
            for (JsonValue jsonValue : marketingStatusArray) {
                builder.marketingStatus(parseMarketingStatus("marketingStatus", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray pharmaceuticalProductArray = JsonSupport.getJsonArray(jsonObject, "pharmaceuticalProduct");
        if (pharmaceuticalProductArray != null) {
            int index = 0;
            for (JsonValue jsonValue : pharmaceuticalProductArray) {
                builder.pharmaceuticalProduct(parseReference("pharmaceuticalProduct", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray packagedMedicinalProductArray = JsonSupport.getJsonArray(jsonObject, "packagedMedicinalProduct");
        if (packagedMedicinalProductArray != null) {
            int index = 0;
            for (JsonValue jsonValue : packagedMedicinalProductArray) {
                builder.packagedMedicinalProduct(parseReference("packagedMedicinalProduct", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray attachedDocumentArray = JsonSupport.getJsonArray(jsonObject, "attachedDocument");
        if (attachedDocumentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : attachedDocumentArray) {
                builder.attachedDocument(parseReference("attachedDocument", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray masterFileArray = JsonSupport.getJsonArray(jsonObject, "masterFile");
        if (masterFileArray != null) {
            int index = 0;
            for (JsonValue jsonValue : masterFileArray) {
                builder.masterFile(parseReference("masterFile", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseReference("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray clinicalTrialArray = JsonSupport.getJsonArray(jsonObject, "clinicalTrial");
        if (clinicalTrialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : clinicalTrialArray) {
                builder.clinicalTrial(parseReference("clinicalTrial", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray crossReferenceArray = JsonSupport.getJsonArray(jsonObject, "crossReference");
        if (crossReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : crossReferenceArray) {
                builder.crossReference(parseIdentifier("crossReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray manufacturingBusinessOperationArray = JsonSupport.getJsonArray(jsonObject, "manufacturingBusinessOperation");
        if (manufacturingBusinessOperationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturingBusinessOperationArray) {
                builder.manufacturingBusinessOperation(parseMedicinalProductManufacturingBusinessOperation("manufacturingBusinessOperation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialDesignationArray = JsonSupport.getJsonArray(jsonObject, "specialDesignation");
        if (specialDesignationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialDesignationArray) {
                builder.specialDesignation(parseMedicinalProductSpecialDesignation("specialDesignation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProduct.ManufacturingBusinessOperation parseMedicinalProductManufacturingBusinessOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProduct.ManufacturingBusinessOperation", jsonObject);
        MedicinalProduct.ManufacturingBusinessOperation.Builder builder = MedicinalProduct.ManufacturingBusinessOperation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operationType(parseCodeableConcept("operationType", JsonSupport.getJsonValue(jsonObject, "operationType", JsonObject.class), -1));
        builder.authorisationReferenceNumber(parseIdentifier("authorisationReferenceNumber", JsonSupport.getJsonValue(jsonObject, "authorisationReferenceNumber", JsonObject.class), -1));
        builder.effectiveDate(parseDateTime("effectiveDate", JsonSupport.getJsonValue(jsonObject, "effectiveDate", JsonString.class), jsonObject.get("_effectiveDate"), -1));
        builder.confidentialityIndicator(parseCodeableConcept("confidentialityIndicator", JsonSupport.getJsonValue(jsonObject, "confidentialityIndicator", JsonObject.class), -1));
        JsonArray manufacturerArray = JsonSupport.getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturerArray) {
                builder.manufacturer(parseReference("manufacturer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.regulator(parseReference("regulator", JsonSupport.getJsonValue(jsonObject, "regulator", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProduct.Name parseMedicinalProductName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProduct.Name", jsonObject);
        String productName = parseString("productName", JsonSupport.getJsonValue(jsonObject, "productName", JsonString.class), jsonObject.get("_productName"), -1);
        MedicinalProduct.Name.Builder builder = MedicinalProduct.Name.builder(productName);
        parseBackboneElement(builder, jsonObject);
        JsonArray namePartArray = JsonSupport.getJsonArray(jsonObject, "namePart");
        if (namePartArray != null) {
            int index = 0;
            for (JsonValue jsonValue : namePartArray) {
                builder.namePart(parseMedicinalProductNameNamePart("namePart", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray countryLanguageArray = JsonSupport.getJsonArray(jsonObject, "countryLanguage");
        if (countryLanguageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : countryLanguageArray) {
                builder.countryLanguage(parseMedicinalProductNameCountryLanguage("countryLanguage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProduct.Name.CountryLanguage parseMedicinalProductNameCountryLanguage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProduct.Name.CountryLanguage", jsonObject);
        CodeableConcept country = parseCodeableConcept("country", JsonSupport.getJsonValue(jsonObject, "country", JsonObject.class), -1);
        CodeableConcept language = parseCodeableConcept("language", JsonSupport.getJsonValue(jsonObject, "language", JsonObject.class), -1);
        MedicinalProduct.Name.CountryLanguage.Builder builder = MedicinalProduct.Name.CountryLanguage.builder(country, language);
        parseBackboneElement(builder, jsonObject);
        builder.jurisdiction(parseCodeableConcept("jurisdiction", JsonSupport.getJsonValue(jsonObject, "jurisdiction", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProduct.Name.NamePart parseMedicinalProductNameNamePart(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProduct.Name.NamePart", jsonObject);
        String part = parseString("part", JsonSupport.getJsonValue(jsonObject, "part", JsonString.class), jsonObject.get("_part"), -1);
        Coding type = parseCoding("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        MedicinalProduct.Name.NamePart.Builder builder = MedicinalProduct.Name.NamePart.builder(part, type);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicinalProduct.SpecialDesignation parseMedicinalProductSpecialDesignation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProduct.SpecialDesignation", jsonObject);
        MedicinalProduct.SpecialDesignation.Builder builder = MedicinalProduct.SpecialDesignation.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.intendedUse(parseCodeableConcept("intendedUse", JsonSupport.getJsonValue(jsonObject, "intendedUse", JsonObject.class), -1));
        builder.indication(parseChoiceElement("indication", jsonObject, "CodeableConcept", "Reference"));
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.species(parseCodeableConcept("species", JsonSupport.getJsonValue(jsonObject, "species", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductAuthorization parseMedicinalProductAuthorization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductAuthorization", jsonObject);
        MedicinalProductAuthorization.Builder builder = MedicinalProductAuthorization.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray countryArray = JsonSupport.getJsonArray(jsonObject, "country");
        if (countryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : countryArray) {
                builder.country(parseCodeableConcept("country", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.statusDate(parseDateTime("statusDate", JsonSupport.getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.restoreDate(parseDateTime("restoreDate", JsonSupport.getJsonValue(jsonObject, "restoreDate", JsonString.class), jsonObject.get("_restoreDate"), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", JsonSupport.getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        builder.dataExclusivityPeriod(parsePeriod("dataExclusivityPeriod", JsonSupport.getJsonValue(jsonObject, "dataExclusivityPeriod", JsonObject.class), -1));
        builder.dateOfFirstAuthorization(parseDateTime("dateOfFirstAuthorization", JsonSupport.getJsonValue(jsonObject, "dateOfFirstAuthorization", JsonString.class), jsonObject.get("_dateOfFirstAuthorization"), -1));
        builder.internationalBirthDate(parseDateTime("internationalBirthDate", JsonSupport.getJsonValue(jsonObject, "internationalBirthDate", JsonString.class), jsonObject.get("_internationalBirthDate"), -1));
        builder.legalBasis(parseCodeableConcept("legalBasis", JsonSupport.getJsonValue(jsonObject, "legalBasis", JsonObject.class), -1));
        JsonArray jurisdictionalAuthorizationArray = JsonSupport.getJsonArray(jsonObject, "jurisdictionalAuthorization");
        if (jurisdictionalAuthorizationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionalAuthorizationArray) {
                builder.jurisdictionalAuthorization(parseMedicinalProductAuthorizationJurisdictionalAuthorization("jurisdictionalAuthorization", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.holder(parseReference("holder", JsonSupport.getJsonValue(jsonObject, "holder", JsonObject.class), -1));
        builder.regulator(parseReference("regulator", JsonSupport.getJsonValue(jsonObject, "regulator", JsonObject.class), -1));
        builder.procedure(parseMedicinalProductAuthorizationProcedure("procedure", JsonSupport.getJsonValue(jsonObject, "procedure", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductAuthorization.JurisdictionalAuthorization parseMedicinalProductAuthorizationJurisdictionalAuthorization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductAuthorization.JurisdictionalAuthorization", jsonObject);
        MedicinalProductAuthorization.JurisdictionalAuthorization.Builder builder = MedicinalProductAuthorization.JurisdictionalAuthorization.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.country(parseCodeableConcept("country", JsonSupport.getJsonValue(jsonObject, "country", JsonObject.class), -1));
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", JsonSupport.getJsonValue(jsonObject, "legalStatusOfSupply", JsonObject.class), -1));
        builder.validityPeriod(parsePeriod("validityPeriod", JsonSupport.getJsonValue(jsonObject, "validityPeriod", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductAuthorization.Procedure parseMedicinalProductAuthorizationProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductAuthorization.Procedure", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        MedicinalProductAuthorization.Procedure.Builder builder = MedicinalProductAuthorization.Procedure.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.date(parseChoiceElement("date", jsonObject, "Period", "DateTime"));
        JsonArray applicationArray = JsonSupport.getJsonArray(jsonObject, "application");
        if (applicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : applicationArray) {
                builder.application(parseMedicinalProductAuthorizationProcedure("application", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductContraindication parseMedicinalProductContraindication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductContraindication", jsonObject);
        MedicinalProductContraindication.Builder builder = MedicinalProductContraindication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.disease(parseCodeableConcept("disease", JsonSupport.getJsonValue(jsonObject, "disease", JsonObject.class), -1));
        builder.diseaseStatus(parseCodeableConcept("diseaseStatus", JsonSupport.getJsonValue(jsonObject, "diseaseStatus", JsonObject.class), -1));
        JsonArray comorbidityArray = JsonSupport.getJsonArray(jsonObject, "comorbidity");
        if (comorbidityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : comorbidityArray) {
                builder.comorbidity(parseCodeableConcept("comorbidity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray therapeuticIndicationArray = JsonSupport.getJsonArray(jsonObject, "therapeuticIndication");
        if (therapeuticIndicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : therapeuticIndicationArray) {
                builder.therapeuticIndication(parseReference("therapeuticIndication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray otherTherapyArray = JsonSupport.getJsonArray(jsonObject, "otherTherapy");
        if (otherTherapyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : otherTherapyArray) {
                builder.otherTherapy(parseMedicinalProductContraindicationOtherTherapy("otherTherapy", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray populationArray = JsonSupport.getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : populationArray) {
                builder.population(parsePopulation("population", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductContraindication.OtherTherapy parseMedicinalProductContraindicationOtherTherapy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductContraindication.OtherTherapy", jsonObject);
        CodeableConcept therapyRelationshipType = parseCodeableConcept("therapyRelationshipType", JsonSupport.getJsonValue(jsonObject, "therapyRelationshipType", JsonObject.class), -1);
        Element medication = parseChoiceElement("medication", jsonObject, "CodeableConcept", "Reference");
        MedicinalProductContraindication.OtherTherapy.Builder builder = MedicinalProductContraindication.OtherTherapy.builder(therapyRelationshipType, medication);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIndication parseMedicinalProductIndication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIndication", jsonObject);
        MedicinalProductIndication.Builder builder = MedicinalProductIndication.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.diseaseSymptomProcedure(parseCodeableConcept("diseaseSymptomProcedure", JsonSupport.getJsonValue(jsonObject, "diseaseSymptomProcedure", JsonObject.class), -1));
        builder.diseaseStatus(parseCodeableConcept("diseaseStatus", JsonSupport.getJsonValue(jsonObject, "diseaseStatus", JsonObject.class), -1));
        JsonArray comorbidityArray = JsonSupport.getJsonArray(jsonObject, "comorbidity");
        if (comorbidityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : comorbidityArray) {
                builder.comorbidity(parseCodeableConcept("comorbidity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.intendedEffect(parseCodeableConcept("intendedEffect", JsonSupport.getJsonValue(jsonObject, "intendedEffect", JsonObject.class), -1));
        builder.duration(parseQuantity("duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        JsonArray otherTherapyArray = JsonSupport.getJsonArray(jsonObject, "otherTherapy");
        if (otherTherapyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : otherTherapyArray) {
                builder.otherTherapy(parseMedicinalProductIndicationOtherTherapy("otherTherapy", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray undesirableEffectArray = JsonSupport.getJsonArray(jsonObject, "undesirableEffect");
        if (undesirableEffectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : undesirableEffectArray) {
                builder.undesirableEffect(parseReference("undesirableEffect", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray populationArray = JsonSupport.getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : populationArray) {
                builder.population(parsePopulation("population", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIndication.OtherTherapy parseMedicinalProductIndicationOtherTherapy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIndication.OtherTherapy", jsonObject);
        CodeableConcept therapyRelationshipType = parseCodeableConcept("therapyRelationshipType", JsonSupport.getJsonValue(jsonObject, "therapyRelationshipType", JsonObject.class), -1);
        Element medication = parseChoiceElement("medication", jsonObject, "CodeableConcept", "Reference");
        MedicinalProductIndication.OtherTherapy.Builder builder = MedicinalProductIndication.OtherTherapy.builder(therapyRelationshipType, medication);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIngredient parseMedicinalProductIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIngredient", jsonObject);
        CodeableConcept role = parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1);
        MedicinalProductIngredient.Builder builder = MedicinalProductIngredient.builder(role);
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.allergenicIndicator(parseBoolean("allergenicIndicator", JsonSupport.getJsonValue(jsonObject, "allergenicIndicator", JsonValue.class), jsonObject.get("_allergenicIndicator"), -1));
        JsonArray manufacturerArray = JsonSupport.getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturerArray) {
                builder.manufacturer(parseReference("manufacturer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specifiedSubstanceArray = JsonSupport.getJsonArray(jsonObject, "specifiedSubstance");
        if (specifiedSubstanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specifiedSubstanceArray) {
                builder.specifiedSubstance(parseMedicinalProductIngredientSpecifiedSubstance("specifiedSubstance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.substance(parseMedicinalProductIngredientSubstance("substance", JsonSupport.getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIngredient.SpecifiedSubstance parseMedicinalProductIngredientSpecifiedSubstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIngredient.SpecifiedSubstance", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        CodeableConcept group = parseCodeableConcept("group", JsonSupport.getJsonValue(jsonObject, "group", JsonObject.class), -1);
        MedicinalProductIngredient.SpecifiedSubstance.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.builder(code, group);
        parseBackboneElement(builder, jsonObject);
        builder.confidentiality(parseCodeableConcept("confidentiality", JsonSupport.getJsonValue(jsonObject, "confidentiality", JsonObject.class), -1));
        JsonArray strengthArray = JsonSupport.getJsonArray(jsonObject, "strength");
        if (strengthArray != null) {
            int index = 0;
            for (JsonValue jsonValue : strengthArray) {
                builder.strength(parseMedicinalProductIngredientSpecifiedSubstanceStrength("strength", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIngredient.SpecifiedSubstance.Strength parseMedicinalProductIngredientSpecifiedSubstanceStrength(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIngredient.SpecifiedSubstance.Strength", jsonObject);
        Ratio presentation = parseRatio("presentation", JsonSupport.getJsonValue(jsonObject, "presentation", JsonObject.class), -1);
        MedicinalProductIngredient.SpecifiedSubstance.Strength.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.Strength.builder(presentation);
        parseBackboneElement(builder, jsonObject);
        builder.presentationLowLimit(parseRatio("presentationLowLimit", JsonSupport.getJsonValue(jsonObject, "presentationLowLimit", JsonObject.class), -1));
        builder.concentration(parseRatio("concentration", JsonSupport.getJsonValue(jsonObject, "concentration", JsonObject.class), -1));
        builder.concentrationLowLimit(parseRatio("concentrationLowLimit", JsonSupport.getJsonValue(jsonObject, "concentrationLowLimit", JsonObject.class), -1));
        builder.measurementPoint(parseString("measurementPoint", JsonSupport.getJsonValue(jsonObject, "measurementPoint", JsonString.class), jsonObject.get("_measurementPoint"), -1));
        JsonArray countryArray = JsonSupport.getJsonArray(jsonObject, "country");
        if (countryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : countryArray) {
                builder.country(parseCodeableConcept("country", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray referenceStrengthArray = JsonSupport.getJsonArray(jsonObject, "referenceStrength");
        if (referenceStrengthArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceStrengthArray) {
                builder.referenceStrength(parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength("referenceStrength", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength", jsonObject);
        Ratio strength = parseRatio("strength", JsonSupport.getJsonValue(jsonObject, "strength", JsonObject.class), -1);
        MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.builder(strength);
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseCodeableConcept("substance", JsonSupport.getJsonValue(jsonObject, "substance", JsonObject.class), -1));
        builder.strengthLowLimit(parseRatio("strengthLowLimit", JsonSupport.getJsonValue(jsonObject, "strengthLowLimit", JsonObject.class), -1));
        builder.measurementPoint(parseString("measurementPoint", JsonSupport.getJsonValue(jsonObject, "measurementPoint", JsonString.class), jsonObject.get("_measurementPoint"), -1));
        JsonArray countryArray = JsonSupport.getJsonArray(jsonObject, "country");
        if (countryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : countryArray) {
                builder.country(parseCodeableConcept("country", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductIngredient.Substance parseMedicinalProductIngredientSubstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductIngredient.Substance", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        MedicinalProductIngredient.Substance.Builder builder = MedicinalProductIngredient.Substance.builder(code);
        parseBackboneElement(builder, jsonObject);
        JsonArray strengthArray = JsonSupport.getJsonArray(jsonObject, "strength");
        if (strengthArray != null) {
            int index = 0;
            for (JsonValue jsonValue : strengthArray) {
                builder.strength(parseMedicinalProductIngredientSpecifiedSubstanceStrength("strength", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductInteraction parseMedicinalProductInteraction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductInteraction", jsonObject);
        MedicinalProductInteraction.Builder builder = MedicinalProductInteraction.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray interactantArray = JsonSupport.getJsonArray(jsonObject, "interactant");
        if (interactantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : interactantArray) {
                builder.interactant(parseMedicinalProductInteractionInteractant("interactant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.effect(parseCodeableConcept("effect", JsonSupport.getJsonValue(jsonObject, "effect", JsonObject.class), -1));
        builder.incidence(parseCodeableConcept("incidence", JsonSupport.getJsonValue(jsonObject, "incidence", JsonObject.class), -1));
        builder.management(parseCodeableConcept("management", JsonSupport.getJsonValue(jsonObject, "management", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductInteraction.Interactant parseMedicinalProductInteractionInteractant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductInteraction.Interactant", jsonObject);
        Element item = parseChoiceElement("item", jsonObject, "Reference", "CodeableConcept");
        MedicinalProductInteraction.Interactant.Builder builder = MedicinalProductInteraction.Interactant.builder(item);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected MedicinalProductManufactured parseMedicinalProductManufactured(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductManufactured", jsonObject);
        CodeableConcept manufacturedDoseForm = parseCodeableConcept("manufacturedDoseForm", JsonSupport.getJsonValue(jsonObject, "manufacturedDoseForm", JsonObject.class), -1);
        Quantity quantity = parseQuantity("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1);
        MedicinalProductManufactured.Builder builder = MedicinalProductManufactured.builder(manufacturedDoseForm, quantity);
        parseDomainResource(builder, jsonObject);
        builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", JsonSupport.getJsonValue(jsonObject, "unitOfPresentation", JsonObject.class), -1));
        JsonArray manufacturerArray = JsonSupport.getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturerArray) {
                builder.manufacturer(parseReference("manufacturer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray ingredientArray = JsonSupport.getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ingredientArray) {
                builder.ingredient(parseReference("ingredient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", JsonSupport.getJsonValue(jsonObject, "physicalCharacteristics", JsonObject.class), -1));
        JsonArray otherCharacteristicsArray = JsonSupport.getJsonArray(jsonObject, "otherCharacteristics");
        if (otherCharacteristicsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : otherCharacteristicsArray) {
                builder.otherCharacteristics(parseCodeableConcept("otherCharacteristics", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPackaged parseMedicinalProductPackaged(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPackaged", jsonObject);
        java.util.List<MedicinalProductPackaged.PackageItem> packageItem = new ArrayList<>();
        JsonArray packageItemArray = JsonSupport.getJsonArray(jsonObject, "packageItem");
        if (packageItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : packageItemArray) {
                packageItem.add(parseMedicinalProductPackagedPackageItem("packageItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        MedicinalProductPackaged.Builder builder = MedicinalProductPackaged.builder(packageItem);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", JsonSupport.getJsonValue(jsonObject, "legalStatusOfSupply", JsonObject.class), -1));
        JsonArray marketingStatusArray = JsonSupport.getJsonArray(jsonObject, "marketingStatus");
        if (marketingStatusArray != null) {
            int index = 0;
            for (JsonValue jsonValue : marketingStatusArray) {
                builder.marketingStatus(parseMarketingStatus("marketingStatus", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.marketingAuthorization(parseReference("marketingAuthorization", JsonSupport.getJsonValue(jsonObject, "marketingAuthorization", JsonObject.class), -1));
        JsonArray manufacturerArray = JsonSupport.getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturerArray) {
                builder.manufacturer(parseReference("manufacturer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray batchIdentifierArray = JsonSupport.getJsonArray(jsonObject, "batchIdentifier");
        if (batchIdentifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : batchIdentifierArray) {
                builder.batchIdentifier(parseMedicinalProductPackagedBatchIdentifier("batchIdentifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPackaged.BatchIdentifier parseMedicinalProductPackagedBatchIdentifier(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPackaged.BatchIdentifier", jsonObject);
        Identifier outerPackaging = parseIdentifier("outerPackaging", JsonSupport.getJsonValue(jsonObject, "outerPackaging", JsonObject.class), -1);
        MedicinalProductPackaged.BatchIdentifier.Builder builder = MedicinalProductPackaged.BatchIdentifier.builder(outerPackaging);
        parseBackboneElement(builder, jsonObject);
        builder.immediatePackaging(parseIdentifier("immediatePackaging", JsonSupport.getJsonValue(jsonObject, "immediatePackaging", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPackaged.PackageItem parseMedicinalProductPackagedPackageItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPackaged.PackageItem", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Quantity quantity = parseQuantity("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1);
        MedicinalProductPackaged.PackageItem.Builder builder = MedicinalProductPackaged.PackageItem.builder(type, quantity);
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray materialArray = JsonSupport.getJsonArray(jsonObject, "material");
        if (materialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : materialArray) {
                builder.material(parseCodeableConcept("material", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray alternateMaterialArray = JsonSupport.getJsonArray(jsonObject, "alternateMaterial");
        if (alternateMaterialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : alternateMaterialArray) {
                builder.alternateMaterial(parseCodeableConcept("alternateMaterial", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray deviceArray = JsonSupport.getJsonArray(jsonObject, "device");
        if (deviceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : deviceArray) {
                builder.device(parseReference("device", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray manufacturedItemArray = JsonSupport.getJsonArray(jsonObject, "manufacturedItem");
        if (manufacturedItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturedItemArray) {
                builder.manufacturedItem(parseReference("manufacturedItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray packageItemArray = JsonSupport.getJsonArray(jsonObject, "packageItem");
        if (packageItemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : packageItemArray) {
                builder.packageItem(parseMedicinalProductPackagedPackageItem("packageItem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", JsonSupport.getJsonValue(jsonObject, "physicalCharacteristics", JsonObject.class), -1));
        JsonArray otherCharacteristicsArray = JsonSupport.getJsonArray(jsonObject, "otherCharacteristics");
        if (otherCharacteristicsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : otherCharacteristicsArray) {
                builder.otherCharacteristics(parseCodeableConcept("otherCharacteristics", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray shelfLifeStorageArray = JsonSupport.getJsonArray(jsonObject, "shelfLifeStorage");
        if (shelfLifeStorageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : shelfLifeStorageArray) {
                builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray manufacturerArray = JsonSupport.getJsonArray(jsonObject, "manufacturer");
        if (manufacturerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : manufacturerArray) {
                builder.manufacturer(parseReference("manufacturer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPharmaceutical parseMedicinalProductPharmaceutical(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPharmaceutical", jsonObject);
        CodeableConcept administrableDoseForm = parseCodeableConcept("administrableDoseForm", JsonSupport.getJsonValue(jsonObject, "administrableDoseForm", JsonObject.class), -1);
        java.util.List<MedicinalProductPharmaceutical.RouteOfAdministration> routeOfAdministration = new ArrayList<>();
        JsonArray routeOfAdministrationArray = JsonSupport.getJsonArray(jsonObject, "routeOfAdministration");
        if (routeOfAdministrationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : routeOfAdministrationArray) {
                routeOfAdministration.add(parseMedicinalProductPharmaceuticalRouteOfAdministration("routeOfAdministration", (JsonObject) jsonValue, index));
                index++;
            }
        }
        MedicinalProductPharmaceutical.Builder builder = MedicinalProductPharmaceutical.builder(administrableDoseForm, routeOfAdministration);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", JsonSupport.getJsonValue(jsonObject, "unitOfPresentation", JsonObject.class), -1));
        JsonArray ingredientArray = JsonSupport.getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ingredientArray) {
                builder.ingredient(parseReference("ingredient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray deviceArray = JsonSupport.getJsonArray(jsonObject, "device");
        if (deviceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : deviceArray) {
                builder.device(parseReference("device", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray characteristicsArray = JsonSupport.getJsonArray(jsonObject, "characteristics");
        if (characteristicsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : characteristicsArray) {
                builder.characteristics(parseMedicinalProductPharmaceuticalCharacteristics("characteristics", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPharmaceutical.Characteristics parseMedicinalProductPharmaceuticalCharacteristics(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPharmaceutical.Characteristics", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        MedicinalProductPharmaceutical.Characteristics.Builder builder = MedicinalProductPharmaceutical.Characteristics.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPharmaceutical.RouteOfAdministration parseMedicinalProductPharmaceuticalRouteOfAdministration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPharmaceutical.RouteOfAdministration", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        MedicinalProductPharmaceutical.RouteOfAdministration.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.firstDose(parseQuantity("firstDose", JsonSupport.getJsonValue(jsonObject, "firstDose", JsonObject.class), -1));
        builder.maxSingleDose(parseQuantity("maxSingleDose", JsonSupport.getJsonValue(jsonObject, "maxSingleDose", JsonObject.class), -1));
        builder.maxDosePerDay(parseQuantity("maxDosePerDay", JsonSupport.getJsonValue(jsonObject, "maxDosePerDay", JsonObject.class), -1));
        builder.maxDosePerTreatmentPeriod(parseRatio("maxDosePerTreatmentPeriod", JsonSupport.getJsonValue(jsonObject, "maxDosePerTreatmentPeriod", JsonObject.class), -1));
        builder.maxTreatmentPeriod((Duration) parseQuantity(Duration.builder(), "maxTreatmentPeriod", JsonSupport.getJsonValue(jsonObject, "maxTreatmentPeriod", JsonObject.class), -1));
        JsonArray targetSpeciesArray = JsonSupport.getJsonArray(jsonObject, "targetSpecies");
        if (targetSpeciesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetSpeciesArray) {
                builder.targetSpecies(parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies("targetSpecies", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.builder(code);
        parseBackboneElement(builder, jsonObject);
        JsonArray withdrawalPeriodArray = JsonSupport.getJsonArray(jsonObject, "withdrawalPeriod");
        if (withdrawalPeriodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : withdrawalPeriodArray) {
                builder.withdrawalPeriod(parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod("withdrawalPeriod", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod", jsonObject);
        CodeableConcept tissue = parseCodeableConcept("tissue", JsonSupport.getJsonValue(jsonObject, "tissue", JsonObject.class), -1);
        Quantity value = parseQuantity("value", JsonSupport.getJsonValue(jsonObject, "value", JsonObject.class), -1);
        MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.builder(tissue, value);
        parseBackboneElement(builder, jsonObject);
        builder.supportingInformation(parseString("supportingInformation", JsonSupport.getJsonValue(jsonObject, "supportingInformation", JsonString.class), jsonObject.get("_supportingInformation"), -1));
        stackPop();
        return builder.build();
    }

    protected MedicinalProductUndesirableEffect parseMedicinalProductUndesirableEffect(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MedicinalProductUndesirableEffect", jsonObject);
        MedicinalProductUndesirableEffect.Builder builder = MedicinalProductUndesirableEffect.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray subjectArray = JsonSupport.getJsonArray(jsonObject, "subject");
        if (subjectArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subjectArray) {
                builder.subject(parseReference("subject", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.symptomConditionEffect(parseCodeableConcept("symptomConditionEffect", JsonSupport.getJsonValue(jsonObject, "symptomConditionEffect", JsonObject.class), -1));
        builder.classification(parseCodeableConcept("classification", JsonSupport.getJsonValue(jsonObject, "classification", JsonObject.class), -1));
        builder.frequencyOfOccurrence(parseCodeableConcept("frequencyOfOccurrence", JsonSupport.getJsonValue(jsonObject, "frequencyOfOccurrence", JsonObject.class), -1));
        JsonArray populationArray = JsonSupport.getJsonArray(jsonObject, "population");
        if (populationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : populationArray) {
                builder.population(parsePopulation("population", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MessageDefinition parseMessageDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageDefinition", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DateTime date = parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        Element event = parseChoiceElement("event", jsonObject, "Coding", "Uri");
        MessageDefinition.Builder builder = MessageDefinition.builder(status, date, event);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray replacesArray = JsonSupport.getJsonArray(jsonObject, "replaces", true);
        if (replacesArray != null) {
            int index = 0;
            JsonArray _replacesArray = jsonObject.getJsonArray("_replaces");
            for (JsonValue jsonValue : replacesArray) {
                builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", jsonValue, JsonSupport.getJsonValue(_replacesArray, index), index));
                index++;
            }
        }
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.base((Canonical) parseUri(Canonical.builder(), "base", JsonSupport.getJsonValue(jsonObject, "base", JsonString.class), jsonObject.get("_base"), -1));
        JsonArray parentArray = JsonSupport.getJsonArray(jsonObject, "parent", true);
        if (parentArray != null) {
            int index = 0;
            JsonArray _parentArray = jsonObject.getJsonArray("_parent");
            for (JsonValue jsonValue : parentArray) {
                builder.parent((Canonical) parseUri(Canonical.builder(), "parent", jsonValue, JsonSupport.getJsonValue(_parentArray, index), index));
                index++;
            }
        }
        builder.category((MessageSignificanceCategory) parseString(MessageSignificanceCategory.builder(), "category", JsonSupport.getJsonValue(jsonObject, "category", JsonString.class), jsonObject.get("_category"), -1));
        JsonArray focusArray = JsonSupport.getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            int index = 0;
            for (JsonValue jsonValue : focusArray) {
                builder.focus(parseMessageDefinitionFocus("focus", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.responseRequired((MessageHeaderResponseRequest) parseString(MessageHeaderResponseRequest.builder(), "responseRequired", JsonSupport.getJsonValue(jsonObject, "responseRequired", JsonString.class), jsonObject.get("_responseRequired"), -1));
        JsonArray allowedResponseArray = JsonSupport.getJsonArray(jsonObject, "allowedResponse");
        if (allowedResponseArray != null) {
            int index = 0;
            for (JsonValue jsonValue : allowedResponseArray) {
                builder.allowedResponse(parseMessageDefinitionAllowedResponse("allowedResponse", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray graphArray = JsonSupport.getJsonArray(jsonObject, "graph", true);
        if (graphArray != null) {
            int index = 0;
            JsonArray _graphArray = jsonObject.getJsonArray("_graph");
            for (JsonValue jsonValue : graphArray) {
                builder.graph((Canonical) parseUri(Canonical.builder(), "graph", jsonValue, JsonSupport.getJsonValue(_graphArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MessageDefinition.AllowedResponse parseMessageDefinitionAllowedResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageDefinition.AllowedResponse", jsonObject);
        Canonical message = (Canonical) parseUri(Canonical.builder(), "message", JsonSupport.getJsonValue(jsonObject, "message", JsonString.class), jsonObject.get("_message"), -1);
        MessageDefinition.AllowedResponse.Builder builder = MessageDefinition.AllowedResponse.builder(message);
        parseBackboneElement(builder, jsonObject);
        builder.situation((Markdown) parseString(Markdown.builder(), "situation", JsonSupport.getJsonValue(jsonObject, "situation", JsonString.class), jsonObject.get("_situation"), -1));
        stackPop();
        return builder.build();
    }

    protected MessageDefinition.Focus parseMessageDefinitionFocus(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageDefinition.Focus", jsonObject);
        ResourceType code = (ResourceType) parseString(ResourceType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        UnsignedInt min = (UnsignedInt) parseInteger(UnsignedInt.builder(), "min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1);
        MessageDefinition.Focus.Builder builder = MessageDefinition.Focus.builder(code, min);
        parseBackboneElement(builder, jsonObject);
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        builder.max(parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        stackPop();
        return builder.build();
    }

    protected MessageHeader parseMessageHeader(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageHeader", jsonObject);
        Element event = parseChoiceElement("event", jsonObject, "Coding", "Uri");
        MessageHeader.Source source = parseMessageHeaderSource("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1);
        MessageHeader.Builder builder = MessageHeader.builder(event, source);
        parseDomainResource(builder, jsonObject);
        JsonArray destinationArray = JsonSupport.getJsonArray(jsonObject, "destination");
        if (destinationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : destinationArray) {
                builder.destination(parseMessageHeaderDestination("destination", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.sender(parseReference("sender", JsonSupport.getJsonValue(jsonObject, "sender", JsonObject.class), -1));
        builder.enterer(parseReference("enterer", JsonSupport.getJsonValue(jsonObject, "enterer", JsonObject.class), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.responsible(parseReference("responsible", JsonSupport.getJsonValue(jsonObject, "responsible", JsonObject.class), -1));
        builder.reason(parseCodeableConcept("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonObject.class), -1));
        builder.response(parseMessageHeaderResponse("response", JsonSupport.getJsonValue(jsonObject, "response", JsonObject.class), -1));
        JsonArray focusArray = JsonSupport.getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            int index = 0;
            for (JsonValue jsonValue : focusArray) {
                builder.focus(parseReference("focus", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.definition((Canonical) parseUri(Canonical.builder(), "definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        stackPop();
        return builder.build();
    }

    protected MessageHeader.Destination parseMessageHeaderDestination(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageHeader.Destination", jsonObject);
        Url endpoint = (Url) parseUri(Url.builder(), "endpoint", JsonSupport.getJsonValue(jsonObject, "endpoint", JsonString.class), jsonObject.get("_endpoint"), -1);
        MessageHeader.Destination.Builder builder = MessageHeader.Destination.builder(endpoint);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.target(parseReference("target", JsonSupport.getJsonValue(jsonObject, "target", JsonObject.class), -1));
        builder.receiver(parseReference("receiver", JsonSupport.getJsonValue(jsonObject, "receiver", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MessageHeader.Response parseMessageHeaderResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageHeader.Response", jsonObject);
        Id identifier = (Id) parseString(Id.builder(), "identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonString.class), jsonObject.get("_identifier"), -1);
        ResponseType code = (ResponseType) parseString(ResponseType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        MessageHeader.Response.Builder builder = MessageHeader.Response.builder(identifier, code);
        parseBackboneElement(builder, jsonObject);
        builder.details(parseReference("details", JsonSupport.getJsonValue(jsonObject, "details", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MessageHeader.Source parseMessageHeaderSource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MessageHeader.Source", jsonObject);
        Url endpoint = (Url) parseUri(Url.builder(), "endpoint", JsonSupport.getJsonValue(jsonObject, "endpoint", JsonString.class), jsonObject.get("_endpoint"), -1);
        MessageHeader.Source.Builder builder = MessageHeader.Source.builder(endpoint);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.software(parseString("software", JsonSupport.getJsonValue(jsonObject, "software", JsonString.class), jsonObject.get("_software"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.contact(parseContactPoint("contact", JsonSupport.getJsonValue(jsonObject, "contact", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Meta parseMeta(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Meta", jsonObject);
        Meta.Builder builder = Meta.builder();
        parseElement(builder, jsonObject);
        builder.versionId((Id) parseString(Id.builder(), "versionId", JsonSupport.getJsonValue(jsonObject, "versionId", JsonString.class), jsonObject.get("_versionId"), -1));
        builder.lastUpdated(parseInstant("lastUpdated", JsonSupport.getJsonValue(jsonObject, "lastUpdated", JsonString.class), jsonObject.get("_lastUpdated"), -1));
        builder.source(parseUri("source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1));
        JsonArray profileArray = JsonSupport.getJsonArray(jsonObject, "profile", true);
        if (profileArray != null) {
            int index = 0;
            JsonArray _profileArray = jsonObject.getJsonArray("_profile");
            for (JsonValue jsonValue : profileArray) {
                builder.profile((Canonical) parseUri(Canonical.builder(), "profile", jsonValue, JsonSupport.getJsonValue(_profileArray, index), index));
                index++;
            }
        }
        JsonArray securityArray = JsonSupport.getJsonArray(jsonObject, "security");
        if (securityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : securityArray) {
                builder.security(parseCoding("security", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray tagArray = JsonSupport.getJsonArray(jsonObject, "tag");
        if (tagArray != null) {
            int index = 0;
            for (JsonValue jsonValue : tagArray) {
                builder.tag(parseCoding("tag", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MetadataResource parseMetadataResource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MetadataResource", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        MetadataResource.Builder builder = MetadataResource.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MolecularSequence parseMolecularSequence(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence", jsonObject);
        Integer coordinateSystem = parseInteger("coordinateSystem", JsonSupport.getJsonValue(jsonObject, "coordinateSystem", JsonNumber.class), jsonObject.get("_coordinateSystem"), -1);
        MolecularSequence.Builder builder = MolecularSequence.builder(coordinateSystem);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type((SequenceType) parseString(SequenceType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.patient(parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.specimen(parseReference("specimen", JsonSupport.getJsonValue(jsonObject, "specimen", JsonObject.class), -1));
        builder.device(parseReference("device", JsonSupport.getJsonValue(jsonObject, "device", JsonObject.class), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        builder.quantity(parseQuantity("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.referenceSeq(parseMolecularSequenceReferenceSeq("referenceSeq", JsonSupport.getJsonValue(jsonObject, "referenceSeq", JsonObject.class), -1));
        JsonArray variantArray = JsonSupport.getJsonArray(jsonObject, "variant");
        if (variantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : variantArray) {
                builder.variant(parseMolecularSequenceVariant("variant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.observedSeq(parseString("observedSeq", JsonSupport.getJsonValue(jsonObject, "observedSeq", JsonString.class), jsonObject.get("_observedSeq"), -1));
        JsonArray qualityArray = JsonSupport.getJsonArray(jsonObject, "quality");
        if (qualityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : qualityArray) {
                builder.quality(parseMolecularSequenceQuality("quality", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.readCoverage(parseInteger("readCoverage", JsonSupport.getJsonValue(jsonObject, "readCoverage", JsonNumber.class), jsonObject.get("_readCoverage"), -1));
        JsonArray repositoryArray = JsonSupport.getJsonArray(jsonObject, "repository");
        if (repositoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : repositoryArray) {
                builder.repository(parseMolecularSequenceRepository("repository", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray pointerArray = JsonSupport.getJsonArray(jsonObject, "pointer");
        if (pointerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : pointerArray) {
                builder.pointer(parseReference("pointer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray structureVariantArray = JsonSupport.getJsonArray(jsonObject, "structureVariant");
        if (structureVariantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : structureVariantArray) {
                builder.structureVariant(parseMolecularSequenceStructureVariant("structureVariant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.Quality parseMolecularSequenceQuality(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.Quality", jsonObject);
        QualityType type = (QualityType) parseString(QualityType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        MolecularSequence.Quality.Builder builder = MolecularSequence.Quality.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.standardSequence(parseCodeableConcept("standardSequence", JsonSupport.getJsonValue(jsonObject, "standardSequence", JsonObject.class), -1));
        builder.start(parseInteger("start", JsonSupport.getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", JsonSupport.getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        builder.score(parseQuantity("score", JsonSupport.getJsonValue(jsonObject, "score", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.truthTP(parseDecimal("truthTP", JsonSupport.getJsonValue(jsonObject, "truthTP", JsonNumber.class), jsonObject.get("_truthTP"), -1));
        builder.queryTP(parseDecimal("queryTP", JsonSupport.getJsonValue(jsonObject, "queryTP", JsonNumber.class), jsonObject.get("_queryTP"), -1));
        builder.truthFN(parseDecimal("truthFN", JsonSupport.getJsonValue(jsonObject, "truthFN", JsonNumber.class), jsonObject.get("_truthFN"), -1));
        builder.queryFP(parseDecimal("queryFP", JsonSupport.getJsonValue(jsonObject, "queryFP", JsonNumber.class), jsonObject.get("_queryFP"), -1));
        builder.gtFP(parseDecimal("gtFP", JsonSupport.getJsonValue(jsonObject, "gtFP", JsonNumber.class), jsonObject.get("_gtFP"), -1));
        builder.precision(parseDecimal("precision", JsonSupport.getJsonValue(jsonObject, "precision", JsonNumber.class), jsonObject.get("_precision"), -1));
        builder.recall(parseDecimal("recall", JsonSupport.getJsonValue(jsonObject, "recall", JsonNumber.class), jsonObject.get("_recall"), -1));
        builder.fScore(parseDecimal("fScore", JsonSupport.getJsonValue(jsonObject, "fScore", JsonNumber.class), jsonObject.get("_fScore"), -1));
        builder.roc(parseMolecularSequenceQualityRoc("roc", JsonSupport.getJsonValue(jsonObject, "roc", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.Quality.Roc parseMolecularSequenceQualityRoc(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.Quality.Roc", jsonObject);
        MolecularSequence.Quality.Roc.Builder builder = MolecularSequence.Quality.Roc.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray scoreArray = JsonSupport.getJsonArray(jsonObject, "score", true);
        if (scoreArray != null) {
            int index = 0;
            JsonArray _scoreArray = jsonObject.getJsonArray("_score");
            for (JsonValue jsonValue : scoreArray) {
                builder.score(parseInteger("score", jsonValue, JsonSupport.getJsonValue(_scoreArray, index), index));
                index++;
            }
        }
        JsonArray numTPArray = JsonSupport.getJsonArray(jsonObject, "numTP", true);
        if (numTPArray != null) {
            int index = 0;
            JsonArray _numTPArray = jsonObject.getJsonArray("_numTP");
            for (JsonValue jsonValue : numTPArray) {
                builder.numTP(parseInteger("numTP", jsonValue, JsonSupport.getJsonValue(_numTPArray, index), index));
                index++;
            }
        }
        JsonArray numFPArray = JsonSupport.getJsonArray(jsonObject, "numFP", true);
        if (numFPArray != null) {
            int index = 0;
            JsonArray _numFPArray = jsonObject.getJsonArray("_numFP");
            for (JsonValue jsonValue : numFPArray) {
                builder.numFP(parseInteger("numFP", jsonValue, JsonSupport.getJsonValue(_numFPArray, index), index));
                index++;
            }
        }
        JsonArray numFNArray = JsonSupport.getJsonArray(jsonObject, "numFN", true);
        if (numFNArray != null) {
            int index = 0;
            JsonArray _numFNArray = jsonObject.getJsonArray("_numFN");
            for (JsonValue jsonValue : numFNArray) {
                builder.numFN(parseInteger("numFN", jsonValue, JsonSupport.getJsonValue(_numFNArray, index), index));
                index++;
            }
        }
        JsonArray precisionArray = JsonSupport.getJsonArray(jsonObject, "precision", true);
        if (precisionArray != null) {
            int index = 0;
            JsonArray _precisionArray = jsonObject.getJsonArray("_precision");
            for (JsonValue jsonValue : precisionArray) {
                builder.precision(parseDecimal("precision", jsonValue, JsonSupport.getJsonValue(_precisionArray, index), index));
                index++;
            }
        }
        JsonArray sensitivityArray = JsonSupport.getJsonArray(jsonObject, "sensitivity", true);
        if (sensitivityArray != null) {
            int index = 0;
            JsonArray _sensitivityArray = jsonObject.getJsonArray("_sensitivity");
            for (JsonValue jsonValue : sensitivityArray) {
                builder.sensitivity(parseDecimal("sensitivity", jsonValue, JsonSupport.getJsonValue(_sensitivityArray, index), index));
                index++;
            }
        }
        JsonArray fMeasureArray = JsonSupport.getJsonArray(jsonObject, "fMeasure", true);
        if (fMeasureArray != null) {
            int index = 0;
            JsonArray _fMeasureArray = jsonObject.getJsonArray("_fMeasure");
            for (JsonValue jsonValue : fMeasureArray) {
                builder.fMeasure(parseDecimal("fMeasure", jsonValue, JsonSupport.getJsonValue(_fMeasureArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.ReferenceSeq parseMolecularSequenceReferenceSeq(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.ReferenceSeq", jsonObject);
        MolecularSequence.ReferenceSeq.Builder builder = MolecularSequence.ReferenceSeq.builder();
        parseBackboneElement(builder, jsonObject);
        builder.chromosome(parseCodeableConcept("chromosome", JsonSupport.getJsonValue(jsonObject, "chromosome", JsonObject.class), -1));
        builder.genomeBuild(parseString("genomeBuild", JsonSupport.getJsonValue(jsonObject, "genomeBuild", JsonString.class), jsonObject.get("_genomeBuild"), -1));
        builder.orientation((OrientationType) parseString(OrientationType.builder(), "orientation", JsonSupport.getJsonValue(jsonObject, "orientation", JsonString.class), jsonObject.get("_orientation"), -1));
        builder.referenceSeqId(parseCodeableConcept("referenceSeqId", JsonSupport.getJsonValue(jsonObject, "referenceSeqId", JsonObject.class), -1));
        builder.referenceSeqPointer(parseReference("referenceSeqPointer", JsonSupport.getJsonValue(jsonObject, "referenceSeqPointer", JsonObject.class), -1));
        builder.referenceSeqString(parseString("referenceSeqString", JsonSupport.getJsonValue(jsonObject, "referenceSeqString", JsonString.class), jsonObject.get("_referenceSeqString"), -1));
        builder.strand((StrandType) parseString(StrandType.builder(), "strand", JsonSupport.getJsonValue(jsonObject, "strand", JsonString.class), jsonObject.get("_strand"), -1));
        builder.windowStart(parseInteger("windowStart", JsonSupport.getJsonValue(jsonObject, "windowStart", JsonNumber.class), jsonObject.get("_windowStart"), -1));
        builder.windowEnd(parseInteger("windowEnd", JsonSupport.getJsonValue(jsonObject, "windowEnd", JsonNumber.class), jsonObject.get("_windowEnd"), -1));
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.Repository parseMolecularSequenceRepository(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.Repository", jsonObject);
        RepositoryType type = (RepositoryType) parseString(RepositoryType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        MolecularSequence.Repository.Builder builder = MolecularSequence.Repository.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.datasetId(parseString("datasetId", JsonSupport.getJsonValue(jsonObject, "datasetId", JsonString.class), jsonObject.get("_datasetId"), -1));
        builder.variantsetId(parseString("variantsetId", JsonSupport.getJsonValue(jsonObject, "variantsetId", JsonString.class), jsonObject.get("_variantsetId"), -1));
        builder.readsetId(parseString("readsetId", JsonSupport.getJsonValue(jsonObject, "readsetId", JsonString.class), jsonObject.get("_readsetId"), -1));
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.StructureVariant parseMolecularSequenceStructureVariant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.StructureVariant", jsonObject);
        MolecularSequence.StructureVariant.Builder builder = MolecularSequence.StructureVariant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.variantType(parseCodeableConcept("variantType", JsonSupport.getJsonValue(jsonObject, "variantType", JsonObject.class), -1));
        builder.exact(parseBoolean("exact", JsonSupport.getJsonValue(jsonObject, "exact", JsonValue.class), jsonObject.get("_exact"), -1));
        builder.length(parseInteger("length", JsonSupport.getJsonValue(jsonObject, "length", JsonNumber.class), jsonObject.get("_length"), -1));
        builder.outer(parseMolecularSequenceStructureVariantOuter("outer", JsonSupport.getJsonValue(jsonObject, "outer", JsonObject.class), -1));
        builder.inner(parseMolecularSequenceStructureVariantInner("inner", JsonSupport.getJsonValue(jsonObject, "inner", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.StructureVariant.Inner parseMolecularSequenceStructureVariantInner(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.StructureVariant.Inner", jsonObject);
        MolecularSequence.StructureVariant.Inner.Builder builder = MolecularSequence.StructureVariant.Inner.builder();
        parseBackboneElement(builder, jsonObject);
        builder.start(parseInteger("start", JsonSupport.getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", JsonSupport.getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.StructureVariant.Outer parseMolecularSequenceStructureVariantOuter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.StructureVariant.Outer", jsonObject);
        MolecularSequence.StructureVariant.Outer.Builder builder = MolecularSequence.StructureVariant.Outer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.start(parseInteger("start", JsonSupport.getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", JsonSupport.getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    protected MolecularSequence.Variant parseMolecularSequenceVariant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("MolecularSequence.Variant", jsonObject);
        MolecularSequence.Variant.Builder builder = MolecularSequence.Variant.builder();
        parseBackboneElement(builder, jsonObject);
        builder.start(parseInteger("start", JsonSupport.getJsonValue(jsonObject, "start", JsonNumber.class), jsonObject.get("_start"), -1));
        builder.end(parseInteger("end", JsonSupport.getJsonValue(jsonObject, "end", JsonNumber.class), jsonObject.get("_end"), -1));
        builder.observedAllele(parseString("observedAllele", JsonSupport.getJsonValue(jsonObject, "observedAllele", JsonString.class), jsonObject.get("_observedAllele"), -1));
        builder.referenceAllele(parseString("referenceAllele", JsonSupport.getJsonValue(jsonObject, "referenceAllele", JsonString.class), jsonObject.get("_referenceAllele"), -1));
        builder.cigar(parseString("cigar", JsonSupport.getJsonValue(jsonObject, "cigar", JsonString.class), jsonObject.get("_cigar"), -1));
        builder.variantPointer(parseReference("variantPointer", JsonSupport.getJsonValue(jsonObject, "variantPointer", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Money parseMoney(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Money", jsonObject);
        Money.Builder builder = Money.builder();
        parseElement(builder, jsonObject);
        builder.value(parseDecimal("value", JsonSupport.getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.currency((Code) parseString(Code.builder(), "currency", JsonSupport.getJsonValue(jsonObject, "currency", JsonString.class), jsonObject.get("_currency"), -1));
        stackPop();
        return builder.build();
    }

    protected NamingSystem parseNamingSystem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NamingSystem", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        NamingSystemType kind = (NamingSystemType) parseString(NamingSystemType.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        DateTime date = parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        java.util.List<NamingSystem.UniqueId> uniqueId = new ArrayList<>();
        JsonArray uniqueIdArray = JsonSupport.getJsonArray(jsonObject, "uniqueId");
        if (uniqueIdArray != null) {
            int index = 0;
            for (JsonValue jsonValue : uniqueIdArray) {
                uniqueId.add(parseNamingSystemUniqueId("uniqueId", (JsonObject) jsonValue, index));
                index++;
            }
        }
        NamingSystem.Builder builder = NamingSystem.builder(name, status, kind, date, uniqueId);
        parseDomainResource(builder, jsonObject);
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.responsible(parseString("responsible", JsonSupport.getJsonValue(jsonObject, "responsible", JsonString.class), jsonObject.get("_responsible"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        stackPop();
        return builder.build();
    }

    protected NamingSystem.UniqueId parseNamingSystemUniqueId(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NamingSystem.UniqueId", jsonObject);
        NamingSystemIdentifierType type = (NamingSystemIdentifierType) parseString(NamingSystemIdentifierType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        NamingSystem.UniqueId.Builder builder = NamingSystem.UniqueId.builder(type, value);
        parseBackboneElement(builder, jsonObject);
        builder.preferred(parseBoolean("preferred", JsonSupport.getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Narrative parseNarrative(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Narrative", jsonObject);
        NarrativeStatus status = (NarrativeStatus) parseString(NarrativeStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.lang.String div = parseJavaString("div", JsonSupport.getJsonValue(jsonObject, "div", JsonString.class), -1);
        Narrative.Builder builder = Narrative.builder(status, div);
        parseElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected NutritionOrder parseNutritionOrder(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder", jsonObject);
        NutritionOrderStatus status = (NutritionOrderStatus) parseString(NutritionOrderStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        NutritionOrderIntent intent = (NutritionOrderIntent) parseString(NutritionOrderIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime dateTime = parseDateTime("dateTime", JsonSupport.getJsonValue(jsonObject, "dateTime", JsonString.class), jsonObject.get("_dateTime"), -1);
        NutritionOrder.Builder builder = NutritionOrder.builder(status, intent, patient, dateTime);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesArray = JsonSupport.getJsonArray(jsonObject, "instantiates", true);
        if (instantiatesArray != null) {
            int index = 0;
            JsonArray _instantiatesArray = jsonObject.getJsonArray("_instantiates");
            for (JsonValue jsonValue : instantiatesArray) {
                builder.instantiates(parseUri("instantiates", jsonValue, JsonSupport.getJsonValue(_instantiatesArray, index), index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.orderer(parseReference("orderer", JsonSupport.getJsonValue(jsonObject, "orderer", JsonObject.class), -1));
        JsonArray allergyIntoleranceArray = JsonSupport.getJsonArray(jsonObject, "allergyIntolerance");
        if (allergyIntoleranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : allergyIntoleranceArray) {
                builder.allergyIntolerance(parseReference("allergyIntolerance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray foodPreferenceModifierArray = JsonSupport.getJsonArray(jsonObject, "foodPreferenceModifier");
        if (foodPreferenceModifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : foodPreferenceModifierArray) {
                builder.foodPreferenceModifier(parseCodeableConcept("foodPreferenceModifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray excludeFoodModifierArray = JsonSupport.getJsonArray(jsonObject, "excludeFoodModifier");
        if (excludeFoodModifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : excludeFoodModifierArray) {
                builder.excludeFoodModifier(parseCodeableConcept("excludeFoodModifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.oralDiet(parseNutritionOrderOralDiet("oralDiet", JsonSupport.getJsonValue(jsonObject, "oralDiet", JsonObject.class), -1));
        JsonArray supplementArray = JsonSupport.getJsonArray(jsonObject, "supplement");
        if (supplementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supplementArray) {
                builder.supplement(parseNutritionOrderSupplement("supplement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.enteralFormula(parseNutritionOrderEnteralFormula("enteralFormula", JsonSupport.getJsonValue(jsonObject, "enteralFormula", JsonObject.class), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected NutritionOrder.EnteralFormula parseNutritionOrderEnteralFormula(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder.EnteralFormula", jsonObject);
        NutritionOrder.EnteralFormula.Builder builder = NutritionOrder.EnteralFormula.builder();
        parseBackboneElement(builder, jsonObject);
        builder.baseFormulaType(parseCodeableConcept("baseFormulaType", JsonSupport.getJsonValue(jsonObject, "baseFormulaType", JsonObject.class), -1));
        builder.baseFormulaProductName(parseString("baseFormulaProductName", JsonSupport.getJsonValue(jsonObject, "baseFormulaProductName", JsonString.class), jsonObject.get("_baseFormulaProductName"), -1));
        builder.additiveType(parseCodeableConcept("additiveType", JsonSupport.getJsonValue(jsonObject, "additiveType", JsonObject.class), -1));
        builder.additiveProductName(parseString("additiveProductName", JsonSupport.getJsonValue(jsonObject, "additiveProductName", JsonString.class), jsonObject.get("_additiveProductName"), -1));
        builder.caloricDensity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "caloricDensity", JsonSupport.getJsonValue(jsonObject, "caloricDensity", JsonObject.class), -1));
        builder.routeofAdministration(parseCodeableConcept("routeofAdministration", JsonSupport.getJsonValue(jsonObject, "routeofAdministration", JsonObject.class), -1));
        JsonArray administrationArray = JsonSupport.getJsonArray(jsonObject, "administration");
        if (administrationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : administrationArray) {
                builder.administration(parseNutritionOrderEnteralFormulaAdministration("administration", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.maxVolumeToDeliver((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxVolumeToDeliver", JsonSupport.getJsonValue(jsonObject, "maxVolumeToDeliver", JsonObject.class), -1));
        builder.administrationInstruction(parseString("administrationInstruction", JsonSupport.getJsonValue(jsonObject, "administrationInstruction", JsonString.class), jsonObject.get("_administrationInstruction"), -1));
        stackPop();
        return builder.build();
    }

    protected NutritionOrder.EnteralFormula.Administration parseNutritionOrderEnteralFormulaAdministration(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder.EnteralFormula.Administration", jsonObject);
        NutritionOrder.EnteralFormula.Administration.Builder builder = NutritionOrder.EnteralFormula.Administration.builder();
        parseBackboneElement(builder, jsonObject);
        builder.schedule(parseTiming("schedule", JsonSupport.getJsonValue(jsonObject, "schedule", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.rate(parseChoiceElement("rate", jsonObject, "SimpleQuantity", "Ratio"));
        stackPop();
        return builder.build();
    }

    protected NutritionOrder.OralDiet parseNutritionOrderOralDiet(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder.OralDiet", jsonObject);
        NutritionOrder.OralDiet.Builder builder = NutritionOrder.OralDiet.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray scheduleArray = JsonSupport.getJsonArray(jsonObject, "schedule");
        if (scheduleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : scheduleArray) {
                builder.schedule(parseTiming("schedule", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray nutrientArray = JsonSupport.getJsonArray(jsonObject, "nutrient");
        if (nutrientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nutrientArray) {
                builder.nutrient(parseNutritionOrderOralDietNutrient("nutrient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray textureArray = JsonSupport.getJsonArray(jsonObject, "texture");
        if (textureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : textureArray) {
                builder.texture(parseNutritionOrderOralDietTexture("texture", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray fluidConsistencyTypeArray = JsonSupport.getJsonArray(jsonObject, "fluidConsistencyType");
        if (fluidConsistencyTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : fluidConsistencyTypeArray) {
                builder.fluidConsistencyType(parseCodeableConcept("fluidConsistencyType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.instruction(parseString("instruction", JsonSupport.getJsonValue(jsonObject, "instruction", JsonString.class), jsonObject.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    protected NutritionOrder.OralDiet.Nutrient parseNutritionOrderOralDietNutrient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder.OralDiet.Nutrient", jsonObject);
        NutritionOrder.OralDiet.Nutrient.Builder builder = NutritionOrder.OralDiet.Nutrient.builder();
        parseBackboneElement(builder, jsonObject);
        builder.modifier(parseCodeableConcept("modifier", JsonSupport.getJsonValue(jsonObject, "modifier", JsonObject.class), -1));
        builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected NutritionOrder.OralDiet.Texture parseNutritionOrderOralDietTexture(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder.OralDiet.Texture", jsonObject);
        NutritionOrder.OralDiet.Texture.Builder builder = NutritionOrder.OralDiet.Texture.builder();
        parseBackboneElement(builder, jsonObject);
        builder.modifier(parseCodeableConcept("modifier", JsonSupport.getJsonValue(jsonObject, "modifier", JsonObject.class), -1));
        builder.foodType(parseCodeableConcept("foodType", JsonSupport.getJsonValue(jsonObject, "foodType", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected NutritionOrder.Supplement parseNutritionOrderSupplement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("NutritionOrder.Supplement", jsonObject);
        NutritionOrder.Supplement.Builder builder = NutritionOrder.Supplement.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.productName(parseString("productName", JsonSupport.getJsonValue(jsonObject, "productName", JsonString.class), jsonObject.get("_productName"), -1));
        JsonArray scheduleArray = JsonSupport.getJsonArray(jsonObject, "schedule");
        if (scheduleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : scheduleArray) {
                builder.schedule(parseTiming("schedule", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.instruction(parseString("instruction", JsonSupport.getJsonValue(jsonObject, "instruction", JsonString.class), jsonObject.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    protected Observation parseObservation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Observation", jsonObject);
        ObservationStatus status = (ObservationStatus) parseString(ObservationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Observation.Builder builder = Observation.builder(status, code);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        JsonArray focusArray = JsonSupport.getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            int index = 0;
            for (JsonValue jsonValue : focusArray) {
                builder.focus(parseReference("focus", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.effective(parseChoiceElement("effective", jsonObject, "DateTime", "Period", "Timing", "Instant"));
        builder.issued(parseInstant("issued", JsonSupport.getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseReference("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.value(parseChoiceElement("value", jsonObject, "Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Ratio", "SampledData", "Time", "DateTime", "Period"));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", JsonSupport.getJsonValue(jsonObject, "dataAbsentReason", JsonObject.class), -1));
        JsonArray interpretationArray = JsonSupport.getJsonArray(jsonObject, "interpretation");
        if (interpretationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : interpretationArray) {
                builder.interpretation(parseCodeableConcept("interpretation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.specimen(parseReference("specimen", JsonSupport.getJsonValue(jsonObject, "specimen", JsonObject.class), -1));
        builder.device(parseReference("device", JsonSupport.getJsonValue(jsonObject, "device", JsonObject.class), -1));
        JsonArray referenceRangeArray = JsonSupport.getJsonArray(jsonObject, "referenceRange");
        if (referenceRangeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceRangeArray) {
                builder.referenceRange(parseObservationReferenceRange("referenceRange", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray hasMemberArray = JsonSupport.getJsonArray(jsonObject, "hasMember");
        if (hasMemberArray != null) {
            int index = 0;
            for (JsonValue jsonValue : hasMemberArray) {
                builder.hasMember(parseReference("hasMember", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray derivedFromArray = JsonSupport.getJsonArray(jsonObject, "derivedFrom");
        if (derivedFromArray != null) {
            int index = 0;
            for (JsonValue jsonValue : derivedFromArray) {
                builder.derivedFrom(parseReference("derivedFrom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray componentArray = JsonSupport.getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : componentArray) {
                builder.component(parseObservationComponent("component", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Observation.Component parseObservationComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Observation.Component", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Observation.Component.Builder builder = Observation.Component.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, "Quantity", "CodeableConcept", "String", "Boolean", "Integer", "Range", "Ratio", "SampledData", "Time", "DateTime", "Period"));
        builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", JsonSupport.getJsonValue(jsonObject, "dataAbsentReason", JsonObject.class), -1));
        JsonArray interpretationArray = JsonSupport.getJsonArray(jsonObject, "interpretation");
        if (interpretationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : interpretationArray) {
                builder.interpretation(parseCodeableConcept("interpretation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray referenceRangeArray = JsonSupport.getJsonArray(jsonObject, "referenceRange");
        if (referenceRangeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referenceRangeArray) {
                builder.referenceRange(parseObservationReferenceRange("referenceRange", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Observation.ReferenceRange parseObservationReferenceRange(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Observation.ReferenceRange", jsonObject);
        Observation.ReferenceRange.Builder builder = Observation.ReferenceRange.builder();
        parseBackboneElement(builder, jsonObject);
        builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", JsonSupport.getJsonValue(jsonObject, "low", JsonObject.class), -1));
        builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", JsonSupport.getJsonValue(jsonObject, "high", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray appliesToArray = JsonSupport.getJsonArray(jsonObject, "appliesTo");
        if (appliesToArray != null) {
            int index = 0;
            for (JsonValue jsonValue : appliesToArray) {
                builder.appliesTo(parseCodeableConcept("appliesTo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.age(parseRange("age", JsonSupport.getJsonValue(jsonObject, "age", JsonObject.class), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    protected ObservationDefinition parseObservationDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ObservationDefinition", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        ObservationDefinition.Builder builder = ObservationDefinition.builder(code);
        parseDomainResource(builder, jsonObject);
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray permittedDataTypeArray = JsonSupport.getJsonArray(jsonObject, "permittedDataType", true);
        if (permittedDataTypeArray != null) {
            int index = 0;
            JsonArray _permittedDataTypeArray = jsonObject.getJsonArray("_permittedDataType");
            for (JsonValue jsonValue : permittedDataTypeArray) {
                builder.permittedDataType((ObservationDataType) parseString(ObservationDataType.builder(), "permittedDataType", jsonValue, JsonSupport.getJsonValue(_permittedDataTypeArray, index), index));
                index++;
            }
        }
        builder.multipleResultsAllowed(parseBoolean("multipleResultsAllowed", JsonSupport.getJsonValue(jsonObject, "multipleResultsAllowed", JsonValue.class), jsonObject.get("_multipleResultsAllowed"), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.preferredReportName(parseString("preferredReportName", JsonSupport.getJsonValue(jsonObject, "preferredReportName", JsonString.class), jsonObject.get("_preferredReportName"), -1));
        builder.quantitativeDetails(parseObservationDefinitionQuantitativeDetails("quantitativeDetails", JsonSupport.getJsonValue(jsonObject, "quantitativeDetails", JsonObject.class), -1));
        JsonArray qualifiedIntervalArray = JsonSupport.getJsonArray(jsonObject, "qualifiedInterval");
        if (qualifiedIntervalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : qualifiedIntervalArray) {
                builder.qualifiedInterval(parseObservationDefinitionQualifiedInterval("qualifiedInterval", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.validCodedValueSet(parseReference("validCodedValueSet", JsonSupport.getJsonValue(jsonObject, "validCodedValueSet", JsonObject.class), -1));
        builder.normalCodedValueSet(parseReference("normalCodedValueSet", JsonSupport.getJsonValue(jsonObject, "normalCodedValueSet", JsonObject.class), -1));
        builder.abnormalCodedValueSet(parseReference("abnormalCodedValueSet", JsonSupport.getJsonValue(jsonObject, "abnormalCodedValueSet", JsonObject.class), -1));
        builder.criticalCodedValueSet(parseReference("criticalCodedValueSet", JsonSupport.getJsonValue(jsonObject, "criticalCodedValueSet", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ObservationDefinition.QualifiedInterval parseObservationDefinitionQualifiedInterval(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ObservationDefinition.QualifiedInterval", jsonObject);
        ObservationDefinition.QualifiedInterval.Builder builder = ObservationDefinition.QualifiedInterval.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category((ObservationRangeCategory) parseString(ObservationRangeCategory.builder(), "category", JsonSupport.getJsonValue(jsonObject, "category", JsonString.class), jsonObject.get("_category"), -1));
        builder.range(parseRange("range", JsonSupport.getJsonValue(jsonObject, "range", JsonObject.class), -1));
        builder.context(parseCodeableConcept("context", JsonSupport.getJsonValue(jsonObject, "context", JsonObject.class), -1));
        JsonArray appliesToArray = JsonSupport.getJsonArray(jsonObject, "appliesTo");
        if (appliesToArray != null) {
            int index = 0;
            for (JsonValue jsonValue : appliesToArray) {
                builder.appliesTo(parseCodeableConcept("appliesTo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.age(parseRange("age", JsonSupport.getJsonValue(jsonObject, "age", JsonObject.class), -1));
        builder.gestationalAge(parseRange("gestationalAge", JsonSupport.getJsonValue(jsonObject, "gestationalAge", JsonObject.class), -1));
        builder.condition(parseString("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonString.class), jsonObject.get("_condition"), -1));
        stackPop();
        return builder.build();
    }

    protected ObservationDefinition.QuantitativeDetails parseObservationDefinitionQuantitativeDetails(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ObservationDefinition.QuantitativeDetails", jsonObject);
        ObservationDefinition.QuantitativeDetails.Builder builder = ObservationDefinition.QuantitativeDetails.builder();
        parseBackboneElement(builder, jsonObject);
        builder.customaryUnit(parseCodeableConcept("customaryUnit", JsonSupport.getJsonValue(jsonObject, "customaryUnit", JsonObject.class), -1));
        builder.unit(parseCodeableConcept("unit", JsonSupport.getJsonValue(jsonObject, "unit", JsonObject.class), -1));
        builder.conversionFactor(parseDecimal("conversionFactor", JsonSupport.getJsonValue(jsonObject, "conversionFactor", JsonNumber.class), jsonObject.get("_conversionFactor"), -1));
        builder.decimalPrecision(parseInteger("decimalPrecision", JsonSupport.getJsonValue(jsonObject, "decimalPrecision", JsonNumber.class), jsonObject.get("_decimalPrecision"), -1));
        stackPop();
        return builder.build();
    }

    protected OperationDefinition parseOperationDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationDefinition", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        OperationKind kind = (OperationKind) parseString(OperationKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        Boolean system = parseBoolean("system", JsonSupport.getJsonValue(jsonObject, "system", JsonValue.class), jsonObject.get("_system"), -1);
        Boolean type = parseBoolean("type", JsonSupport.getJsonValue(jsonObject, "type", JsonValue.class), jsonObject.get("_type"), -1);
        Boolean instance = parseBoolean("instance", JsonSupport.getJsonValue(jsonObject, "instance", JsonValue.class), jsonObject.get("_instance"), -1);
        OperationDefinition.Builder builder = OperationDefinition.builder(name, status, kind, code, system, type, instance);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.affectsState(parseBoolean("affectsState", JsonSupport.getJsonValue(jsonObject, "affectsState", JsonValue.class), jsonObject.get("_affectsState"), -1));
        builder.comment((Markdown) parseString(Markdown.builder(), "comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        builder.base((Canonical) parseUri(Canonical.builder(), "base", JsonSupport.getJsonValue(jsonObject, "base", JsonString.class), jsonObject.get("_base"), -1));
        JsonArray resourceArray = JsonSupport.getJsonArray(jsonObject, "resource", true);
        if (resourceArray != null) {
            int index = 0;
            JsonArray _resourceArray = jsonObject.getJsonArray("_resource");
            for (JsonValue jsonValue : resourceArray) {
                builder.resource((ResourceType) parseString(ResourceType.builder(), "resource", jsonValue, JsonSupport.getJsonValue(_resourceArray, index), index));
                index++;
            }
        }
        builder.inputProfile((Canonical) parseUri(Canonical.builder(), "inputProfile", JsonSupport.getJsonValue(jsonObject, "inputProfile", JsonString.class), jsonObject.get("_inputProfile"), -1));
        builder.outputProfile((Canonical) parseUri(Canonical.builder(), "outputProfile", JsonSupport.getJsonValue(jsonObject, "outputProfile", JsonString.class), jsonObject.get("_outputProfile"), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseOperationDefinitionParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray overloadArray = JsonSupport.getJsonArray(jsonObject, "overload");
        if (overloadArray != null) {
            int index = 0;
            for (JsonValue jsonValue : overloadArray) {
                builder.overload(parseOperationDefinitionOverload("overload", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected OperationDefinition.Overload parseOperationDefinitionOverload(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationDefinition.Overload", jsonObject);
        OperationDefinition.Overload.Builder builder = OperationDefinition.Overload.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray parameterNameArray = JsonSupport.getJsonArray(jsonObject, "parameterName", true);
        if (parameterNameArray != null) {
            int index = 0;
            JsonArray _parameterNameArray = jsonObject.getJsonArray("_parameterName");
            for (JsonValue jsonValue : parameterNameArray) {
                builder.parameterName(parseString("parameterName", jsonValue, JsonSupport.getJsonValue(_parameterNameArray, index), index));
                index++;
            }
        }
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected OperationDefinition.Parameter parseOperationDefinitionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationDefinition.Parameter", jsonObject);
        Code name = (Code) parseString(Code.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        OperationParameterUse use = (OperationParameterUse) parseString(OperationParameterUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1);
        Integer min = parseInteger("min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1);
        String max = parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1);
        OperationDefinition.Parameter.Builder builder = OperationDefinition.Parameter.builder(name, use, min, max);
        parseBackboneElement(builder, jsonObject);
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        JsonArray targetProfileArray = JsonSupport.getJsonArray(jsonObject, "targetProfile", true);
        if (targetProfileArray != null) {
            int index = 0;
            JsonArray _targetProfileArray = jsonObject.getJsonArray("_targetProfile");
            for (JsonValue jsonValue : targetProfileArray) {
                builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", jsonValue, JsonSupport.getJsonValue(_targetProfileArray, index), index));
                index++;
            }
        }
        builder.searchType((SearchParamType) parseString(SearchParamType.builder(), "searchType", JsonSupport.getJsonValue(jsonObject, "searchType", JsonString.class), jsonObject.get("_searchType"), -1));
        builder.binding(parseOperationDefinitionParameterBinding("binding", JsonSupport.getJsonValue(jsonObject, "binding", JsonObject.class), -1));
        JsonArray referencedFromArray = JsonSupport.getJsonArray(jsonObject, "referencedFrom");
        if (referencedFromArray != null) {
            int index = 0;
            for (JsonValue jsonValue : referencedFromArray) {
                builder.referencedFrom(parseOperationDefinitionParameterReferencedFrom("referencedFrom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partArray = JsonSupport.getJsonArray(jsonObject, "part");
        if (partArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partArray) {
                builder.part(parseOperationDefinitionParameter("part", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected OperationDefinition.Parameter.Binding parseOperationDefinitionParameterBinding(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationDefinition.Parameter.Binding", jsonObject);
        BindingStrength strength = (BindingStrength) parseString(BindingStrength.builder(), "strength", JsonSupport.getJsonValue(jsonObject, "strength", JsonString.class), jsonObject.get("_strength"), -1);
        Canonical valueSet = (Canonical) parseUri(Canonical.builder(), "valueSet", JsonSupport.getJsonValue(jsonObject, "valueSet", JsonString.class), jsonObject.get("_valueSet"), -1);
        OperationDefinition.Parameter.Binding.Builder builder = OperationDefinition.Parameter.Binding.builder(strength, valueSet);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected OperationDefinition.Parameter.ReferencedFrom parseOperationDefinitionParameterReferencedFrom(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationDefinition.Parameter.ReferencedFrom", jsonObject);
        String source = parseString("source", JsonSupport.getJsonValue(jsonObject, "source", JsonString.class), jsonObject.get("_source"), -1);
        OperationDefinition.Parameter.ReferencedFrom.Builder builder = OperationDefinition.Parameter.ReferencedFrom.builder(source);
        parseBackboneElement(builder, jsonObject);
        builder.sourceId(parseString("sourceId", JsonSupport.getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        stackPop();
        return builder.build();
    }

    protected OperationOutcome parseOperationOutcome(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationOutcome", jsonObject);
        java.util.List<OperationOutcome.Issue> issue = new ArrayList<>();
        JsonArray issueArray = JsonSupport.getJsonArray(jsonObject, "issue");
        if (issueArray != null) {
            int index = 0;
            for (JsonValue jsonValue : issueArray) {
                issue.add(parseOperationOutcomeIssue("issue", (JsonObject) jsonValue, index));
                index++;
            }
        }
        OperationOutcome.Builder builder = OperationOutcome.builder(issue);
        parseDomainResource(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected OperationOutcome.Issue parseOperationOutcomeIssue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OperationOutcome.Issue", jsonObject);
        IssueSeverity severity = (IssueSeverity) parseString(IssueSeverity.builder(), "severity", JsonSupport.getJsonValue(jsonObject, "severity", JsonString.class), jsonObject.get("_severity"), -1);
        IssueType code = (IssueType) parseString(IssueType.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        OperationOutcome.Issue.Builder builder = OperationOutcome.Issue.builder(severity, code);
        parseBackboneElement(builder, jsonObject);
        builder.details(parseCodeableConcept("details", JsonSupport.getJsonValue(jsonObject, "details", JsonObject.class), -1));
        builder.diagnostics(parseString("diagnostics", JsonSupport.getJsonValue(jsonObject, "diagnostics", JsonString.class), jsonObject.get("_diagnostics"), -1));
        JsonArray locationArray = JsonSupport.getJsonArray(jsonObject, "location", true);
        if (locationArray != null) {
            int index = 0;
            JsonArray _locationArray = jsonObject.getJsonArray("_location");
            for (JsonValue jsonValue : locationArray) {
                builder.location(parseString("location", jsonValue, JsonSupport.getJsonValue(_locationArray, index), index));
                index++;
            }
        }
        JsonArray expressionArray = JsonSupport.getJsonArray(jsonObject, "expression", true);
        if (expressionArray != null) {
            int index = 0;
            JsonArray _expressionArray = jsonObject.getJsonArray("_expression");
            for (JsonValue jsonValue : expressionArray) {
                builder.expression(parseString("expression", jsonValue, JsonSupport.getJsonValue(_expressionArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Organization parseOrganization(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Organization", jsonObject);
        Organization.Builder builder = Organization.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        JsonArray aliasArray = JsonSupport.getJsonArray(jsonObject, "alias", true);
        if (aliasArray != null) {
            int index = 0;
            JsonArray _aliasArray = jsonObject.getJsonArray("_alias");
            for (JsonValue jsonValue : aliasArray) {
                builder.alias(parseString("alias", jsonValue, JsonSupport.getJsonValue(_aliasArray, index), index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray addressArray = JsonSupport.getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressArray) {
                builder.address(parseAddress("address", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.partOf(parseReference("partOf", JsonSupport.getJsonValue(jsonObject, "partOf", JsonObject.class), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseOrganizationContact("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Organization.Contact parseOrganizationContact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Organization.Contact", jsonObject);
        Organization.Contact.Builder builder = Organization.Contact.builder();
        parseBackboneElement(builder, jsonObject);
        builder.purpose(parseCodeableConcept("purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonObject.class), -1));
        builder.name(parseHumanName("name", JsonSupport.getJsonValue(jsonObject, "name", JsonObject.class), -1));
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.address(parseAddress("address", JsonSupport.getJsonValue(jsonObject, "address", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected OrganizationAffiliation parseOrganizationAffiliation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("OrganizationAffiliation", jsonObject);
        OrganizationAffiliation.Builder builder = OrganizationAffiliation.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.organization(parseReference("organization", JsonSupport.getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.participatingOrganization(parseReference("participatingOrganization", JsonSupport.getJsonValue(jsonObject, "participatingOrganization", JsonObject.class), -1));
        JsonArray networkArray = JsonSupport.getJsonArray(jsonObject, "network");
        if (networkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : networkArray) {
                builder.network(parseReference("network", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialtyArray = JsonSupport.getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialtyArray) {
                builder.specialty(parseCodeableConcept("specialty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray locationArray = JsonSupport.getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationArray) {
                builder.location(parseReference("location", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray healthcareServiceArray = JsonSupport.getJsonArray(jsonObject, "healthcareService");
        if (healthcareServiceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : healthcareServiceArray) {
                builder.healthcareService(parseReference("healthcareService", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ParameterDefinition parseParameterDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ParameterDefinition", jsonObject);
        ParameterUse use = (ParameterUse) parseString(ParameterUse.builder(), "use", JsonSupport.getJsonValue(jsonObject, "use", JsonString.class), jsonObject.get("_use"), -1);
        FHIRAllTypes type = (FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        ParameterDefinition.Builder builder = ParameterDefinition.builder(use, type);
        parseElement(builder, jsonObject);
        builder.name((Code) parseString(Code.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.min(parseInteger("min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        builder.profile((Canonical) parseUri(Canonical.builder(), "profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonString.class), jsonObject.get("_profile"), -1));
        stackPop();
        return builder.build();
    }

    protected Parameters parseParameters(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Parameters", jsonObject);
        Parameters.Builder builder = Parameters.builder();
        parseResource(builder, jsonObject);
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseParametersParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Parameters.Parameter parseParametersParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Parameters.Parameter", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        Parameters.Parameter.Builder builder = Parameters.Parameter.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage"));
        builder.resource(parseResource("resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        JsonArray partArray = JsonSupport.getJsonArray(jsonObject, "part");
        if (partArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partArray) {
                builder.part(parseParametersParameter("part", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Patient parsePatient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Patient", jsonObject);
        Patient.Builder builder = Patient.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray nameArray = JsonSupport.getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nameArray) {
                builder.name(parseHumanName("name", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", JsonSupport.getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        builder.deceased(parseChoiceElement("deceased", jsonObject, "Boolean", "DateTime"));
        JsonArray addressArray = JsonSupport.getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressArray) {
                builder.address(parseAddress("address", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.maritalStatus(parseCodeableConcept("maritalStatus", JsonSupport.getJsonValue(jsonObject, "maritalStatus", JsonObject.class), -1));
        builder.multipleBirth(parseChoiceElement("multipleBirth", jsonObject, "Boolean", "Integer"));
        JsonArray photoArray = JsonSupport.getJsonArray(jsonObject, "photo");
        if (photoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : photoArray) {
                builder.photo(parseAttachment("photo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parsePatientContact("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray communicationArray = JsonSupport.getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : communicationArray) {
                builder.communication(parsePatientCommunication("communication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray generalPractitionerArray = JsonSupport.getJsonArray(jsonObject, "generalPractitioner");
        if (generalPractitionerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : generalPractitionerArray) {
                builder.generalPractitioner(parseReference("generalPractitioner", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.managingOrganization(parseReference("managingOrganization", JsonSupport.getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parsePatientLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Patient.Communication parsePatientCommunication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Patient.Communication", jsonObject);
        CodeableConcept language = parseCodeableConcept("language", JsonSupport.getJsonValue(jsonObject, "language", JsonObject.class), -1);
        Patient.Communication.Builder builder = Patient.Communication.builder(language);
        parseBackboneElement(builder, jsonObject);
        builder.preferred(parseBoolean("preferred", JsonSupport.getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        stackPop();
        return builder.build();
    }

    protected Patient.Contact parsePatientContact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Patient.Contact", jsonObject);
        Patient.Contact.Builder builder = Patient.Contact.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray relationshipArray = JsonSupport.getJsonArray(jsonObject, "relationship");
        if (relationshipArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relationshipArray) {
                builder.relationship(parseCodeableConcept("relationship", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.name(parseHumanName("name", JsonSupport.getJsonValue(jsonObject, "name", JsonObject.class), -1));
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.address(parseAddress("address", JsonSupport.getJsonValue(jsonObject, "address", JsonObject.class), -1));
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.organization(parseReference("organization", JsonSupport.getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Patient.Link parsePatientLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Patient.Link", jsonObject);
        Reference other = parseReference("other", JsonSupport.getJsonValue(jsonObject, "other", JsonObject.class), -1);
        LinkType type = (LinkType) parseString(LinkType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Patient.Link.Builder builder = Patient.Link.builder(other, type);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected PaymentNotice parsePaymentNotice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PaymentNotice", jsonObject);
        PaymentNoticeStatus status = (PaymentNoticeStatus) parseString(PaymentNoticeStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference payment = parseReference("payment", JsonSupport.getJsonValue(jsonObject, "payment", JsonObject.class), -1);
        Reference recipient = parseReference("recipient", JsonSupport.getJsonValue(jsonObject, "recipient", JsonObject.class), -1);
        Money amount = parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1);
        PaymentNotice.Builder builder = PaymentNotice.builder(status, created, payment, recipient, amount);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.request(parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.response(parseReference("response", JsonSupport.getJsonValue(jsonObject, "response", JsonObject.class), -1));
        builder.provider(parseReference("provider", JsonSupport.getJsonValue(jsonObject, "provider", JsonObject.class), -1));
        builder.paymentDate(parseDate("paymentDate", JsonSupport.getJsonValue(jsonObject, "paymentDate", JsonString.class), jsonObject.get("_paymentDate"), -1));
        builder.payee(parseReference("payee", JsonSupport.getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.paymentStatus(parseCodeableConcept("paymentStatus", JsonSupport.getJsonValue(jsonObject, "paymentStatus", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected PaymentReconciliation parsePaymentReconciliation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PaymentReconciliation", jsonObject);
        PaymentReconciliationStatus status = (PaymentReconciliationStatus) parseString(PaymentReconciliationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Date paymentDate = parseDate("paymentDate", JsonSupport.getJsonValue(jsonObject, "paymentDate", JsonString.class), jsonObject.get("_paymentDate"), -1);
        Money paymentAmount = parseMoney("paymentAmount", JsonSupport.getJsonValue(jsonObject, "paymentAmount", JsonObject.class), -1);
        PaymentReconciliation.Builder builder = PaymentReconciliation.builder(status, created, paymentDate, paymentAmount);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.paymentIssuer(parseReference("paymentIssuer", JsonSupport.getJsonValue(jsonObject, "paymentIssuer", JsonObject.class), -1));
        builder.request(parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.requestor(parseReference("requestor", JsonSupport.getJsonValue(jsonObject, "requestor", JsonObject.class), -1));
        builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonString.class), jsonObject.get("_outcome"), -1));
        builder.disposition(parseString("disposition", JsonSupport.getJsonValue(jsonObject, "disposition", JsonString.class), jsonObject.get("_disposition"), -1));
        builder.paymentIdentifier(parseIdentifier("paymentIdentifier", JsonSupport.getJsonValue(jsonObject, "paymentIdentifier", JsonObject.class), -1));
        JsonArray detailArray = JsonSupport.getJsonArray(jsonObject, "detail");
        if (detailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : detailArray) {
                builder.detail(parsePaymentReconciliationDetail("detail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.formCode(parseCodeableConcept("formCode", JsonSupport.getJsonValue(jsonObject, "formCode", JsonObject.class), -1));
        JsonArray processNoteArray = JsonSupport.getJsonArray(jsonObject, "processNote");
        if (processNoteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processNoteArray) {
                builder.processNote(parsePaymentReconciliationProcessNote("processNote", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected PaymentReconciliation.Detail parsePaymentReconciliationDetail(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PaymentReconciliation.Detail", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        PaymentReconciliation.Detail.Builder builder = PaymentReconciliation.Detail.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.predecessor(parseIdentifier("predecessor", JsonSupport.getJsonValue(jsonObject, "predecessor", JsonObject.class), -1));
        builder.request(parseReference("request", JsonSupport.getJsonValue(jsonObject, "request", JsonObject.class), -1));
        builder.submitter(parseReference("submitter", JsonSupport.getJsonValue(jsonObject, "submitter", JsonObject.class), -1));
        builder.response(parseReference("response", JsonSupport.getJsonValue(jsonObject, "response", JsonObject.class), -1));
        builder.date(parseDate("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.responsible(parseReference("responsible", JsonSupport.getJsonValue(jsonObject, "responsible", JsonObject.class), -1));
        builder.payee(parseReference("payee", JsonSupport.getJsonValue(jsonObject, "payee", JsonObject.class), -1));
        builder.amount(parseMoney("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected PaymentReconciliation.ProcessNote parsePaymentReconciliationProcessNote(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PaymentReconciliation.ProcessNote", jsonObject);
        PaymentReconciliation.ProcessNote.Builder builder = PaymentReconciliation.ProcessNote.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type((NoteType) parseString(NoteType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        stackPop();
        return builder.build();
    }

    protected Period parsePeriod(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Period", jsonObject);
        Period.Builder builder = Period.builder();
        parseElement(builder, jsonObject);
        builder.start(parseDateTime("start", JsonSupport.getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1));
        builder.end(parseDateTime("end", JsonSupport.getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        stackPop();
        return builder.build();
    }

    protected Person parsePerson(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Person", jsonObject);
        Person.Builder builder = Person.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray nameArray = JsonSupport.getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nameArray) {
                builder.name(parseHumanName("name", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", JsonSupport.getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        JsonArray addressArray = JsonSupport.getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressArray) {
                builder.address(parseAddress("address", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.photo(parseAttachment("photo", JsonSupport.getJsonValue(jsonObject, "photo", JsonObject.class), -1));
        builder.managingOrganization(parseReference("managingOrganization", JsonSupport.getJsonValue(jsonObject, "managingOrganization", JsonObject.class), -1));
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parsePersonLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Person.Link parsePersonLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Person.Link", jsonObject);
        Reference target = parseReference("target", JsonSupport.getJsonValue(jsonObject, "target", JsonObject.class), -1);
        Person.Link.Builder builder = Person.Link.builder(target);
        parseBackboneElement(builder, jsonObject);
        builder.assurance((IdentityAssuranceLevel) parseString(IdentityAssuranceLevel.builder(), "assurance", JsonSupport.getJsonValue(jsonObject, "assurance", JsonString.class), jsonObject.get("_assurance"), -1));
        stackPop();
        return builder.build();
    }

    protected PlanDefinition parsePlanDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        PlanDefinition.Builder builder = PlanDefinition.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray libraryArray = JsonSupport.getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            int index = 0;
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (JsonValue jsonValue : libraryArray) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", jsonValue, JsonSupport.getJsonValue(_libraryArray, index), index));
                index++;
            }
        }
        JsonArray goalArray = JsonSupport.getJsonArray(jsonObject, "goal");
        if (goalArray != null) {
            int index = 0;
            for (JsonValue jsonValue : goalArray) {
                builder.goal(parsePlanDefinitionGoal("goal", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                builder.action(parsePlanDefinitionAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Action parsePlanDefinitionAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Action", jsonObject);
        PlanDefinition.Action.Builder builder = PlanDefinition.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.prefix(parseString("prefix", JsonSupport.getJsonValue(jsonObject, "prefix", JsonString.class), jsonObject.get("_prefix"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.textEquivalent(parseString("textEquivalent", JsonSupport.getJsonValue(jsonObject, "textEquivalent", JsonString.class), jsonObject.get("_textEquivalent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonArray = JsonSupport.getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonArray) {
                builder.reason(parseCodeableConcept("reason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray documentationArray = JsonSupport.getJsonArray(jsonObject, "documentation");
        if (documentationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : documentationArray) {
                builder.documentation(parseRelatedArtifact("documentation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray goalIdArray = JsonSupport.getJsonArray(jsonObject, "goalId", true);
        if (goalIdArray != null) {
            int index = 0;
            JsonArray _goalIdArray = jsonObject.getJsonArray("_goalId");
            for (JsonValue jsonValue : goalIdArray) {
                builder.goalId((Id) parseString(Id.builder(), "goalId", jsonValue, JsonSupport.getJsonValue(_goalIdArray, index), index));
                index++;
            }
        }
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        JsonArray triggerArray = JsonSupport.getJsonArray(jsonObject, "trigger");
        if (triggerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : triggerArray) {
                builder.trigger(parseTriggerDefinition("trigger", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conditionArray = JsonSupport.getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conditionArray) {
                builder.condition(parsePlanDefinitionActionCondition("condition", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray inputArray = JsonSupport.getJsonArray(jsonObject, "input");
        if (inputArray != null) {
            int index = 0;
            for (JsonValue jsonValue : inputArray) {
                builder.input(parseDataRequirement("input", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray outputArray = JsonSupport.getJsonArray(jsonObject, "output");
        if (outputArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outputArray) {
                builder.output(parseDataRequirement("output", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedActionArray = JsonSupport.getJsonArray(jsonObject, "relatedAction");
        if (relatedActionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedActionArray) {
                builder.relatedAction(parsePlanDefinitionActionRelatedAction("relatedAction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.timing(parseChoiceElement("timing", jsonObject, "DateTime", "Age", "Period", "Duration", "Range", "Timing"));
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parsePlanDefinitionActionParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", JsonSupport.getJsonValue(jsonObject, "groupingBehavior", JsonString.class), jsonObject.get("_groupingBehavior"), -1));
        builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", JsonSupport.getJsonValue(jsonObject, "selectionBehavior", JsonString.class), jsonObject.get("_selectionBehavior"), -1));
        builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", JsonSupport.getJsonValue(jsonObject, "requiredBehavior", JsonString.class), jsonObject.get("_requiredBehavior"), -1));
        builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", JsonSupport.getJsonValue(jsonObject, "precheckBehavior", JsonString.class), jsonObject.get("_precheckBehavior"), -1));
        builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", JsonSupport.getJsonValue(jsonObject, "cardinalityBehavior", JsonString.class), jsonObject.get("_cardinalityBehavior"), -1));
        builder.definition(parseChoiceElement("definition", jsonObject, "Canonical", "Uri"));
        builder.transform((Canonical) parseUri(Canonical.builder(), "transform", JsonSupport.getJsonValue(jsonObject, "transform", JsonString.class), jsonObject.get("_transform"), -1));
        JsonArray dynamicValueArray = JsonSupport.getJsonArray(jsonObject, "dynamicValue");
        if (dynamicValueArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dynamicValueArray) {
                builder.dynamicValue(parsePlanDefinitionActionDynamicValue("dynamicValue", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                builder.action(parsePlanDefinitionAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Action.Condition parsePlanDefinitionActionCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Action.Condition", jsonObject);
        ActionConditionKind kind = (ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        PlanDefinition.Action.Condition.Builder builder = PlanDefinition.Action.Condition.builder(kind);
        parseBackboneElement(builder, jsonObject);
        builder.expression(parseExpression("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Action.DynamicValue parsePlanDefinitionActionDynamicValue(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Action.DynamicValue", jsonObject);
        PlanDefinition.Action.DynamicValue.Builder builder = PlanDefinition.Action.DynamicValue.builder();
        parseBackboneElement(builder, jsonObject);
        builder.path(parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.expression(parseExpression("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Action.Participant parsePlanDefinitionActionParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Action.Participant", jsonObject);
        ActionParticipantType type = (ActionParticipantType) parseString(ActionParticipantType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        PlanDefinition.Action.Participant.Builder builder = PlanDefinition.Action.Participant.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Action.RelatedAction parsePlanDefinitionActionRelatedAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Action.RelatedAction", jsonObject);
        Id actionId = (Id) parseString(Id.builder(), "actionId", JsonSupport.getJsonValue(jsonObject, "actionId", JsonString.class), jsonObject.get("_actionId"), -1);
        ActionRelationshipType relationship = (ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonString.class), jsonObject.get("_relationship"), -1);
        PlanDefinition.Action.RelatedAction.Builder builder = PlanDefinition.Action.RelatedAction.builder(actionId, relationship);
        parseBackboneElement(builder, jsonObject);
        builder.offset(parseChoiceElement("offset", jsonObject, "Duration", "Range"));
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Goal parsePlanDefinitionGoal(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Goal", jsonObject);
        CodeableConcept description = parseCodeableConcept("description", JsonSupport.getJsonValue(jsonObject, "description", JsonObject.class), -1);
        PlanDefinition.Goal.Builder builder = PlanDefinition.Goal.builder(description);
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.priority(parseCodeableConcept("priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonObject.class), -1));
        builder.start(parseCodeableConcept("start", JsonSupport.getJsonValue(jsonObject, "start", JsonObject.class), -1));
        JsonArray addressesArray = JsonSupport.getJsonArray(jsonObject, "addresses");
        if (addressesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressesArray) {
                builder.addresses(parseCodeableConcept("addresses", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray documentationArray = JsonSupport.getJsonArray(jsonObject, "documentation");
        if (documentationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : documentationArray) {
                builder.documentation(parseRelatedArtifact("documentation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parsePlanDefinitionGoalTarget("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected PlanDefinition.Goal.Target parsePlanDefinitionGoalTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PlanDefinition.Goal.Target", jsonObject);
        PlanDefinition.Goal.Target.Builder builder = PlanDefinition.Goal.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.measure(parseCodeableConcept("measure", JsonSupport.getJsonValue(jsonObject, "measure", JsonObject.class), -1));
        builder.detail(parseChoiceElement("detail", jsonObject, "Quantity", "Range", "CodeableConcept"));
        builder.due((Duration) parseQuantity(Duration.builder(), "due", JsonSupport.getJsonValue(jsonObject, "due", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Population parsePopulation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Population", jsonObject);
        Population.Builder builder = Population.builder();
        parseBackboneElement(builder, jsonObject);
        builder.age(parseChoiceElement("age", jsonObject, "Range", "CodeableConcept"));
        builder.gender(parseCodeableConcept("gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonObject.class), -1));
        builder.race(parseCodeableConcept("race", JsonSupport.getJsonValue(jsonObject, "race", JsonObject.class), -1));
        builder.physiologicalCondition(parseCodeableConcept("physiologicalCondition", JsonSupport.getJsonValue(jsonObject, "physiologicalCondition", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Practitioner parsePractitioner(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Practitioner", jsonObject);
        Practitioner.Builder builder = Practitioner.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray nameArray = JsonSupport.getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nameArray) {
                builder.name(parseHumanName("name", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray addressArray = JsonSupport.getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressArray) {
                builder.address(parseAddress("address", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", JsonSupport.getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        JsonArray photoArray = JsonSupport.getJsonArray(jsonObject, "photo");
        if (photoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : photoArray) {
                builder.photo(parseAttachment("photo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray qualificationArray = JsonSupport.getJsonArray(jsonObject, "qualification");
        if (qualificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : qualificationArray) {
                builder.qualification(parsePractitionerQualification("qualification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray communicationArray = JsonSupport.getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : communicationArray) {
                builder.communication(parseCodeableConcept("communication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Practitioner.Qualification parsePractitionerQualification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Practitioner.Qualification", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Practitioner.Qualification.Builder builder = Practitioner.Qualification.builder(code);
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.issuer(parseReference("issuer", JsonSupport.getJsonValue(jsonObject, "issuer", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected PractitionerRole parsePractitionerRole(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PractitionerRole", jsonObject);
        PractitionerRole.Builder builder = PractitionerRole.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.practitioner(parseReference("practitioner", JsonSupport.getJsonValue(jsonObject, "practitioner", JsonObject.class), -1));
        builder.organization(parseReference("organization", JsonSupport.getJsonValue(jsonObject, "organization", JsonObject.class), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialtyArray = JsonSupport.getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialtyArray) {
                builder.specialty(parseCodeableConcept("specialty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray locationArray = JsonSupport.getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationArray) {
                builder.location(parseReference("location", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray healthcareServiceArray = JsonSupport.getJsonArray(jsonObject, "healthcareService");
        if (healthcareServiceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : healthcareServiceArray) {
                builder.healthcareService(parseReference("healthcareService", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray availableTimeArray = JsonSupport.getJsonArray(jsonObject, "availableTime");
        if (availableTimeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : availableTimeArray) {
                builder.availableTime(parsePractitionerRoleAvailableTime("availableTime", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray notAvailableArray = JsonSupport.getJsonArray(jsonObject, "notAvailable");
        if (notAvailableArray != null) {
            int index = 0;
            for (JsonValue jsonValue : notAvailableArray) {
                builder.notAvailable(parsePractitionerRoleNotAvailable("notAvailable", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.availabilityExceptions(parseString("availabilityExceptions", JsonSupport.getJsonValue(jsonObject, "availabilityExceptions", JsonString.class), jsonObject.get("_availabilityExceptions"), -1));
        JsonArray endpointArray = JsonSupport.getJsonArray(jsonObject, "endpoint");
        if (endpointArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endpointArray) {
                builder.endpoint(parseReference("endpoint", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected PractitionerRole.AvailableTime parsePractitionerRoleAvailableTime(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PractitionerRole.AvailableTime", jsonObject);
        PractitionerRole.AvailableTime.Builder builder = PractitionerRole.AvailableTime.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray daysOfWeekArray = JsonSupport.getJsonArray(jsonObject, "daysOfWeek", true);
        if (daysOfWeekArray != null) {
            int index = 0;
            JsonArray _daysOfWeekArray = jsonObject.getJsonArray("_daysOfWeek");
            for (JsonValue jsonValue : daysOfWeekArray) {
                builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", jsonValue, JsonSupport.getJsonValue(_daysOfWeekArray, index), index));
                index++;
            }
        }
        builder.allDay(parseBoolean("allDay", JsonSupport.getJsonValue(jsonObject, "allDay", JsonValue.class), jsonObject.get("_allDay"), -1));
        builder.availableStartTime(parseTime("availableStartTime", JsonSupport.getJsonValue(jsonObject, "availableStartTime", JsonString.class), jsonObject.get("_availableStartTime"), -1));
        builder.availableEndTime(parseTime("availableEndTime", JsonSupport.getJsonValue(jsonObject, "availableEndTime", JsonString.class), jsonObject.get("_availableEndTime"), -1));
        stackPop();
        return builder.build();
    }

    protected PractitionerRole.NotAvailable parsePractitionerRoleNotAvailable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("PractitionerRole.NotAvailable", jsonObject);
        String description = parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1);
        PractitionerRole.NotAvailable.Builder builder = PractitionerRole.NotAvailable.builder(description);
        parseBackboneElement(builder, jsonObject);
        builder.during(parsePeriod("during", JsonSupport.getJsonValue(jsonObject, "during", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Procedure parseProcedure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Procedure", jsonObject);
        ProcedureStatus status = (ProcedureStatus) parseString(ProcedureStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        Procedure.Builder builder = Procedure.builder(status, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.performed(parseChoiceElement("performed", jsonObject, "DateTime", "Period", "String", "Age", "Range"));
        builder.recorder(parseReference("recorder", JsonSupport.getJsonValue(jsonObject, "recorder", JsonObject.class), -1));
        builder.asserter(parseReference("asserter", JsonSupport.getJsonValue(jsonObject, "asserter", JsonObject.class), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseProcedurePerformer("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray bodySiteArray = JsonSupport.getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : bodySiteArray) {
                builder.bodySite(parseCodeableConcept("bodySite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.outcome(parseCodeableConcept("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        JsonArray reportArray = JsonSupport.getJsonArray(jsonObject, "report");
        if (reportArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reportArray) {
                builder.report(parseReference("report", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray complicationArray = JsonSupport.getJsonArray(jsonObject, "complication");
        if (complicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : complicationArray) {
                builder.complication(parseCodeableConcept("complication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray complicationDetailArray = JsonSupport.getJsonArray(jsonObject, "complicationDetail");
        if (complicationDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : complicationDetailArray) {
                builder.complicationDetail(parseReference("complicationDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray followUpArray = JsonSupport.getJsonArray(jsonObject, "followUp");
        if (followUpArray != null) {
            int index = 0;
            for (JsonValue jsonValue : followUpArray) {
                builder.followUp(parseCodeableConcept("followUp", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray focalDeviceArray = JsonSupport.getJsonArray(jsonObject, "focalDevice");
        if (focalDeviceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : focalDeviceArray) {
                builder.focalDevice(parseProcedureFocalDevice("focalDevice", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray usedReferenceArray = JsonSupport.getJsonArray(jsonObject, "usedReference");
        if (usedReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : usedReferenceArray) {
                builder.usedReference(parseReference("usedReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray usedCodeArray = JsonSupport.getJsonArray(jsonObject, "usedCode");
        if (usedCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : usedCodeArray) {
                builder.usedCode(parseCodeableConcept("usedCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Procedure.FocalDevice parseProcedureFocalDevice(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Procedure.FocalDevice", jsonObject);
        Reference manipulated = parseReference("manipulated", JsonSupport.getJsonValue(jsonObject, "manipulated", JsonObject.class), -1);
        Procedure.FocalDevice.Builder builder = Procedure.FocalDevice.builder(manipulated);
        parseBackboneElement(builder, jsonObject);
        builder.action(parseCodeableConcept("action", JsonSupport.getJsonValue(jsonObject, "action", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Procedure.Performer parseProcedurePerformer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Procedure.Performer", jsonObject);
        Reference actor = parseReference("actor", JsonSupport.getJsonValue(jsonObject, "actor", JsonObject.class), -1);
        Procedure.Performer.Builder builder = Procedure.Performer.builder(actor);
        parseBackboneElement(builder, jsonObject);
        builder.function(parseCodeableConcept("function", JsonSupport.getJsonValue(jsonObject, "function", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", JsonSupport.getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ProdCharacteristic parseProdCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ProdCharacteristic", jsonObject);
        ProdCharacteristic.Builder builder = ProdCharacteristic.builder();
        parseBackboneElement(builder, jsonObject);
        builder.height(parseQuantity("height", JsonSupport.getJsonValue(jsonObject, "height", JsonObject.class), -1));
        builder.width(parseQuantity("width", JsonSupport.getJsonValue(jsonObject, "width", JsonObject.class), -1));
        builder.depth(parseQuantity("depth", JsonSupport.getJsonValue(jsonObject, "depth", JsonObject.class), -1));
        builder.weight(parseQuantity("weight", JsonSupport.getJsonValue(jsonObject, "weight", JsonObject.class), -1));
        builder.nominalVolume(parseQuantity("nominalVolume", JsonSupport.getJsonValue(jsonObject, "nominalVolume", JsonObject.class), -1));
        builder.externalDiameter(parseQuantity("externalDiameter", JsonSupport.getJsonValue(jsonObject, "externalDiameter", JsonObject.class), -1));
        builder.shape(parseString("shape", JsonSupport.getJsonValue(jsonObject, "shape", JsonString.class), jsonObject.get("_shape"), -1));
        JsonArray colorArray = JsonSupport.getJsonArray(jsonObject, "color", true);
        if (colorArray != null) {
            int index = 0;
            JsonArray _colorArray = jsonObject.getJsonArray("_color");
            for (JsonValue jsonValue : colorArray) {
                builder.color(parseString("color", jsonValue, JsonSupport.getJsonValue(_colorArray, index), index));
                index++;
            }
        }
        JsonArray imprintArray = JsonSupport.getJsonArray(jsonObject, "imprint", true);
        if (imprintArray != null) {
            int index = 0;
            JsonArray _imprintArray = jsonObject.getJsonArray("_imprint");
            for (JsonValue jsonValue : imprintArray) {
                builder.imprint(parseString("imprint", jsonValue, JsonSupport.getJsonValue(_imprintArray, index), index));
                index++;
            }
        }
        JsonArray imageArray = JsonSupport.getJsonArray(jsonObject, "image");
        if (imageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : imageArray) {
                builder.image(parseAttachment("image", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.scoring(parseCodeableConcept("scoring", JsonSupport.getJsonValue(jsonObject, "scoring", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ProductShelfLife parseProductShelfLife(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ProductShelfLife", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Quantity period = parseQuantity("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1);
        ProductShelfLife.Builder builder = ProductShelfLife.builder(type, period);
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        JsonArray specialPrecautionsForStorageArray = JsonSupport.getJsonArray(jsonObject, "specialPrecautionsForStorage");
        if (specialPrecautionsForStorageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialPrecautionsForStorageArray) {
                builder.specialPrecautionsForStorage(parseCodeableConcept("specialPrecautionsForStorage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Provenance parseProvenance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Provenance", jsonObject);
        java.util.List<Reference> target = new ArrayList<>();
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                target.add(parseReference("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Instant recorded = parseInstant("recorded", JsonSupport.getJsonValue(jsonObject, "recorded", JsonString.class), jsonObject.get("_recorded"), -1);
        java.util.List<Provenance.Agent> agent = new ArrayList<>();
        JsonArray agentArray = JsonSupport.getJsonArray(jsonObject, "agent");
        if (agentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : agentArray) {
                agent.add(parseProvenanceAgent("agent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Provenance.Builder builder = Provenance.builder(target, recorded, agent);
        parseDomainResource(builder, jsonObject);
        builder.occurred(parseChoiceElement("occurred", jsonObject, "Period", "DateTime"));
        JsonArray policyArray = JsonSupport.getJsonArray(jsonObject, "policy", true);
        if (policyArray != null) {
            int index = 0;
            JsonArray _policyArray = jsonObject.getJsonArray("_policy");
            for (JsonValue jsonValue : policyArray) {
                builder.policy(parseUri("policy", jsonValue, JsonSupport.getJsonValue(_policyArray, index), index));
                index++;
            }
        }
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        JsonArray reasonArray = JsonSupport.getJsonArray(jsonObject, "reason");
        if (reasonArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonArray) {
                builder.reason(parseCodeableConcept("reason", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.activity(parseCodeableConcept("activity", JsonSupport.getJsonValue(jsonObject, "activity", JsonObject.class), -1));
        JsonArray entityArray = JsonSupport.getJsonArray(jsonObject, "entity");
        if (entityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : entityArray) {
                builder.entity(parseProvenanceEntity("entity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray signatureArray = JsonSupport.getJsonArray(jsonObject, "signature");
        if (signatureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : signatureArray) {
                builder.signature(parseSignature("signature", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Provenance.Agent parseProvenanceAgent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Provenance.Agent", jsonObject);
        Reference who = parseReference("who", JsonSupport.getJsonValue(jsonObject, "who", JsonObject.class), -1);
        Provenance.Agent.Builder builder = Provenance.Agent.builder(who);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray roleArray = JsonSupport.getJsonArray(jsonObject, "role");
        if (roleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : roleArray) {
                builder.role(parseCodeableConcept("role", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.onBehalfOf(parseReference("onBehalfOf", JsonSupport.getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Provenance.Entity parseProvenanceEntity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Provenance.Entity", jsonObject);
        ProvenanceEntityRole role = (ProvenanceEntityRole) parseString(ProvenanceEntityRole.builder(), "role", JsonSupport.getJsonValue(jsonObject, "role", JsonString.class), jsonObject.get("_role"), -1);
        Reference what = parseReference("what", JsonSupport.getJsonValue(jsonObject, "what", JsonObject.class), -1);
        Provenance.Entity.Builder builder = Provenance.Entity.builder(role, what);
        parseBackboneElement(builder, jsonObject);
        JsonArray agentArray = JsonSupport.getJsonArray(jsonObject, "agent");
        if (agentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : agentArray) {
                builder.agent(parseProvenanceAgent("agent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Quantity parseQuantity(Quantity.Builder builder, java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Quantity", jsonObject);
        parseElement(builder, jsonObject);
        builder.value(parseDecimal("value", JsonSupport.getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.comparator((QuantityComparator) parseString(QuantityComparator.builder(), "comparator", JsonSupport.getJsonValue(jsonObject, "comparator", JsonString.class), jsonObject.get("_comparator"), -1));
        builder.unit(parseString("unit", JsonSupport.getJsonValue(jsonObject, "unit", JsonString.class), jsonObject.get("_unit"), -1));
        builder.system(parseUri("system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.code((Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        stackPop();
        return builder.build();
    }

    protected Quantity parseQuantity(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        return parseQuantity(Quantity.builder(), elementName, jsonObject, elementIndex);
    }

    protected Questionnaire parseQuestionnaire(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Questionnaire", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Questionnaire.Builder builder = Questionnaire.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray derivedFromArray = JsonSupport.getJsonArray(jsonObject, "derivedFrom", true);
        if (derivedFromArray != null) {
            int index = 0;
            JsonArray _derivedFromArray = jsonObject.getJsonArray("_derivedFrom");
            for (JsonValue jsonValue : derivedFromArray) {
                builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", jsonValue, JsonSupport.getJsonValue(_derivedFromArray, index), index));
                index++;
            }
        }
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        JsonArray subjectTypeArray = JsonSupport.getJsonArray(jsonObject, "subjectType", true);
        if (subjectTypeArray != null) {
            int index = 0;
            JsonArray _subjectTypeArray = jsonObject.getJsonArray("_subjectType");
            for (JsonValue jsonValue : subjectTypeArray) {
                builder.subjectType((ResourceType) parseString(ResourceType.builder(), "subjectType", jsonValue, JsonSupport.getJsonValue(_subjectTypeArray, index), index));
                index++;
            }
        }
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCoding("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseQuestionnaireItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Questionnaire.Item parseQuestionnaireItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Questionnaire.Item", jsonObject);
        String linkId = parseString("linkId", JsonSupport.getJsonValue(jsonObject, "linkId", JsonString.class), jsonObject.get("_linkId"), -1);
        QuestionnaireItemType type = (QuestionnaireItemType) parseString(QuestionnaireItemType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Questionnaire.Item.Builder builder = Questionnaire.Item.builder(linkId, type);
        parseBackboneElement(builder, jsonObject);
        builder.definition(parseUri("definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCoding("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.prefix(parseString("prefix", JsonSupport.getJsonValue(jsonObject, "prefix", JsonString.class), jsonObject.get("_prefix"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray enableWhenArray = JsonSupport.getJsonArray(jsonObject, "enableWhen");
        if (enableWhenArray != null) {
            int index = 0;
            for (JsonValue jsonValue : enableWhenArray) {
                builder.enableWhen(parseQuestionnaireItemEnableWhen("enableWhen", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.enableBehavior((EnableWhenBehavior) parseString(EnableWhenBehavior.builder(), "enableBehavior", JsonSupport.getJsonValue(jsonObject, "enableBehavior", JsonString.class), jsonObject.get("_enableBehavior"), -1));
        builder.required(parseBoolean("required", JsonSupport.getJsonValue(jsonObject, "required", JsonValue.class), jsonObject.get("_required"), -1));
        builder.repeats(parseBoolean("repeats", JsonSupport.getJsonValue(jsonObject, "repeats", JsonValue.class), jsonObject.get("_repeats"), -1));
        builder.readOnly(parseBoolean("readOnly", JsonSupport.getJsonValue(jsonObject, "readOnly", JsonValue.class), jsonObject.get("_readOnly"), -1));
        builder.maxLength(parseInteger("maxLength", JsonSupport.getJsonValue(jsonObject, "maxLength", JsonNumber.class), jsonObject.get("_maxLength"), -1));
        builder.answerValueSet((Canonical) parseUri(Canonical.builder(), "answerValueSet", JsonSupport.getJsonValue(jsonObject, "answerValueSet", JsonString.class), jsonObject.get("_answerValueSet"), -1));
        JsonArray answerOptionArray = JsonSupport.getJsonArray(jsonObject, "answerOption");
        if (answerOptionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : answerOptionArray) {
                builder.answerOption(parseQuestionnaireItemAnswerOption("answerOption", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray initialArray = JsonSupport.getJsonArray(jsonObject, "initial");
        if (initialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : initialArray) {
                builder.initial(parseQuestionnaireItemInitial("initial", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseQuestionnaireItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Questionnaire.Item.AnswerOption parseQuestionnaireItemAnswerOption(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Questionnaire.Item.AnswerOption", jsonObject);
        Element value = parseChoiceElement("value", jsonObject, "Integer", "Date", "Time", "String", "Coding", "Reference");
        Questionnaire.Item.AnswerOption.Builder builder = Questionnaire.Item.AnswerOption.builder(value);
        parseBackboneElement(builder, jsonObject);
        builder.initialSelected(parseBoolean("initialSelected", JsonSupport.getJsonValue(jsonObject, "initialSelected", JsonValue.class), jsonObject.get("_initialSelected"), -1));
        stackPop();
        return builder.build();
    }

    protected Questionnaire.Item.EnableWhen parseQuestionnaireItemEnableWhen(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Questionnaire.Item.EnableWhen", jsonObject);
        String question = parseString("question", JsonSupport.getJsonValue(jsonObject, "question", JsonString.class), jsonObject.get("_question"), -1);
        QuestionnaireItemOperator operator = (QuestionnaireItemOperator) parseString(QuestionnaireItemOperator.builder(), "operator", JsonSupport.getJsonValue(jsonObject, "operator", JsonString.class), jsonObject.get("_operator"), -1);
        Element answer = parseChoiceElement("answer", jsonObject, "Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Coding", "Quantity", "Reference");
        Questionnaire.Item.EnableWhen.Builder builder = Questionnaire.Item.EnableWhen.builder(question, operator, answer);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Questionnaire.Item.Initial parseQuestionnaireItemInitial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Questionnaire.Item.Initial", jsonObject);
        Element value = parseChoiceElement("value", jsonObject, "Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Uri", "Attachment", "Coding", "Quantity", "Reference");
        Questionnaire.Item.Initial.Builder builder = Questionnaire.Item.Initial.builder(value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected QuestionnaireResponse parseQuestionnaireResponse(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("QuestionnaireResponse", jsonObject);
        QuestionnaireResponseStatus status = (QuestionnaireResponseStatus) parseString(QuestionnaireResponseStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        QuestionnaireResponse.Builder builder = QuestionnaireResponse.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.questionnaire((Canonical) parseUri(Canonical.builder(), "questionnaire", JsonSupport.getJsonValue(jsonObject, "questionnaire", JsonString.class), jsonObject.get("_questionnaire"), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.authored(parseDateTime("authored", JsonSupport.getJsonValue(jsonObject, "authored", JsonString.class), jsonObject.get("_authored"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        builder.source(parseReference("source", JsonSupport.getJsonValue(jsonObject, "source", JsonObject.class), -1));
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseQuestionnaireResponseItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected QuestionnaireResponse.Item parseQuestionnaireResponseItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("QuestionnaireResponse.Item", jsonObject);
        String linkId = parseString("linkId", JsonSupport.getJsonValue(jsonObject, "linkId", JsonString.class), jsonObject.get("_linkId"), -1);
        QuestionnaireResponse.Item.Builder builder = QuestionnaireResponse.Item.builder(linkId);
        parseBackboneElement(builder, jsonObject);
        builder.definition(parseUri("definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1));
        builder.text(parseString("text", JsonSupport.getJsonValue(jsonObject, "text", JsonString.class), jsonObject.get("_text"), -1));
        JsonArray answerArray = JsonSupport.getJsonArray(jsonObject, "answer");
        if (answerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : answerArray) {
                builder.answer(parseQuestionnaireResponseItemAnswer("answer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseQuestionnaireResponseItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected QuestionnaireResponse.Item.Answer parseQuestionnaireResponseItemAnswer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("QuestionnaireResponse.Item.Answer", jsonObject);
        QuestionnaireResponse.Item.Answer.Builder builder = QuestionnaireResponse.Item.Answer.builder();
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, "Boolean", "Decimal", "Integer", "Date", "DateTime", "Time", "String", "Uri", "Attachment", "Coding", "Quantity", "Reference"));
        JsonArray itemArray = JsonSupport.getJsonArray(jsonObject, "item");
        if (itemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : itemArray) {
                builder.item(parseQuestionnaireResponseItem("item", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Range parseRange(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Range", jsonObject);
        Range.Builder builder = Range.builder();
        parseElement(builder, jsonObject);
        builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", JsonSupport.getJsonValue(jsonObject, "low", JsonObject.class), -1));
        builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", JsonSupport.getJsonValue(jsonObject, "high", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Ratio parseRatio(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Ratio", jsonObject);
        Ratio.Builder builder = Ratio.builder();
        parseElement(builder, jsonObject);
        builder.numerator(parseQuantity("numerator", JsonSupport.getJsonValue(jsonObject, "numerator", JsonObject.class), -1));
        builder.denominator(parseQuantity("denominator", JsonSupport.getJsonValue(jsonObject, "denominator", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Reference parseReference(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Reference", jsonObject);
        Reference.Builder builder = Reference.builder();
        parseElement(builder, jsonObject);
        builder.reference(parseString("reference", JsonSupport.getJsonValue(jsonObject, "reference", JsonString.class), jsonObject.get("_reference"), -1));
        builder.type(parseUri("type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    protected RelatedArtifact parseRelatedArtifact(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RelatedArtifact", jsonObject);
        RelatedArtifactType type = (RelatedArtifactType) parseString(RelatedArtifactType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        RelatedArtifact.Builder builder = RelatedArtifact.builder(type);
        parseElement(builder, jsonObject);
        builder.label(parseString("label", JsonSupport.getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        builder.citation((Markdown) parseString(Markdown.builder(), "citation", JsonSupport.getJsonValue(jsonObject, "citation", JsonString.class), jsonObject.get("_citation"), -1));
        builder.url((Url) parseUri(Url.builder(), "url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.document(parseAttachment("document", JsonSupport.getJsonValue(jsonObject, "document", JsonObject.class), -1));
        builder.resource((Canonical) parseUri(Canonical.builder(), "resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonString.class), jsonObject.get("_resource"), -1));
        stackPop();
        return builder.build();
    }

    protected RelatedPerson parseRelatedPerson(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RelatedPerson", jsonObject);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        RelatedPerson.Builder builder = RelatedPerson.builder(patient);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray relationshipArray = JsonSupport.getJsonArray(jsonObject, "relationship");
        if (relationshipArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relationshipArray) {
                builder.relationship(parseCodeableConcept("relationship", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray nameArray = JsonSupport.getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nameArray) {
                builder.name(parseHumanName("name", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray telecomArray = JsonSupport.getJsonArray(jsonObject, "telecom");
        if (telecomArray != null) {
            int index = 0;
            for (JsonValue jsonValue : telecomArray) {
                builder.telecom(parseContactPoint("telecom", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", JsonSupport.getJsonValue(jsonObject, "gender", JsonString.class), jsonObject.get("_gender"), -1));
        builder.birthDate(parseDate("birthDate", JsonSupport.getJsonValue(jsonObject, "birthDate", JsonString.class), jsonObject.get("_birthDate"), -1));
        JsonArray addressArray = JsonSupport.getJsonArray(jsonObject, "address");
        if (addressArray != null) {
            int index = 0;
            for (JsonValue jsonValue : addressArray) {
                builder.address(parseAddress("address", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray photoArray = JsonSupport.getJsonArray(jsonObject, "photo");
        if (photoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : photoArray) {
                builder.photo(parseAttachment("photo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray communicationArray = JsonSupport.getJsonArray(jsonObject, "communication");
        if (communicationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : communicationArray) {
                builder.communication(parseRelatedPersonCommunication("communication", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RelatedPerson.Communication parseRelatedPersonCommunication(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RelatedPerson.Communication", jsonObject);
        CodeableConcept language = parseCodeableConcept("language", JsonSupport.getJsonValue(jsonObject, "language", JsonObject.class), -1);
        RelatedPerson.Communication.Builder builder = RelatedPerson.Communication.builder(language);
        parseBackboneElement(builder, jsonObject);
        builder.preferred(parseBoolean("preferred", JsonSupport.getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        stackPop();
        return builder.build();
    }

    protected RequestGroup parseRequestGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RequestGroup", jsonObject);
        RequestStatus status = (RequestStatus) parseString(RequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        RequestIntent intent = (RequestIntent) parseString(RequestIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        RequestGroup.Builder builder = RequestGroup.builder(status, intent);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray replacesArray = JsonSupport.getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : replacesArray) {
                builder.replaces(parseReference("replaces", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", JsonSupport.getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.author(parseReference("author", JsonSupport.getJsonValue(jsonObject, "author", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                builder.action(parseRequestGroupAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RequestGroup.Action parseRequestGroupAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RequestGroup.Action", jsonObject);
        RequestGroup.Action.Builder builder = RequestGroup.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.prefix(parseString("prefix", JsonSupport.getJsonValue(jsonObject, "prefix", JsonString.class), jsonObject.get("_prefix"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.textEquivalent(parseString("textEquivalent", JsonSupport.getJsonValue(jsonObject, "textEquivalent", JsonString.class), jsonObject.get("_textEquivalent"), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseCodeableConcept("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray documentationArray = JsonSupport.getJsonArray(jsonObject, "documentation");
        if (documentationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : documentationArray) {
                builder.documentation(parseRelatedArtifact("documentation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conditionArray = JsonSupport.getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conditionArray) {
                builder.condition(parseRequestGroupActionCondition("condition", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedActionArray = JsonSupport.getJsonArray(jsonObject, "relatedAction");
        if (relatedActionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedActionArray) {
                builder.relatedAction(parseRequestGroupActionRelatedAction("relatedAction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.timing(parseChoiceElement("timing", jsonObject, "DateTime", "Age", "Period", "Duration", "Range", "Timing"));
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parseReference("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", JsonSupport.getJsonValue(jsonObject, "groupingBehavior", JsonString.class), jsonObject.get("_groupingBehavior"), -1));
        builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", JsonSupport.getJsonValue(jsonObject, "selectionBehavior", JsonString.class), jsonObject.get("_selectionBehavior"), -1));
        builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", JsonSupport.getJsonValue(jsonObject, "requiredBehavior", JsonString.class), jsonObject.get("_requiredBehavior"), -1));
        builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", JsonSupport.getJsonValue(jsonObject, "precheckBehavior", JsonString.class), jsonObject.get("_precheckBehavior"), -1));
        builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", JsonSupport.getJsonValue(jsonObject, "cardinalityBehavior", JsonString.class), jsonObject.get("_cardinalityBehavior"), -1));
        builder.resource(parseReference("resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                builder.action(parseRequestGroupAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RequestGroup.Action.Condition parseRequestGroupActionCondition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RequestGroup.Action.Condition", jsonObject);
        ActionConditionKind kind = (ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        RequestGroup.Action.Condition.Builder builder = RequestGroup.Action.Condition.builder(kind);
        parseBackboneElement(builder, jsonObject);
        builder.expression(parseExpression("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected RequestGroup.Action.RelatedAction parseRequestGroupActionRelatedAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RequestGroup.Action.RelatedAction", jsonObject);
        Id actionId = (Id) parseString(Id.builder(), "actionId", JsonSupport.getJsonValue(jsonObject, "actionId", JsonString.class), jsonObject.get("_actionId"), -1);
        ActionRelationshipType relationship = (ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonString.class), jsonObject.get("_relationship"), -1);
        RequestGroup.Action.RelatedAction.Builder builder = RequestGroup.Action.RelatedAction.builder(actionId, relationship);
        parseBackboneElement(builder, jsonObject);
        builder.offset(parseChoiceElement("offset", jsonObject, "Duration", "Range"));
        stackPop();
        return builder.build();
    }

    protected ResearchDefinition parseResearchDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchDefinition", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference population = parseReference("population", JsonSupport.getJsonValue(jsonObject, "population", JsonObject.class), -1);
        ResearchDefinition.Builder builder = ResearchDefinition.builder(status, population);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", JsonSupport.getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray commentArray = JsonSupport.getJsonArray(jsonObject, "comment", true);
        if (commentArray != null) {
            int index = 0;
            JsonArray _commentArray = jsonObject.getJsonArray("_comment");
            for (JsonValue jsonValue : commentArray) {
                builder.comment(parseString("comment", jsonValue, JsonSupport.getJsonValue(_commentArray, index), index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray libraryArray = JsonSupport.getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            int index = 0;
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (JsonValue jsonValue : libraryArray) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", jsonValue, JsonSupport.getJsonValue(_libraryArray, index), index));
                index++;
            }
        }
        builder.exposure(parseReference("exposure", JsonSupport.getJsonValue(jsonObject, "exposure", JsonObject.class), -1));
        builder.exposureAlternative(parseReference("exposureAlternative", JsonSupport.getJsonValue(jsonObject, "exposureAlternative", JsonObject.class), -1));
        builder.outcome(parseReference("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ResearchElementDefinition parseResearchElementDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchElementDefinition", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ResearchElementType type = (ResearchElementType) parseString(ResearchElementType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        java.util.List<ResearchElementDefinition.Characteristic> characteristic = new ArrayList<>();
        JsonArray characteristicArray = JsonSupport.getJsonArray(jsonObject, "characteristic");
        if (characteristicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : characteristicArray) {
                characteristic.add(parseResearchElementDefinitionCharacteristic("characteristic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ResearchElementDefinition.Builder builder = ResearchElementDefinition.builder(status, type, characteristic);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.shortTitle(parseString("shortTitle", JsonSupport.getJsonValue(jsonObject, "shortTitle", JsonString.class), jsonObject.get("_shortTitle"), -1));
        builder.subtitle(parseString("subtitle", JsonSupport.getJsonValue(jsonObject, "subtitle", JsonString.class), jsonObject.get("_subtitle"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.subject(parseChoiceElement("subject", jsonObject, "CodeableConcept", "Reference"));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray commentArray = JsonSupport.getJsonArray(jsonObject, "comment", true);
        if (commentArray != null) {
            int index = 0;
            JsonArray _commentArray = jsonObject.getJsonArray("_comment");
            for (JsonValue jsonValue : commentArray) {
                builder.comment(parseString("comment", jsonValue, JsonSupport.getJsonValue(_commentArray, index), index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.usage(parseString("usage", JsonSupport.getJsonValue(jsonObject, "usage", JsonString.class), jsonObject.get("_usage"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray libraryArray = JsonSupport.getJsonArray(jsonObject, "library", true);
        if (libraryArray != null) {
            int index = 0;
            JsonArray _libraryArray = jsonObject.getJsonArray("_library");
            for (JsonValue jsonValue : libraryArray) {
                builder.library((Canonical) parseUri(Canonical.builder(), "library", jsonValue, JsonSupport.getJsonValue(_libraryArray, index), index));
                index++;
            }
        }
        builder.variableType((VariableType) parseString(VariableType.builder(), "variableType", JsonSupport.getJsonValue(jsonObject, "variableType", JsonString.class), jsonObject.get("_variableType"), -1));
        stackPop();
        return builder.build();
    }

    protected ResearchElementDefinition.Characteristic parseResearchElementDefinitionCharacteristic(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchElementDefinition.Characteristic", jsonObject);
        Element definition = parseChoiceElement("definition", jsonObject, "CodeableConcept", "Canonical", "Expression", "DataRequirement");
        ResearchElementDefinition.Characteristic.Builder builder = ResearchElementDefinition.Characteristic.builder(definition);
        parseBackboneElement(builder, jsonObject);
        JsonArray usageContextArray = JsonSupport.getJsonArray(jsonObject, "usageContext");
        if (usageContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : usageContextArray) {
                builder.usageContext(parseUsageContext("usageContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.exclude(parseBoolean("exclude", JsonSupport.getJsonValue(jsonObject, "exclude", JsonValue.class), jsonObject.get("_exclude"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", JsonSupport.getJsonValue(jsonObject, "unitOfMeasure", JsonObject.class), -1));
        builder.studyEffectiveDescription(parseString("studyEffectiveDescription", JsonSupport.getJsonValue(jsonObject, "studyEffectiveDescription", JsonString.class), jsonObject.get("_studyEffectiveDescription"), -1));
        builder.studyEffective(parseChoiceElement("studyEffective", jsonObject, "DateTime", "Period", "Duration", "Timing"));
        builder.studyEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "studyEffectiveTimeFromStart", JsonSupport.getJsonValue(jsonObject, "studyEffectiveTimeFromStart", JsonObject.class), -1));
        builder.studyEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "studyEffectiveGroupMeasure", JsonSupport.getJsonValue(jsonObject, "studyEffectiveGroupMeasure", JsonString.class), jsonObject.get("_studyEffectiveGroupMeasure"), -1));
        builder.participantEffectiveDescription(parseString("participantEffectiveDescription", JsonSupport.getJsonValue(jsonObject, "participantEffectiveDescription", JsonString.class), jsonObject.get("_participantEffectiveDescription"), -1));
        builder.participantEffective(parseChoiceElement("participantEffective", jsonObject, "DateTime", "Period", "Duration", "Timing"));
        builder.participantEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "participantEffectiveTimeFromStart", JsonSupport.getJsonValue(jsonObject, "participantEffectiveTimeFromStart", JsonObject.class), -1));
        builder.participantEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "participantEffectiveGroupMeasure", JsonSupport.getJsonValue(jsonObject, "participantEffectiveGroupMeasure", JsonString.class), jsonObject.get("_participantEffectiveGroupMeasure"), -1));
        stackPop();
        return builder.build();
    }

    protected ResearchStudy parseResearchStudy(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchStudy", jsonObject);
        ResearchStudyStatus status = (ResearchStudyStatus) parseString(ResearchStudyStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ResearchStudy.Builder builder = ResearchStudy.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        JsonArray protocolArray = JsonSupport.getJsonArray(jsonObject, "protocol");
        if (protocolArray != null) {
            int index = 0;
            for (JsonValue jsonValue : protocolArray) {
                builder.protocol(parseReference("protocol", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.primaryPurposeType(parseCodeableConcept("primaryPurposeType", JsonSupport.getJsonValue(jsonObject, "primaryPurposeType", JsonObject.class), -1));
        builder.phase(parseCodeableConcept("phase", JsonSupport.getJsonValue(jsonObject, "phase", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray focusArray = JsonSupport.getJsonArray(jsonObject, "focus");
        if (focusArray != null) {
            int index = 0;
            for (JsonValue jsonValue : focusArray) {
                builder.focus(parseCodeableConcept("focus", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conditionArray = JsonSupport.getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conditionArray) {
                builder.condition(parseCodeableConcept("condition", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray keywordArray = JsonSupport.getJsonArray(jsonObject, "keyword");
        if (keywordArray != null) {
            int index = 0;
            for (JsonValue jsonValue : keywordArray) {
                builder.keyword(parseCodeableConcept("keyword", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray locationArray = JsonSupport.getJsonArray(jsonObject, "location");
        if (locationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationArray) {
                builder.location(parseCodeableConcept("location", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray enrollmentArray = JsonSupport.getJsonArray(jsonObject, "enrollment");
        if (enrollmentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : enrollmentArray) {
                builder.enrollment(parseReference("enrollment", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.sponsor(parseReference("sponsor", JsonSupport.getJsonValue(jsonObject, "sponsor", JsonObject.class), -1));
        builder.principalInvestigator(parseReference("principalInvestigator", JsonSupport.getJsonValue(jsonObject, "principalInvestigator", JsonObject.class), -1));
        JsonArray siteArray = JsonSupport.getJsonArray(jsonObject, "site");
        if (siteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : siteArray) {
                builder.site(parseReference("site", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.reasonStopped(parseCodeableConcept("reasonStopped", JsonSupport.getJsonValue(jsonObject, "reasonStopped", JsonObject.class), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray armArray = JsonSupport.getJsonArray(jsonObject, "arm");
        if (armArray != null) {
            int index = 0;
            for (JsonValue jsonValue : armArray) {
                builder.arm(parseResearchStudyArm("arm", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray objectiveArray = JsonSupport.getJsonArray(jsonObject, "objective");
        if (objectiveArray != null) {
            int index = 0;
            for (JsonValue jsonValue : objectiveArray) {
                builder.objective(parseResearchStudyObjective("objective", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ResearchStudy.Arm parseResearchStudyArm(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchStudy.Arm", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        ResearchStudy.Arm.Builder builder = ResearchStudy.Arm.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected ResearchStudy.Objective parseResearchStudyObjective(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchStudy.Objective", jsonObject);
        ResearchStudy.Objective.Builder builder = ResearchStudy.Objective.builder();
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ResearchSubject parseResearchSubject(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ResearchSubject", jsonObject);
        ResearchSubjectStatus status = (ResearchSubjectStatus) parseString(ResearchSubjectStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference study = parseReference("study", JsonSupport.getJsonValue(jsonObject, "study", JsonObject.class), -1);
        Reference individual = parseReference("individual", JsonSupport.getJsonValue(jsonObject, "individual", JsonObject.class), -1);
        ResearchSubject.Builder builder = ResearchSubject.builder(status, study, individual);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        builder.assignedArm(parseString("assignedArm", JsonSupport.getJsonValue(jsonObject, "assignedArm", JsonString.class), jsonObject.get("_assignedArm"), -1));
        builder.actualArm(parseString("actualArm", JsonSupport.getJsonValue(jsonObject, "actualArm", JsonString.class), jsonObject.get("_actualArm"), -1));
        builder.consent(parseReference("consent", JsonSupport.getJsonValue(jsonObject, "consent", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected void parseResource(Resource.Builder builder, JsonObject jsonObject) {
        builder.id((Id) parseString(Id.builder(), "id", JsonSupport.getJsonValue(jsonObject, "id", JsonString.class), jsonObject.get("_id"), -1));
        builder.meta(parseMeta("meta", JsonSupport.getJsonValue(jsonObject, "meta", JsonObject.class), -1));
        builder.implicitRules(parseUri("implicitRules", JsonSupport.getJsonValue(jsonObject, "implicitRules", JsonString.class), jsonObject.get("_implicitRules"), -1));
        builder.language((Code) parseString(Code.builder(), "language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
    }

    protected RiskAssessment parseRiskAssessment(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskAssessment", jsonObject);
        RiskAssessmentStatus status = (RiskAssessmentStatus) parseString(RiskAssessmentStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        RiskAssessment.Builder builder = RiskAssessment.builder(status, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.basedOn(parseReference("basedOn", JsonSupport.getJsonValue(jsonObject, "basedOn", JsonObject.class), -1));
        builder.parent(parseReference("parent", JsonSupport.getJsonValue(jsonObject, "parent", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period"));
        builder.condition(parseReference("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonObject.class), -1));
        builder.performer(parseReference("performer", JsonSupport.getJsonValue(jsonObject, "performer", JsonObject.class), -1));
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basisArray = JsonSupport.getJsonArray(jsonObject, "basis");
        if (basisArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basisArray) {
                builder.basis(parseReference("basis", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray predictionArray = JsonSupport.getJsonArray(jsonObject, "prediction");
        if (predictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : predictionArray) {
                builder.prediction(parseRiskAssessmentPrediction("prediction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.mitigation(parseString("mitigation", JsonSupport.getJsonValue(jsonObject, "mitigation", JsonString.class), jsonObject.get("_mitigation"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RiskAssessment.Prediction parseRiskAssessmentPrediction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskAssessment.Prediction", jsonObject);
        RiskAssessment.Prediction.Builder builder = RiskAssessment.Prediction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.outcome(parseCodeableConcept("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1));
        builder.probability(parseChoiceElement("probability", jsonObject, "Decimal", "Range"));
        builder.qualitativeRisk(parseCodeableConcept("qualitativeRisk", JsonSupport.getJsonValue(jsonObject, "qualitativeRisk", JsonObject.class), -1));
        builder.relativeRisk(parseDecimal("relativeRisk", JsonSupport.getJsonValue(jsonObject, "relativeRisk", JsonNumber.class), jsonObject.get("_relativeRisk"), -1));
        builder.when(parseChoiceElement("when", jsonObject, "Period", "Range"));
        builder.rationale(parseString("rationale", JsonSupport.getJsonValue(jsonObject, "rationale", JsonString.class), jsonObject.get("_rationale"), -1));
        stackPop();
        return builder.build();
    }

    protected RiskEvidenceSynthesis parseRiskEvidenceSynthesis(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskEvidenceSynthesis", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference population = parseReference("population", JsonSupport.getJsonValue(jsonObject, "population", JsonObject.class), -1);
        Reference outcome = parseReference("outcome", JsonSupport.getJsonValue(jsonObject, "outcome", JsonObject.class), -1);
        RiskEvidenceSynthesis.Builder builder = RiskEvidenceSynthesis.builder(status, population, outcome);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.approvalDate(parseDate("approvalDate", JsonSupport.getJsonValue(jsonObject, "approvalDate", JsonString.class), jsonObject.get("_approvalDate"), -1));
        builder.lastReviewDate(parseDate("lastReviewDate", JsonSupport.getJsonValue(jsonObject, "lastReviewDate", JsonString.class), jsonObject.get("_lastReviewDate"), -1));
        builder.effectivePeriod(parsePeriod("effectivePeriod", JsonSupport.getJsonValue(jsonObject, "effectivePeriod", JsonObject.class), -1));
        JsonArray topicArray = JsonSupport.getJsonArray(jsonObject, "topic");
        if (topicArray != null) {
            int index = 0;
            for (JsonValue jsonValue : topicArray) {
                builder.topic(parseCodeableConcept("topic", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseContactDetail("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray editorArray = JsonSupport.getJsonArray(jsonObject, "editor");
        if (editorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : editorArray) {
                builder.editor(parseContactDetail("editor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reviewerArray = JsonSupport.getJsonArray(jsonObject, "reviewer");
        if (reviewerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reviewerArray) {
                builder.reviewer(parseContactDetail("reviewer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray endorserArray = JsonSupport.getJsonArray(jsonObject, "endorser");
        if (endorserArray != null) {
            int index = 0;
            for (JsonValue jsonValue : endorserArray) {
                builder.endorser(parseContactDetail("endorser", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relatedArtifactArray = JsonSupport.getJsonArray(jsonObject, "relatedArtifact");
        if (relatedArtifactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relatedArtifactArray) {
                builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.synthesisType(parseCodeableConcept("synthesisType", JsonSupport.getJsonValue(jsonObject, "synthesisType", JsonObject.class), -1));
        builder.studyType(parseCodeableConcept("studyType", JsonSupport.getJsonValue(jsonObject, "studyType", JsonObject.class), -1));
        builder.exposure(parseReference("exposure", JsonSupport.getJsonValue(jsonObject, "exposure", JsonObject.class), -1));
        builder.sampleSize(parseRiskEvidenceSynthesisSampleSize("sampleSize", JsonSupport.getJsonValue(jsonObject, "sampleSize", JsonObject.class), -1));
        builder.riskEstimate(parseRiskEvidenceSynthesisRiskEstimate("riskEstimate", JsonSupport.getJsonValue(jsonObject, "riskEstimate", JsonObject.class), -1));
        JsonArray certaintyArray = JsonSupport.getJsonArray(jsonObject, "certainty");
        if (certaintyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : certaintyArray) {
                builder.certainty(parseRiskEvidenceSynthesisCertainty("certainty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RiskEvidenceSynthesis.Certainty parseRiskEvidenceSynthesisCertainty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskEvidenceSynthesis.Certainty", jsonObject);
        RiskEvidenceSynthesis.Certainty.Builder builder = RiskEvidenceSynthesis.Certainty.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray ratingArray = JsonSupport.getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ratingArray) {
                builder.rating(parseCodeableConcept("rating", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray certaintySubcomponentArray = JsonSupport.getJsonArray(jsonObject, "certaintySubcomponent");
        if (certaintySubcomponentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : certaintySubcomponentArray) {
                builder.certaintySubcomponent(parseRiskEvidenceSynthesisCertaintyCertaintySubcomponent("certaintySubcomponent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RiskEvidenceSynthesis.Certainty.CertaintySubcomponent parseRiskEvidenceSynthesisCertaintyCertaintySubcomponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskEvidenceSynthesis.Certainty.CertaintySubcomponent", jsonObject);
        RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.Builder builder = RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        JsonArray ratingArray = JsonSupport.getJsonArray(jsonObject, "rating");
        if (ratingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ratingArray) {
                builder.rating(parseCodeableConcept("rating", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RiskEvidenceSynthesis.RiskEstimate parseRiskEvidenceSynthesisRiskEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskEvidenceSynthesis.RiskEstimate", jsonObject);
        RiskEvidenceSynthesis.RiskEstimate.Builder builder = RiskEvidenceSynthesis.RiskEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.value(parseDecimal("value", JsonSupport.getJsonValue(jsonObject, "value", JsonNumber.class), jsonObject.get("_value"), -1));
        builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", JsonSupport.getJsonValue(jsonObject, "unitOfMeasure", JsonObject.class), -1));
        builder.denominatorCount(parseInteger("denominatorCount", JsonSupport.getJsonValue(jsonObject, "denominatorCount", JsonNumber.class), jsonObject.get("_denominatorCount"), -1));
        builder.numeratorCount(parseInteger("numeratorCount", JsonSupport.getJsonValue(jsonObject, "numeratorCount", JsonNumber.class), jsonObject.get("_numeratorCount"), -1));
        JsonArray precisionEstimateArray = JsonSupport.getJsonArray(jsonObject, "precisionEstimate");
        if (precisionEstimateArray != null) {
            int index = 0;
            for (JsonValue jsonValue : precisionEstimateArray) {
                builder.precisionEstimate(parseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate("precisionEstimate", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate parseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate", jsonObject);
        RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.Builder builder = RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.level(parseDecimal("level", JsonSupport.getJsonValue(jsonObject, "level", JsonNumber.class), jsonObject.get("_level"), -1));
        builder.from(parseDecimal("from", JsonSupport.getJsonValue(jsonObject, "from", JsonNumber.class), jsonObject.get("_from"), -1));
        builder.to(parseDecimal("to", JsonSupport.getJsonValue(jsonObject, "to", JsonNumber.class), jsonObject.get("_to"), -1));
        stackPop();
        return builder.build();
    }

    protected RiskEvidenceSynthesis.SampleSize parseRiskEvidenceSynthesisSampleSize(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("RiskEvidenceSynthesis.SampleSize", jsonObject);
        RiskEvidenceSynthesis.SampleSize.Builder builder = RiskEvidenceSynthesis.SampleSize.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.numberOfStudies(parseInteger("numberOfStudies", JsonSupport.getJsonValue(jsonObject, "numberOfStudies", JsonNumber.class), jsonObject.get("_numberOfStudies"), -1));
        builder.numberOfParticipants(parseInteger("numberOfParticipants", JsonSupport.getJsonValue(jsonObject, "numberOfParticipants", JsonNumber.class), jsonObject.get("_numberOfParticipants"), -1));
        stackPop();
        return builder.build();
    }

    protected SampledData parseSampledData(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SampledData", jsonObject);
        SimpleQuantity origin = (SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "origin", JsonSupport.getJsonValue(jsonObject, "origin", JsonObject.class), -1);
        Decimal period = parseDecimal("period", JsonSupport.getJsonValue(jsonObject, "period", JsonNumber.class), jsonObject.get("_period"), -1);
        PositiveInt dimensions = (PositiveInt) parseInteger(PositiveInt.builder(), "dimensions", JsonSupport.getJsonValue(jsonObject, "dimensions", JsonNumber.class), jsonObject.get("_dimensions"), -1);
        SampledData.Builder builder = SampledData.builder(origin, period, dimensions);
        parseElement(builder, jsonObject);
        builder.factor(parseDecimal("factor", JsonSupport.getJsonValue(jsonObject, "factor", JsonNumber.class), jsonObject.get("_factor"), -1));
        builder.lowerLimit(parseDecimal("lowerLimit", JsonSupport.getJsonValue(jsonObject, "lowerLimit", JsonNumber.class), jsonObject.get("_lowerLimit"), -1));
        builder.upperLimit(parseDecimal("upperLimit", JsonSupport.getJsonValue(jsonObject, "upperLimit", JsonNumber.class), jsonObject.get("_upperLimit"), -1));
        builder.data(parseString("data", JsonSupport.getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    protected Schedule parseSchedule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Schedule", jsonObject);
        java.util.List<Reference> actor = new ArrayList<>();
        JsonArray actorArray = JsonSupport.getJsonArray(jsonObject, "actor");
        if (actorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actorArray) {
                actor.add(parseReference("actor", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Schedule.Builder builder = Schedule.builder(actor);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.active(parseBoolean("active", JsonSupport.getJsonValue(jsonObject, "active", JsonValue.class), jsonObject.get("_active"), -1));
        JsonArray serviceCategoryArray = JsonSupport.getJsonArray(jsonObject, "serviceCategory");
        if (serviceCategoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceCategoryArray) {
                builder.serviceCategory(parseCodeableConcept("serviceCategory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray serviceTypeArray = JsonSupport.getJsonArray(jsonObject, "serviceType");
        if (serviceTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceTypeArray) {
                builder.serviceType(parseCodeableConcept("serviceType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialtyArray = JsonSupport.getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialtyArray) {
                builder.specialty(parseCodeableConcept("specialty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.planningHorizon(parsePeriod("planningHorizon", JsonSupport.getJsonValue(jsonObject, "planningHorizon", JsonObject.class), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected SearchParameter parseSearchParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SearchParameter", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Markdown description = (Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        java.util.List<ResourceType> base = new ArrayList<>();
        JsonArray baseArray = JsonSupport.getJsonArray(jsonObject, "base", true);
        if (baseArray != null) {
            int index = 0;
            JsonArray _baseArray = jsonObject.getJsonArray("_base");
            for (JsonValue jsonValue : baseArray) {
                base.add((ResourceType) parseString(ResourceType.builder(), "base", jsonValue, JsonSupport.getJsonValue(_baseArray, index), index));
                index++;
            }
        }
        SearchParamType type = (SearchParamType) parseString(SearchParamType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        SearchParameter.Builder builder = SearchParameter.builder(url, name, status, description, code, base, type);
        parseDomainResource(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", JsonSupport.getJsonValue(jsonObject, "derivedFrom", JsonString.class), jsonObject.get("_derivedFrom"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.xpath(parseString("xpath", JsonSupport.getJsonValue(jsonObject, "xpath", JsonString.class), jsonObject.get("_xpath"), -1));
        builder.xpathUsage((XPathUsageType) parseString(XPathUsageType.builder(), "xpathUsage", JsonSupport.getJsonValue(jsonObject, "xpathUsage", JsonString.class), jsonObject.get("_xpathUsage"), -1));
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target", true);
        if (targetArray != null) {
            int index = 0;
            JsonArray _targetArray = jsonObject.getJsonArray("_target");
            for (JsonValue jsonValue : targetArray) {
                builder.target((ResourceType) parseString(ResourceType.builder(), "target", jsonValue, JsonSupport.getJsonValue(_targetArray, index), index));
                index++;
            }
        }
        builder.multipleOr(parseBoolean("multipleOr", JsonSupport.getJsonValue(jsonObject, "multipleOr", JsonValue.class), jsonObject.get("_multipleOr"), -1));
        builder.multipleAnd(parseBoolean("multipleAnd", JsonSupport.getJsonValue(jsonObject, "multipleAnd", JsonValue.class), jsonObject.get("_multipleAnd"), -1));
        JsonArray comparatorArray = JsonSupport.getJsonArray(jsonObject, "comparator", true);
        if (comparatorArray != null) {
            int index = 0;
            JsonArray _comparatorArray = jsonObject.getJsonArray("_comparator");
            for (JsonValue jsonValue : comparatorArray) {
                builder.comparator((SearchComparator) parseString(SearchComparator.builder(), "comparator", jsonValue, JsonSupport.getJsonValue(_comparatorArray, index), index));
                index++;
            }
        }
        JsonArray modifierArray = JsonSupport.getJsonArray(jsonObject, "modifier", true);
        if (modifierArray != null) {
            int index = 0;
            JsonArray _modifierArray = jsonObject.getJsonArray("_modifier");
            for (JsonValue jsonValue : modifierArray) {
                builder.modifier((SearchModifierCode) parseString(SearchModifierCode.builder(), "modifier", jsonValue, JsonSupport.getJsonValue(_modifierArray, index), index));
                index++;
            }
        }
        JsonArray chainArray = JsonSupport.getJsonArray(jsonObject, "chain", true);
        if (chainArray != null) {
            int index = 0;
            JsonArray _chainArray = jsonObject.getJsonArray("_chain");
            for (JsonValue jsonValue : chainArray) {
                builder.chain(parseString("chain", jsonValue, JsonSupport.getJsonValue(_chainArray, index), index));
                index++;
            }
        }
        JsonArray componentArray = JsonSupport.getJsonArray(jsonObject, "component");
        if (componentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : componentArray) {
                builder.component(parseSearchParameterComponent("component", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SearchParameter.Component parseSearchParameterComponent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SearchParameter.Component", jsonObject);
        Canonical definition = (Canonical) parseUri(Canonical.builder(), "definition", JsonSupport.getJsonValue(jsonObject, "definition", JsonString.class), jsonObject.get("_definition"), -1);
        String expression = parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1);
        SearchParameter.Component.Builder builder = SearchParameter.Component.builder(definition, expression);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ServiceRequest parseServiceRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ServiceRequest", jsonObject);
        ServiceRequestStatus status = (ServiceRequestStatus) parseString(ServiceRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ServiceRequestIntent intent = (ServiceRequestIntent) parseString(ServiceRequestIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        Reference subject = parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1);
        ServiceRequest.Builder builder = ServiceRequest.builder(status, intent, subject);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray instantiatesCanonicalArray = JsonSupport.getJsonArray(jsonObject, "instantiatesCanonical", true);
        if (instantiatesCanonicalArray != null) {
            int index = 0;
            JsonArray _instantiatesCanonicalArray = jsonObject.getJsonArray("_instantiatesCanonical");
            for (JsonValue jsonValue : instantiatesCanonicalArray) {
                builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", jsonValue, JsonSupport.getJsonValue(_instantiatesCanonicalArray, index), index));
                index++;
            }
        }
        JsonArray instantiatesUriArray = JsonSupport.getJsonArray(jsonObject, "instantiatesUri", true);
        if (instantiatesUriArray != null) {
            int index = 0;
            JsonArray _instantiatesUriArray = jsonObject.getJsonArray("_instantiatesUri");
            for (JsonValue jsonValue : instantiatesUriArray) {
                builder.instantiatesUri(parseUri("instantiatesUri", jsonValue, JsonSupport.getJsonValue(_instantiatesUriArray, index), index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray replacesArray = JsonSupport.getJsonArray(jsonObject, "replaces");
        if (replacesArray != null) {
            int index = 0;
            for (JsonValue jsonValue : replacesArray) {
                builder.replaces(parseReference("replaces", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.requisition(parseIdentifier("requisition", JsonSupport.getJsonValue(jsonObject, "requisition", JsonObject.class), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.priority((ServiceRequestPriority) parseString(ServiceRequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.doNotPerform(parseBoolean("doNotPerform", JsonSupport.getJsonValue(jsonObject, "doNotPerform", JsonValue.class), jsonObject.get("_doNotPerform"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        JsonArray orderDetailArray = JsonSupport.getJsonArray(jsonObject, "orderDetail");
        if (orderDetailArray != null) {
            int index = 0;
            for (JsonValue jsonValue : orderDetailArray) {
                builder.orderDetail(parseCodeableConcept("orderDetail", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.quantity(parseChoiceElement("quantity", jsonObject, "Quantity", "Ratio", "Range"));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period", "Timing"));
        builder.asNeeded(parseChoiceElement("asNeeded", jsonObject, "Boolean", "CodeableConcept"));
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", JsonSupport.getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        builder.performerType(parseCodeableConcept("performerType", JsonSupport.getJsonValue(jsonObject, "performerType", JsonObject.class), -1));
        JsonArray performerArray = JsonSupport.getJsonArray(jsonObject, "performer");
        if (performerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerArray) {
                builder.performer(parseReference("performer", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray locationCodeArray = JsonSupport.getJsonArray(jsonObject, "locationCode");
        if (locationCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationCodeArray) {
                builder.locationCode(parseCodeableConcept("locationCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray locationReferenceArray = JsonSupport.getJsonArray(jsonObject, "locationReference");
        if (locationReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : locationReferenceArray) {
                builder.locationReference(parseReference("locationReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseReference("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray supportingInfoArray = JsonSupport.getJsonArray(jsonObject, "supportingInfo");
        if (supportingInfoArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supportingInfoArray) {
                builder.supportingInfo(parseReference("supportingInfo", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specimenArray = JsonSupport.getJsonArray(jsonObject, "specimen");
        if (specimenArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specimenArray) {
                builder.specimen(parseReference("specimen", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray bodySiteArray = JsonSupport.getJsonArray(jsonObject, "bodySite");
        if (bodySiteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : bodySiteArray) {
                builder.bodySite(parseCodeableConcept("bodySite", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.patientInstruction(parseString("patientInstruction", JsonSupport.getJsonValue(jsonObject, "patientInstruction", JsonString.class), jsonObject.get("_patientInstruction"), -1));
        JsonArray relevantHistoryArray = JsonSupport.getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relevantHistoryArray) {
                builder.relevantHistory(parseReference("relevantHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Signature parseSignature(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Signature", jsonObject);
        java.util.List<Coding> type = new ArrayList<>();
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                type.add(parseCoding("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        Instant when = parseInstant("when", JsonSupport.getJsonValue(jsonObject, "when", JsonString.class), jsonObject.get("_when"), -1);
        Reference who = parseReference("who", JsonSupport.getJsonValue(jsonObject, "who", JsonObject.class), -1);
        Signature.Builder builder = Signature.builder(type, when, who);
        parseElement(builder, jsonObject);
        builder.onBehalfOf(parseReference("onBehalfOf", JsonSupport.getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        builder.targetFormat((Code) parseString(Code.builder(), "targetFormat", JsonSupport.getJsonValue(jsonObject, "targetFormat", JsonString.class), jsonObject.get("_targetFormat"), -1));
        builder.sigFormat((Code) parseString(Code.builder(), "sigFormat", JsonSupport.getJsonValue(jsonObject, "sigFormat", JsonString.class), jsonObject.get("_sigFormat"), -1));
        builder.data(parseBase64Binary("data", JsonSupport.getJsonValue(jsonObject, "data", JsonString.class), jsonObject.get("_data"), -1));
        stackPop();
        return builder.build();
    }

    protected Slot parseSlot(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Slot", jsonObject);
        Reference schedule = parseReference("schedule", JsonSupport.getJsonValue(jsonObject, "schedule", JsonObject.class), -1);
        SlotStatus status = (SlotStatus) parseString(SlotStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Instant start = parseInstant("start", JsonSupport.getJsonValue(jsonObject, "start", JsonString.class), jsonObject.get("_start"), -1);
        Instant end = parseInstant("end", JsonSupport.getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1);
        Slot.Builder builder = Slot.builder(schedule, status, start, end);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray serviceCategoryArray = JsonSupport.getJsonArray(jsonObject, "serviceCategory");
        if (serviceCategoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceCategoryArray) {
                builder.serviceCategory(parseCodeableConcept("serviceCategory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray serviceTypeArray = JsonSupport.getJsonArray(jsonObject, "serviceType");
        if (serviceTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : serviceTypeArray) {
                builder.serviceType(parseCodeableConcept("serviceType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray specialtyArray = JsonSupport.getJsonArray(jsonObject, "specialty");
        if (specialtyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : specialtyArray) {
                builder.specialty(parseCodeableConcept("specialty", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.appointmentType(parseCodeableConcept("appointmentType", JsonSupport.getJsonValue(jsonObject, "appointmentType", JsonObject.class), -1));
        builder.overbooked(parseBoolean("overbooked", JsonSupport.getJsonValue(jsonObject, "overbooked", JsonValue.class), jsonObject.get("_overbooked"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected Specimen parseSpecimen(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Specimen", jsonObject);
        Specimen.Builder builder = Specimen.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.accessionIdentifier(parseIdentifier("accessionIdentifier", JsonSupport.getJsonValue(jsonObject, "accessionIdentifier", JsonObject.class), -1));
        builder.status((SpecimenStatus) parseString(SpecimenStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.subject(parseReference("subject", JsonSupport.getJsonValue(jsonObject, "subject", JsonObject.class), -1));
        builder.receivedTime(parseDateTime("receivedTime", JsonSupport.getJsonValue(jsonObject, "receivedTime", JsonString.class), jsonObject.get("_receivedTime"), -1));
        JsonArray parentArray = JsonSupport.getJsonArray(jsonObject, "parent");
        if (parentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parentArray) {
                builder.parent(parseReference("parent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray requestArray = JsonSupport.getJsonArray(jsonObject, "request");
        if (requestArray != null) {
            int index = 0;
            for (JsonValue jsonValue : requestArray) {
                builder.request(parseReference("request", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.collection(parseSpecimenCollection("collection", JsonSupport.getJsonValue(jsonObject, "collection", JsonObject.class), -1));
        JsonArray processingArray = JsonSupport.getJsonArray(jsonObject, "processing");
        if (processingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : processingArray) {
                builder.processing(parseSpecimenProcessing("processing", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray containerArray = JsonSupport.getJsonArray(jsonObject, "container");
        if (containerArray != null) {
            int index = 0;
            for (JsonValue jsonValue : containerArray) {
                builder.container(parseSpecimenContainer("container", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray conditionArray = JsonSupport.getJsonArray(jsonObject, "condition");
        if (conditionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conditionArray) {
                builder.condition(parseCodeableConcept("condition", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Specimen.Collection parseSpecimenCollection(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Specimen.Collection", jsonObject);
        Specimen.Collection.Builder builder = Specimen.Collection.builder();
        parseBackboneElement(builder, jsonObject);
        builder.collector(parseReference("collector", JsonSupport.getJsonValue(jsonObject, "collector", JsonObject.class), -1));
        builder.collected(parseChoiceElement("collected", jsonObject, "DateTime", "Period"));
        builder.duration((Duration) parseQuantity(Duration.builder(), "duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.bodySite(parseCodeableConcept("bodySite", JsonSupport.getJsonValue(jsonObject, "bodySite", JsonObject.class), -1));
        builder.fastingStatus(parseChoiceElement("fastingStatus", jsonObject, "CodeableConcept", "Duration"));
        stackPop();
        return builder.build();
    }

    protected Specimen.Container parseSpecimenContainer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Specimen.Container", jsonObject);
        Specimen.Container.Builder builder = Specimen.Container.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", JsonSupport.getJsonValue(jsonObject, "capacity", JsonObject.class), -1));
        builder.specimenQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "specimenQuantity", JsonSupport.getJsonValue(jsonObject, "specimenQuantity", JsonObject.class), -1));
        builder.additive(parseChoiceElement("additive", jsonObject, "CodeableConcept", "Reference"));
        stackPop();
        return builder.build();
    }

    protected Specimen.Processing parseSpecimenProcessing(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Specimen.Processing", jsonObject);
        Specimen.Processing.Builder builder = Specimen.Processing.builder();
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.procedure(parseCodeableConcept("procedure", JsonSupport.getJsonValue(jsonObject, "procedure", JsonObject.class), -1));
        JsonArray additiveArray = JsonSupport.getJsonArray(jsonObject, "additive");
        if (additiveArray != null) {
            int index = 0;
            for (JsonValue jsonValue : additiveArray) {
                builder.additive(parseReference("additive", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.time(parseChoiceElement("time", jsonObject, "DateTime", "Period"));
        stackPop();
        return builder.build();
    }

    protected SpecimenDefinition parseSpecimenDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SpecimenDefinition", jsonObject);
        SpecimenDefinition.Builder builder = SpecimenDefinition.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.typeCollected(parseCodeableConcept("typeCollected", JsonSupport.getJsonValue(jsonObject, "typeCollected", JsonObject.class), -1));
        JsonArray patientPreparationArray = JsonSupport.getJsonArray(jsonObject, "patientPreparation");
        if (patientPreparationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : patientPreparationArray) {
                builder.patientPreparation(parseCodeableConcept("patientPreparation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.timeAspect(parseString("timeAspect", JsonSupport.getJsonValue(jsonObject, "timeAspect", JsonString.class), jsonObject.get("_timeAspect"), -1));
        JsonArray collectionArray = JsonSupport.getJsonArray(jsonObject, "collection");
        if (collectionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : collectionArray) {
                builder.collection(parseCodeableConcept("collection", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray typeTestedArray = JsonSupport.getJsonArray(jsonObject, "typeTested");
        if (typeTestedArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeTestedArray) {
                builder.typeTested(parseSpecimenDefinitionTypeTested("typeTested", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SpecimenDefinition.TypeTested parseSpecimenDefinitionTypeTested(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SpecimenDefinition.TypeTested", jsonObject);
        SpecimenContainedPreference preference = (SpecimenContainedPreference) parseString(SpecimenContainedPreference.builder(), "preference", JsonSupport.getJsonValue(jsonObject, "preference", JsonString.class), jsonObject.get("_preference"), -1);
        SpecimenDefinition.TypeTested.Builder builder = SpecimenDefinition.TypeTested.builder(preference);
        parseBackboneElement(builder, jsonObject);
        builder.isDerived(parseBoolean("isDerived", JsonSupport.getJsonValue(jsonObject, "isDerived", JsonValue.class), jsonObject.get("_isDerived"), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.container(parseSpecimenDefinitionTypeTestedContainer("container", JsonSupport.getJsonValue(jsonObject, "container", JsonObject.class), -1));
        builder.requirement(parseString("requirement", JsonSupport.getJsonValue(jsonObject, "requirement", JsonString.class), jsonObject.get("_requirement"), -1));
        builder.retentionTime((Duration) parseQuantity(Duration.builder(), "retentionTime", JsonSupport.getJsonValue(jsonObject, "retentionTime", JsonObject.class), -1));
        JsonArray rejectionCriterionArray = JsonSupport.getJsonArray(jsonObject, "rejectionCriterion");
        if (rejectionCriterionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : rejectionCriterionArray) {
                builder.rejectionCriterion(parseCodeableConcept("rejectionCriterion", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray handlingArray = JsonSupport.getJsonArray(jsonObject, "handling");
        if (handlingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : handlingArray) {
                builder.handling(parseSpecimenDefinitionTypeTestedHandling("handling", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SpecimenDefinition.TypeTested.Container parseSpecimenDefinitionTypeTestedContainer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SpecimenDefinition.TypeTested.Container", jsonObject);
        SpecimenDefinition.TypeTested.Container.Builder builder = SpecimenDefinition.TypeTested.Container.builder();
        parseBackboneElement(builder, jsonObject);
        builder.material(parseCodeableConcept("material", JsonSupport.getJsonValue(jsonObject, "material", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.cap(parseCodeableConcept("cap", JsonSupport.getJsonValue(jsonObject, "cap", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", JsonSupport.getJsonValue(jsonObject, "capacity", JsonObject.class), -1));
        builder.minimumVolume(parseChoiceElement("minimumVolume", jsonObject, "SimpleQuantity", "String"));
        JsonArray additiveArray = JsonSupport.getJsonArray(jsonObject, "additive");
        if (additiveArray != null) {
            int index = 0;
            for (JsonValue jsonValue : additiveArray) {
                builder.additive(parseSpecimenDefinitionTypeTestedContainerAdditive("additive", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.preparation(parseString("preparation", JsonSupport.getJsonValue(jsonObject, "preparation", JsonString.class), jsonObject.get("_preparation"), -1));
        stackPop();
        return builder.build();
    }

    protected SpecimenDefinition.TypeTested.Container.Additive parseSpecimenDefinitionTypeTestedContainerAdditive(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SpecimenDefinition.TypeTested.Container.Additive", jsonObject);
        Element additive = parseChoiceElement("additive", jsonObject, "CodeableConcept", "Reference");
        SpecimenDefinition.TypeTested.Container.Additive.Builder builder = SpecimenDefinition.TypeTested.Container.Additive.builder(additive);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected SpecimenDefinition.TypeTested.Handling parseSpecimenDefinitionTypeTestedHandling(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SpecimenDefinition.TypeTested.Handling", jsonObject);
        SpecimenDefinition.TypeTested.Handling.Builder builder = SpecimenDefinition.TypeTested.Handling.builder();
        parseBackboneElement(builder, jsonObject);
        builder.temperatureQualifier(parseCodeableConcept("temperatureQualifier", JsonSupport.getJsonValue(jsonObject, "temperatureQualifier", JsonObject.class), -1));
        builder.temperatureRange(parseRange("temperatureRange", JsonSupport.getJsonValue(jsonObject, "temperatureRange", JsonObject.class), -1));
        builder.maxDuration((Duration) parseQuantity(Duration.builder(), "maxDuration", JsonSupport.getJsonValue(jsonObject, "maxDuration", JsonObject.class), -1));
        builder.instruction(parseString("instruction", JsonSupport.getJsonValue(jsonObject, "instruction", JsonString.class), jsonObject.get("_instruction"), -1));
        stackPop();
        return builder.build();
    }

    protected String parseString(String.Builder builder, java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected String parseString(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        return parseString(String.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    protected StructureDefinition parseStructureDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureDefinition", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        StructureDefinitionKind kind = (StructureDefinitionKind) parseString(StructureDefinitionKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        Boolean _abstract = parseBoolean("abstract", JsonSupport.getJsonValue(jsonObject, "abstract", JsonValue.class), jsonObject.get("_abstract"), -1);
        Uri type = parseUri("type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        StructureDefinition.Builder builder = StructureDefinition.builder(url, name, status, kind, _abstract, type);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray keywordArray = JsonSupport.getJsonArray(jsonObject, "keyword");
        if (keywordArray != null) {
            int index = 0;
            for (JsonValue jsonValue : keywordArray) {
                builder.keyword(parseCoding("keyword", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", JsonSupport.getJsonValue(jsonObject, "fhirVersion", JsonString.class), jsonObject.get("_fhirVersion"), -1));
        JsonArray mappingArray = JsonSupport.getJsonArray(jsonObject, "mapping");
        if (mappingArray != null) {
            int index = 0;
            for (JsonValue jsonValue : mappingArray) {
                builder.mapping(parseStructureDefinitionMapping("mapping", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contextArray = JsonSupport.getJsonArray(jsonObject, "context");
        if (contextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contextArray) {
                builder.context(parseStructureDefinitionContext("context", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray contextInvariantArray = JsonSupport.getJsonArray(jsonObject, "contextInvariant", true);
        if (contextInvariantArray != null) {
            int index = 0;
            JsonArray _contextInvariantArray = jsonObject.getJsonArray("_contextInvariant");
            for (JsonValue jsonValue : contextInvariantArray) {
                builder.contextInvariant(parseString("contextInvariant", jsonValue, JsonSupport.getJsonValue(_contextInvariantArray, index), index));
                index++;
            }
        }
        builder.baseDefinition((Canonical) parseUri(Canonical.builder(), "baseDefinition", JsonSupport.getJsonValue(jsonObject, "baseDefinition", JsonString.class), jsonObject.get("_baseDefinition"), -1));
        builder.derivation((TypeDerivationRule) parseString(TypeDerivationRule.builder(), "derivation", JsonSupport.getJsonValue(jsonObject, "derivation", JsonString.class), jsonObject.get("_derivation"), -1));
        builder.snapshot(parseStructureDefinitionSnapshot("snapshot", JsonSupport.getJsonValue(jsonObject, "snapshot", JsonObject.class), -1));
        builder.differential(parseStructureDefinitionDifferential("differential", JsonSupport.getJsonValue(jsonObject, "differential", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected StructureDefinition.Context parseStructureDefinitionContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureDefinition.Context", jsonObject);
        ExtensionContextType type = (ExtensionContextType) parseString(ExtensionContextType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        String expression = parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1);
        StructureDefinition.Context.Builder builder = StructureDefinition.Context.builder(type, expression);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected StructureDefinition.Differential parseStructureDefinitionDifferential(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureDefinition.Differential", jsonObject);
        java.util.List<ElementDefinition> element = new ArrayList<>();
        JsonArray elementArray = JsonSupport.getJsonArray(jsonObject, "element");
        if (elementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : elementArray) {
                element.add(parseElementDefinition("element", (JsonObject) jsonValue, index));
                index++;
            }
        }
        StructureDefinition.Differential.Builder builder = StructureDefinition.Differential.builder(element);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected StructureDefinition.Mapping parseStructureDefinitionMapping(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureDefinition.Mapping", jsonObject);
        Id identity = (Id) parseString(Id.builder(), "identity", JsonSupport.getJsonValue(jsonObject, "identity", JsonString.class), jsonObject.get("_identity"), -1);
        StructureDefinition.Mapping.Builder builder = StructureDefinition.Mapping.builder(identity);
        parseBackboneElement(builder, jsonObject);
        builder.uri(parseUri("uri", JsonSupport.getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        stackPop();
        return builder.build();
    }

    protected StructureDefinition.Snapshot parseStructureDefinitionSnapshot(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureDefinition.Snapshot", jsonObject);
        java.util.List<ElementDefinition> element = new ArrayList<>();
        JsonArray elementArray = JsonSupport.getJsonArray(jsonObject, "element");
        if (elementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : elementArray) {
                element.add(parseElementDefinition("element", (JsonObject) jsonValue, index));
                index++;
            }
        }
        StructureDefinition.Snapshot.Builder builder = StructureDefinition.Snapshot.builder(element);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected StructureMap parseStructureMap(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        java.util.List<StructureMap.Group> group = new ArrayList<>();
        JsonArray groupArray = JsonSupport.getJsonArray(jsonObject, "group");
        if (groupArray != null) {
            int index = 0;
            for (JsonValue jsonValue : groupArray) {
                group.add(parseStructureMapGroup("group", (JsonObject) jsonValue, index));
                index++;
            }
        }
        StructureMap.Builder builder = StructureMap.builder(url, name, status, group);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray structureArray = JsonSupport.getJsonArray(jsonObject, "structure");
        if (structureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : structureArray) {
                builder.structure(parseStructureMapStructure("structure", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray importArray = JsonSupport.getJsonArray(jsonObject, "import", true);
        if (importArray != null) {
            int index = 0;
            JsonArray _importArray = jsonObject.getJsonArray("_import");
            for (JsonValue jsonValue : importArray) {
                builder._import((Canonical) parseUri(Canonical.builder(), "import", jsonValue, JsonSupport.getJsonValue(_importArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group parseStructureMapGroup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group", jsonObject);
        Id name = (Id) parseString(Id.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        StructureMapGroupTypeMode typeMode = (StructureMapGroupTypeMode) parseString(StructureMapGroupTypeMode.builder(), "typeMode", JsonSupport.getJsonValue(jsonObject, "typeMode", JsonString.class), jsonObject.get("_typeMode"), -1);
        java.util.List<StructureMap.Group.Input> input = new ArrayList<>();
        JsonArray inputArray = JsonSupport.getJsonArray(jsonObject, "input");
        if (inputArray != null) {
            int index = 0;
            for (JsonValue jsonValue : inputArray) {
                input.add(parseStructureMapGroupInput("input", (JsonObject) jsonValue, index));
                index++;
            }
        }
        java.util.List<StructureMap.Group.Rule> rule = new ArrayList<>();
        JsonArray ruleArray = JsonSupport.getJsonArray(jsonObject, "rule");
        if (ruleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ruleArray) {
                rule.add(parseStructureMapGroupRule("rule", (JsonObject) jsonValue, index));
                index++;
            }
        }
        StructureMap.Group.Builder builder = StructureMap.Group.builder(name, typeMode, input, rule);
        parseBackboneElement(builder, jsonObject);
        builder._extends((Id) parseString(Id.builder(), "extends", JsonSupport.getJsonValue(jsonObject, "extends", JsonString.class), jsonObject.get("_extends"), -1));
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group.Input parseStructureMapGroupInput(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group.Input", jsonObject);
        Id name = (Id) parseString(Id.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        StructureMapInputMode mode = (StructureMapInputMode) parseString(StructureMapInputMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        StructureMap.Group.Input.Builder builder = StructureMap.Group.Input.builder(name, mode);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseString("type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group.Rule parseStructureMapGroupRule(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group.Rule", jsonObject);
        Id name = (Id) parseString(Id.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        java.util.List<StructureMap.Group.Rule.Source> source = new ArrayList<>();
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                source.add(parseStructureMapGroupRuleSource("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        StructureMap.Group.Rule.Builder builder = StructureMap.Group.Rule.builder(name, source);
        parseBackboneElement(builder, jsonObject);
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parseStructureMapGroupRuleTarget("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray ruleArray = JsonSupport.getJsonArray(jsonObject, "rule");
        if (ruleArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ruleArray) {
                builder.rule(parseStructureMapGroupRule("rule", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray dependentArray = JsonSupport.getJsonArray(jsonObject, "dependent");
        if (dependentArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dependentArray) {
                builder.dependent(parseStructureMapGroupRuleDependent("dependent", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group.Rule.Dependent parseStructureMapGroupRuleDependent(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group.Rule.Dependent", jsonObject);
        Id name = (Id) parseString(Id.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        java.util.List<String> variable = new ArrayList<>();
        JsonArray variableArray = JsonSupport.getJsonArray(jsonObject, "variable", true);
        if (variableArray != null) {
            int index = 0;
            JsonArray _variableArray = jsonObject.getJsonArray("_variable");
            for (JsonValue jsonValue : variableArray) {
                variable.add(parseString("variable", jsonValue, JsonSupport.getJsonValue(_variableArray, index), index));
                index++;
            }
        }
        StructureMap.Group.Rule.Dependent.Builder builder = StructureMap.Group.Rule.Dependent.builder(name, variable);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group.Rule.Source parseStructureMapGroupRuleSource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group.Rule.Source", jsonObject);
        Id context = (Id) parseString(Id.builder(), "context", JsonSupport.getJsonValue(jsonObject, "context", JsonString.class), jsonObject.get("_context"), -1);
        StructureMap.Group.Rule.Source.Builder builder = StructureMap.Group.Rule.Source.builder(context);
        parseBackboneElement(builder, jsonObject);
        builder.min(parseInteger("min", JsonSupport.getJsonValue(jsonObject, "min", JsonNumber.class), jsonObject.get("_min"), -1));
        builder.max(parseString("max", JsonSupport.getJsonValue(jsonObject, "max", JsonString.class), jsonObject.get("_max"), -1));
        builder.type(parseString("type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1));
        builder.defaultValue(parseChoiceElement("defaultValue", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage"));
        builder.element(parseString("element", JsonSupport.getJsonValue(jsonObject, "element", JsonString.class), jsonObject.get("_element"), -1));
        builder.listMode((StructureMapSourceListMode) parseString(StructureMapSourceListMode.builder(), "listMode", JsonSupport.getJsonValue(jsonObject, "listMode", JsonString.class), jsonObject.get("_listMode"), -1));
        builder.variable((Id) parseString(Id.builder(), "variable", JsonSupport.getJsonValue(jsonObject, "variable", JsonString.class), jsonObject.get("_variable"), -1));
        builder.condition(parseString("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonString.class), jsonObject.get("_condition"), -1));
        builder.check(parseString("check", JsonSupport.getJsonValue(jsonObject, "check", JsonString.class), jsonObject.get("_check"), -1));
        builder.logMessage(parseString("logMessage", JsonSupport.getJsonValue(jsonObject, "logMessage", JsonString.class), jsonObject.get("_logMessage"), -1));
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group.Rule.Target parseStructureMapGroupRuleTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group.Rule.Target", jsonObject);
        StructureMap.Group.Rule.Target.Builder builder = StructureMap.Group.Rule.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.context((Id) parseString(Id.builder(), "context", JsonSupport.getJsonValue(jsonObject, "context", JsonString.class), jsonObject.get("_context"), -1));
        builder.contextType((StructureMapContextType) parseString(StructureMapContextType.builder(), "contextType", JsonSupport.getJsonValue(jsonObject, "contextType", JsonString.class), jsonObject.get("_contextType"), -1));
        builder.element(parseString("element", JsonSupport.getJsonValue(jsonObject, "element", JsonString.class), jsonObject.get("_element"), -1));
        builder.variable((Id) parseString(Id.builder(), "variable", JsonSupport.getJsonValue(jsonObject, "variable", JsonString.class), jsonObject.get("_variable"), -1));
        JsonArray listModeArray = JsonSupport.getJsonArray(jsonObject, "listMode", true);
        if (listModeArray != null) {
            int index = 0;
            JsonArray _listModeArray = jsonObject.getJsonArray("_listMode");
            for (JsonValue jsonValue : listModeArray) {
                builder.listMode((StructureMapTargetListMode) parseString(StructureMapTargetListMode.builder(), "listMode", jsonValue, JsonSupport.getJsonValue(_listModeArray, index), index));
                index++;
            }
        }
        builder.listRuleId((Id) parseString(Id.builder(), "listRuleId", JsonSupport.getJsonValue(jsonObject, "listRuleId", JsonString.class), jsonObject.get("_listRuleId"), -1));
        builder.transform((StructureMapTransform) parseString(StructureMapTransform.builder(), "transform", JsonSupport.getJsonValue(jsonObject, "transform", JsonString.class), jsonObject.get("_transform"), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseStructureMapGroupRuleTargetParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected StructureMap.Group.Rule.Target.Parameter parseStructureMapGroupRuleTargetParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Group.Rule.Target.Parameter", jsonObject);
        Element value = parseChoiceElement("value", jsonObject, "Id", "String", "Boolean", "Integer", "Decimal");
        StructureMap.Group.Rule.Target.Parameter.Builder builder = StructureMap.Group.Rule.Target.Parameter.builder(value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected StructureMap.Structure parseStructureMapStructure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("StructureMap.Structure", jsonObject);
        Canonical url = (Canonical) parseUri(Canonical.builder(), "url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        StructureMapModelMode mode = (StructureMapModelMode) parseString(StructureMapModelMode.builder(), "mode", JsonSupport.getJsonValue(jsonObject, "mode", JsonString.class), jsonObject.get("_mode"), -1);
        StructureMap.Structure.Builder builder = StructureMap.Structure.builder(url, mode);
        parseBackboneElement(builder, jsonObject);
        builder.alias(parseString("alias", JsonSupport.getJsonValue(jsonObject, "alias", JsonString.class), jsonObject.get("_alias"), -1));
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected Subscription parseSubscription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Subscription", jsonObject);
        SubscriptionStatus status = (SubscriptionStatus) parseString(SubscriptionStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        String reason = parseString("reason", JsonSupport.getJsonValue(jsonObject, "reason", JsonString.class), jsonObject.get("_reason"), -1);
        String criteria = parseString("criteria", JsonSupport.getJsonValue(jsonObject, "criteria", JsonString.class), jsonObject.get("_criteria"), -1);
        Subscription.Channel channel = parseSubscriptionChannel("channel", JsonSupport.getJsonValue(jsonObject, "channel", JsonObject.class), -1);
        Subscription.Builder builder = Subscription.builder(status, reason, criteria, channel);
        parseDomainResource(builder, jsonObject);
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactPoint("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.end(parseInstant("end", JsonSupport.getJsonValue(jsonObject, "end", JsonString.class), jsonObject.get("_end"), -1));
        builder.error(parseString("error", JsonSupport.getJsonValue(jsonObject, "error", JsonString.class), jsonObject.get("_error"), -1));
        stackPop();
        return builder.build();
    }

    protected Subscription.Channel parseSubscriptionChannel(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Subscription.Channel", jsonObject);
        SubscriptionChannelType type = (SubscriptionChannelType) parseString(SubscriptionChannelType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Subscription.Channel.Builder builder = Subscription.Channel.builder(type);
        parseBackboneElement(builder, jsonObject);
        builder.endpoint((Url) parseUri(Url.builder(), "endpoint", JsonSupport.getJsonValue(jsonObject, "endpoint", JsonString.class), jsonObject.get("_endpoint"), -1));
        builder.payload((Code) parseString(Code.builder(), "payload", JsonSupport.getJsonValue(jsonObject, "payload", JsonString.class), jsonObject.get("_payload"), -1));
        JsonArray headerArray = JsonSupport.getJsonArray(jsonObject, "header", true);
        if (headerArray != null) {
            int index = 0;
            JsonArray _headerArray = jsonObject.getJsonArray("_header");
            for (JsonValue jsonValue : headerArray) {
                builder.header(parseString("header", jsonValue, JsonSupport.getJsonValue(_headerArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Substance parseSubstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Substance", jsonObject);
        CodeableConcept code = parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Substance.Builder builder = Substance.builder(code);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((FHIRSubstanceStatus) parseString(FHIRSubstanceStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        JsonArray categoryArray = JsonSupport.getJsonArray(jsonObject, "category");
        if (categoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : categoryArray) {
                builder.category(parseCodeableConcept("category", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray instanceArray = JsonSupport.getJsonArray(jsonObject, "instance");
        if (instanceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : instanceArray) {
                builder.instance(parseSubstanceInstance("instance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray ingredientArray = JsonSupport.getJsonArray(jsonObject, "ingredient");
        if (ingredientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : ingredientArray) {
                builder.ingredient(parseSubstanceIngredient("ingredient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Substance.Ingredient parseSubstanceIngredient(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Substance.Ingredient", jsonObject);
        Element substance = parseChoiceElement("substance", jsonObject, "CodeableConcept", "Reference");
        Substance.Ingredient.Builder builder = Substance.Ingredient.builder(substance);
        parseBackboneElement(builder, jsonObject);
        builder.quantity(parseRatio("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Substance.Instance parseSubstanceInstance(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Substance.Instance", jsonObject);
        Substance.Instance.Builder builder = Substance.Instance.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.expiry(parseDateTime("expiry", JsonSupport.getJsonValue(jsonObject, "expiry", JsonString.class), jsonObject.get("_expiry"), -1));
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceAmount parseSubstanceAmount(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceAmount", jsonObject);
        SubstanceAmount.Builder builder = SubstanceAmount.builder();
        parseBackboneElement(builder, jsonObject);
        builder.amount(parseChoiceElement("amount", jsonObject, "Quantity", "Range", "String"));
        builder.amountType(parseCodeableConcept("amountType", JsonSupport.getJsonValue(jsonObject, "amountType", JsonObject.class), -1));
        builder.amountText(parseString("amountText", JsonSupport.getJsonValue(jsonObject, "amountText", JsonString.class), jsonObject.get("_amountText"), -1));
        builder.referenceRange(parseSubstanceAmountReferenceRange("referenceRange", JsonSupport.getJsonValue(jsonObject, "referenceRange", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceAmount.ReferenceRange parseSubstanceAmountReferenceRange(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceAmount.ReferenceRange", jsonObject);
        SubstanceAmount.ReferenceRange.Builder builder = SubstanceAmount.ReferenceRange.builder();
        parseBackboneElement(builder, jsonObject);
        builder.lowLimit(parseQuantity("lowLimit", JsonSupport.getJsonValue(jsonObject, "lowLimit", JsonObject.class), -1));
        builder.highLimit(parseQuantity("highLimit", JsonSupport.getJsonValue(jsonObject, "highLimit", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceNucleicAcid parseSubstanceNucleicAcid(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceNucleicAcid", jsonObject);
        SubstanceNucleicAcid.Builder builder = SubstanceNucleicAcid.builder();
        parseDomainResource(builder, jsonObject);
        builder.sequenceType(parseCodeableConcept("sequenceType", JsonSupport.getJsonValue(jsonObject, "sequenceType", JsonObject.class), -1));
        builder.numberOfSubunits(parseInteger("numberOfSubunits", JsonSupport.getJsonValue(jsonObject, "numberOfSubunits", JsonNumber.class), jsonObject.get("_numberOfSubunits"), -1));
        builder.areaOfHybridisation(parseString("areaOfHybridisation", JsonSupport.getJsonValue(jsonObject, "areaOfHybridisation", JsonString.class), jsonObject.get("_areaOfHybridisation"), -1));
        builder.oligoNucleotideType(parseCodeableConcept("oligoNucleotideType", JsonSupport.getJsonValue(jsonObject, "oligoNucleotideType", JsonObject.class), -1));
        JsonArray subunitArray = JsonSupport.getJsonArray(jsonObject, "subunit");
        if (subunitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subunitArray) {
                builder.subunit(parseSubstanceNucleicAcidSubunit("subunit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceNucleicAcid.Subunit parseSubstanceNucleicAcidSubunit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceNucleicAcid.Subunit", jsonObject);
        SubstanceNucleicAcid.Subunit.Builder builder = SubstanceNucleicAcid.Subunit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.subunit(parseInteger("subunit", JsonSupport.getJsonValue(jsonObject, "subunit", JsonNumber.class), jsonObject.get("_subunit"), -1));
        builder.sequence(parseString("sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonString.class), jsonObject.get("_sequence"), -1));
        builder.length(parseInteger("length", JsonSupport.getJsonValue(jsonObject, "length", JsonNumber.class), jsonObject.get("_length"), -1));
        builder.sequenceAttachment(parseAttachment("sequenceAttachment", JsonSupport.getJsonValue(jsonObject, "sequenceAttachment", JsonObject.class), -1));
        builder.fivePrime(parseCodeableConcept("fivePrime", JsonSupport.getJsonValue(jsonObject, "fivePrime", JsonObject.class), -1));
        builder.threePrime(parseCodeableConcept("threePrime", JsonSupport.getJsonValue(jsonObject, "threePrime", JsonObject.class), -1));
        JsonArray linkageArray = JsonSupport.getJsonArray(jsonObject, "linkage");
        if (linkageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkageArray) {
                builder.linkage(parseSubstanceNucleicAcidSubunitLinkage("linkage", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray sugarArray = JsonSupport.getJsonArray(jsonObject, "sugar");
        if (sugarArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sugarArray) {
                builder.sugar(parseSubstanceNucleicAcidSubunitSugar("sugar", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceNucleicAcid.Subunit.Linkage parseSubstanceNucleicAcidSubunitLinkage(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceNucleicAcid.Subunit.Linkage", jsonObject);
        SubstanceNucleicAcid.Subunit.Linkage.Builder builder = SubstanceNucleicAcid.Subunit.Linkage.builder();
        parseBackboneElement(builder, jsonObject);
        builder.connectivity(parseString("connectivity", JsonSupport.getJsonValue(jsonObject, "connectivity", JsonString.class), jsonObject.get("_connectivity"), -1));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.residueSite(parseString("residueSite", JsonSupport.getJsonValue(jsonObject, "residueSite", JsonString.class), jsonObject.get("_residueSite"), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceNucleicAcid.Subunit.Sugar parseSubstanceNucleicAcidSubunitSugar(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceNucleicAcid.Subunit.Sugar", jsonObject);
        SubstanceNucleicAcid.Subunit.Sugar.Builder builder = SubstanceNucleicAcid.Subunit.Sugar.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.residueSite(parseString("residueSite", JsonSupport.getJsonValue(jsonObject, "residueSite", JsonString.class), jsonObject.get("_residueSite"), -1));
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer parseSubstancePolymer(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer", jsonObject);
        SubstancePolymer.Builder builder = SubstancePolymer.builder();
        parseDomainResource(builder, jsonObject);
        builder.clazz(parseCodeableConcept("class", JsonSupport.getJsonValue(jsonObject, "class", JsonObject.class), -1));
        builder.geometry(parseCodeableConcept("geometry", JsonSupport.getJsonValue(jsonObject, "geometry", JsonObject.class), -1));
        JsonArray copolymerConnectivityArray = JsonSupport.getJsonArray(jsonObject, "copolymerConnectivity");
        if (copolymerConnectivityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : copolymerConnectivityArray) {
                builder.copolymerConnectivity(parseCodeableConcept("copolymerConnectivity", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray modificationArray = JsonSupport.getJsonArray(jsonObject, "modification", true);
        if (modificationArray != null) {
            int index = 0;
            JsonArray _modificationArray = jsonObject.getJsonArray("_modification");
            for (JsonValue jsonValue : modificationArray) {
                builder.modification(parseString("modification", jsonValue, JsonSupport.getJsonValue(_modificationArray, index), index));
                index++;
            }
        }
        JsonArray monomerSetArray = JsonSupport.getJsonArray(jsonObject, "monomerSet");
        if (monomerSetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : monomerSetArray) {
                builder.monomerSet(parseSubstancePolymerMonomerSet("monomerSet", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray repeatArray = JsonSupport.getJsonArray(jsonObject, "repeat");
        if (repeatArray != null) {
            int index = 0;
            for (JsonValue jsonValue : repeatArray) {
                builder.repeat(parseSubstancePolymerRepeat("repeat", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer.MonomerSet parseSubstancePolymerMonomerSet(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer.MonomerSet", jsonObject);
        SubstancePolymer.MonomerSet.Builder builder = SubstancePolymer.MonomerSet.builder();
        parseBackboneElement(builder, jsonObject);
        builder.ratioType(parseCodeableConcept("ratioType", JsonSupport.getJsonValue(jsonObject, "ratioType", JsonObject.class), -1));
        JsonArray startingMaterialArray = JsonSupport.getJsonArray(jsonObject, "startingMaterial");
        if (startingMaterialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : startingMaterialArray) {
                builder.startingMaterial(parseSubstancePolymerMonomerSetStartingMaterial("startingMaterial", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer.MonomerSet.StartingMaterial parseSubstancePolymerMonomerSetStartingMaterial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer.MonomerSet.StartingMaterial", jsonObject);
        SubstancePolymer.MonomerSet.StartingMaterial.Builder builder = SubstancePolymer.MonomerSet.StartingMaterial.builder();
        parseBackboneElement(builder, jsonObject);
        builder.material(parseCodeableConcept("material", JsonSupport.getJsonValue(jsonObject, "material", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.isDefining(parseBoolean("isDefining", JsonSupport.getJsonValue(jsonObject, "isDefining", JsonValue.class), jsonObject.get("_isDefining"), -1));
        builder.amount(parseSubstanceAmount("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer.Repeat parseSubstancePolymerRepeat(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer.Repeat", jsonObject);
        SubstancePolymer.Repeat.Builder builder = SubstancePolymer.Repeat.builder();
        parseBackboneElement(builder, jsonObject);
        builder.numberOfUnits(parseInteger("numberOfUnits", JsonSupport.getJsonValue(jsonObject, "numberOfUnits", JsonNumber.class), jsonObject.get("_numberOfUnits"), -1));
        builder.averageMolecularFormula(parseString("averageMolecularFormula", JsonSupport.getJsonValue(jsonObject, "averageMolecularFormula", JsonString.class), jsonObject.get("_averageMolecularFormula"), -1));
        builder.repeatUnitAmountType(parseCodeableConcept("repeatUnitAmountType", JsonSupport.getJsonValue(jsonObject, "repeatUnitAmountType", JsonObject.class), -1));
        JsonArray repeatUnitArray = JsonSupport.getJsonArray(jsonObject, "repeatUnit");
        if (repeatUnitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : repeatUnitArray) {
                builder.repeatUnit(parseSubstancePolymerRepeatRepeatUnit("repeatUnit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer.Repeat.RepeatUnit parseSubstancePolymerRepeatRepeatUnit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer.Repeat.RepeatUnit", jsonObject);
        SubstancePolymer.Repeat.RepeatUnit.Builder builder = SubstancePolymer.Repeat.RepeatUnit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.orientationOfPolymerisation(parseCodeableConcept("orientationOfPolymerisation", JsonSupport.getJsonValue(jsonObject, "orientationOfPolymerisation", JsonObject.class), -1));
        builder.repeatUnit(parseString("repeatUnit", JsonSupport.getJsonValue(jsonObject, "repeatUnit", JsonString.class), jsonObject.get("_repeatUnit"), -1));
        builder.amount(parseSubstanceAmount("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        JsonArray degreeOfPolymerisationArray = JsonSupport.getJsonArray(jsonObject, "degreeOfPolymerisation");
        if (degreeOfPolymerisationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : degreeOfPolymerisationArray) {
                builder.degreeOfPolymerisation(parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation("degreeOfPolymerisation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray structuralRepresentationArray = JsonSupport.getJsonArray(jsonObject, "structuralRepresentation");
        if (structuralRepresentationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : structuralRepresentationArray) {
                builder.structuralRepresentation(parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation("structuralRepresentation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation", jsonObject);
        SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.Builder builder = SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.degree(parseCodeableConcept("degree", JsonSupport.getJsonValue(jsonObject, "degree", JsonObject.class), -1));
        builder.amount(parseSubstanceAmount("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation", jsonObject);
        SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.Builder builder = SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.representation(parseString("representation", JsonSupport.getJsonValue(jsonObject, "representation", JsonString.class), jsonObject.get("_representation"), -1));
        builder.attachment(parseAttachment("attachment", JsonSupport.getJsonValue(jsonObject, "attachment", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceProtein parseSubstanceProtein(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceProtein", jsonObject);
        SubstanceProtein.Builder builder = SubstanceProtein.builder();
        parseDomainResource(builder, jsonObject);
        builder.sequenceType(parseCodeableConcept("sequenceType", JsonSupport.getJsonValue(jsonObject, "sequenceType", JsonObject.class), -1));
        builder.numberOfSubunits(parseInteger("numberOfSubunits", JsonSupport.getJsonValue(jsonObject, "numberOfSubunits", JsonNumber.class), jsonObject.get("_numberOfSubunits"), -1));
        JsonArray disulfideLinkageArray = JsonSupport.getJsonArray(jsonObject, "disulfideLinkage", true);
        if (disulfideLinkageArray != null) {
            int index = 0;
            JsonArray _disulfideLinkageArray = jsonObject.getJsonArray("_disulfideLinkage");
            for (JsonValue jsonValue : disulfideLinkageArray) {
                builder.disulfideLinkage(parseString("disulfideLinkage", jsonValue, JsonSupport.getJsonValue(_disulfideLinkageArray, index), index));
                index++;
            }
        }
        JsonArray subunitArray = JsonSupport.getJsonArray(jsonObject, "subunit");
        if (subunitArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subunitArray) {
                builder.subunit(parseSubstanceProteinSubunit("subunit", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceProtein.Subunit parseSubstanceProteinSubunit(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceProtein.Subunit", jsonObject);
        SubstanceProtein.Subunit.Builder builder = SubstanceProtein.Subunit.builder();
        parseBackboneElement(builder, jsonObject);
        builder.subunit(parseInteger("subunit", JsonSupport.getJsonValue(jsonObject, "subunit", JsonNumber.class), jsonObject.get("_subunit"), -1));
        builder.sequence(parseString("sequence", JsonSupport.getJsonValue(jsonObject, "sequence", JsonString.class), jsonObject.get("_sequence"), -1));
        builder.length(parseInteger("length", JsonSupport.getJsonValue(jsonObject, "length", JsonNumber.class), jsonObject.get("_length"), -1));
        builder.sequenceAttachment(parseAttachment("sequenceAttachment", JsonSupport.getJsonValue(jsonObject, "sequenceAttachment", JsonObject.class), -1));
        builder.nTerminalModificationId(parseIdentifier("nTerminalModificationId", JsonSupport.getJsonValue(jsonObject, "nTerminalModificationId", JsonObject.class), -1));
        builder.nTerminalModification(parseString("nTerminalModification", JsonSupport.getJsonValue(jsonObject, "nTerminalModification", JsonString.class), jsonObject.get("_nTerminalModification"), -1));
        builder.cTerminalModificationId(parseIdentifier("cTerminalModificationId", JsonSupport.getJsonValue(jsonObject, "cTerminalModificationId", JsonObject.class), -1));
        builder.cTerminalModification(parseString("cTerminalModification", JsonSupport.getJsonValue(jsonObject, "cTerminalModification", JsonString.class), jsonObject.get("_cTerminalModification"), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceReferenceInformation parseSubstanceReferenceInformation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceReferenceInformation", jsonObject);
        SubstanceReferenceInformation.Builder builder = SubstanceReferenceInformation.builder();
        parseDomainResource(builder, jsonObject);
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray geneArray = JsonSupport.getJsonArray(jsonObject, "gene");
        if (geneArray != null) {
            int index = 0;
            for (JsonValue jsonValue : geneArray) {
                builder.gene(parseSubstanceReferenceInformationGene("gene", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray geneElementArray = JsonSupport.getJsonArray(jsonObject, "geneElement");
        if (geneElementArray != null) {
            int index = 0;
            for (JsonValue jsonValue : geneElementArray) {
                builder.geneElement(parseSubstanceReferenceInformationGeneElement("geneElement", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray classificationArray = JsonSupport.getJsonArray(jsonObject, "classification");
        if (classificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : classificationArray) {
                builder.classification(parseSubstanceReferenceInformationClassification("classification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parseSubstanceReferenceInformationTarget("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceReferenceInformation.Classification parseSubstanceReferenceInformationClassification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceReferenceInformation.Classification", jsonObject);
        SubstanceReferenceInformation.Classification.Builder builder = SubstanceReferenceInformation.Classification.builder();
        parseBackboneElement(builder, jsonObject);
        builder.domain(parseCodeableConcept("domain", JsonSupport.getJsonValue(jsonObject, "domain", JsonObject.class), -1));
        builder.classification(parseCodeableConcept("classification", JsonSupport.getJsonValue(jsonObject, "classification", JsonObject.class), -1));
        JsonArray subtypeArray = JsonSupport.getJsonArray(jsonObject, "subtype");
        if (subtypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : subtypeArray) {
                builder.subtype(parseCodeableConcept("subtype", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceReferenceInformation.Gene parseSubstanceReferenceInformationGene(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceReferenceInformation.Gene", jsonObject);
        SubstanceReferenceInformation.Gene.Builder builder = SubstanceReferenceInformation.Gene.builder();
        parseBackboneElement(builder, jsonObject);
        builder.geneSequenceOrigin(parseCodeableConcept("geneSequenceOrigin", JsonSupport.getJsonValue(jsonObject, "geneSequenceOrigin", JsonObject.class), -1));
        builder.gene(parseCodeableConcept("gene", JsonSupport.getJsonValue(jsonObject, "gene", JsonObject.class), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceReferenceInformation.GeneElement parseSubstanceReferenceInformationGeneElement(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceReferenceInformation.GeneElement", jsonObject);
        SubstanceReferenceInformation.GeneElement.Builder builder = SubstanceReferenceInformation.GeneElement.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.element(parseIdentifier("element", JsonSupport.getJsonValue(jsonObject, "element", JsonObject.class), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceReferenceInformation.Target parseSubstanceReferenceInformationTarget(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceReferenceInformation.Target", jsonObject);
        SubstanceReferenceInformation.Target.Builder builder = SubstanceReferenceInformation.Target.builder();
        parseBackboneElement(builder, jsonObject);
        builder.target(parseIdentifier("target", JsonSupport.getJsonValue(jsonObject, "target", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.interaction(parseCodeableConcept("interaction", JsonSupport.getJsonValue(jsonObject, "interaction", JsonObject.class), -1));
        builder.organism(parseCodeableConcept("organism", JsonSupport.getJsonValue(jsonObject, "organism", JsonObject.class), -1));
        builder.organismType(parseCodeableConcept("organismType", JsonSupport.getJsonValue(jsonObject, "organismType", JsonObject.class), -1));
        builder.amount(parseChoiceElement("amount", jsonObject, "Quantity", "Range", "String"));
        builder.amountType(parseCodeableConcept("amountType", JsonSupport.getJsonValue(jsonObject, "amountType", JsonObject.class), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial parseSubstanceSourceMaterial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial", jsonObject);
        SubstanceSourceMaterial.Builder builder = SubstanceSourceMaterial.builder();
        parseDomainResource(builder, jsonObject);
        builder.sourceMaterialClass(parseCodeableConcept("sourceMaterialClass", JsonSupport.getJsonValue(jsonObject, "sourceMaterialClass", JsonObject.class), -1));
        builder.sourceMaterialType(parseCodeableConcept("sourceMaterialType", JsonSupport.getJsonValue(jsonObject, "sourceMaterialType", JsonObject.class), -1));
        builder.sourceMaterialState(parseCodeableConcept("sourceMaterialState", JsonSupport.getJsonValue(jsonObject, "sourceMaterialState", JsonObject.class), -1));
        builder.organismId(parseIdentifier("organismId", JsonSupport.getJsonValue(jsonObject, "organismId", JsonObject.class), -1));
        builder.organismName(parseString("organismName", JsonSupport.getJsonValue(jsonObject, "organismName", JsonString.class), jsonObject.get("_organismName"), -1));
        JsonArray parentSubstanceIdArray = JsonSupport.getJsonArray(jsonObject, "parentSubstanceId");
        if (parentSubstanceIdArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parentSubstanceIdArray) {
                builder.parentSubstanceId(parseIdentifier("parentSubstanceId", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray parentSubstanceNameArray = JsonSupport.getJsonArray(jsonObject, "parentSubstanceName", true);
        if (parentSubstanceNameArray != null) {
            int index = 0;
            JsonArray _parentSubstanceNameArray = jsonObject.getJsonArray("_parentSubstanceName");
            for (JsonValue jsonValue : parentSubstanceNameArray) {
                builder.parentSubstanceName(parseString("parentSubstanceName", jsonValue, JsonSupport.getJsonValue(_parentSubstanceNameArray, index), index));
                index++;
            }
        }
        JsonArray countryOfOriginArray = JsonSupport.getJsonArray(jsonObject, "countryOfOrigin");
        if (countryOfOriginArray != null) {
            int index = 0;
            for (JsonValue jsonValue : countryOfOriginArray) {
                builder.countryOfOrigin(parseCodeableConcept("countryOfOrigin", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray geographicalLocationArray = JsonSupport.getJsonArray(jsonObject, "geographicalLocation", true);
        if (geographicalLocationArray != null) {
            int index = 0;
            JsonArray _geographicalLocationArray = jsonObject.getJsonArray("_geographicalLocation");
            for (JsonValue jsonValue : geographicalLocationArray) {
                builder.geographicalLocation(parseString("geographicalLocation", jsonValue, JsonSupport.getJsonValue(_geographicalLocationArray, index), index));
                index++;
            }
        }
        builder.developmentStage(parseCodeableConcept("developmentStage", JsonSupport.getJsonValue(jsonObject, "developmentStage", JsonObject.class), -1));
        JsonArray fractionDescriptionArray = JsonSupport.getJsonArray(jsonObject, "fractionDescription");
        if (fractionDescriptionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : fractionDescriptionArray) {
                builder.fractionDescription(parseSubstanceSourceMaterialFractionDescription("fractionDescription", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.organism(parseSubstanceSourceMaterialOrganism("organism", JsonSupport.getJsonValue(jsonObject, "organism", JsonObject.class), -1));
        JsonArray partDescriptionArray = JsonSupport.getJsonArray(jsonObject, "partDescription");
        if (partDescriptionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partDescriptionArray) {
                builder.partDescription(parseSubstanceSourceMaterialPartDescription("partDescription", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial.FractionDescription parseSubstanceSourceMaterialFractionDescription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial.FractionDescription", jsonObject);
        SubstanceSourceMaterial.FractionDescription.Builder builder = SubstanceSourceMaterial.FractionDescription.builder();
        parseBackboneElement(builder, jsonObject);
        builder.fraction(parseString("fraction", JsonSupport.getJsonValue(jsonObject, "fraction", JsonString.class), jsonObject.get("_fraction"), -1));
        builder.materialType(parseCodeableConcept("materialType", JsonSupport.getJsonValue(jsonObject, "materialType", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial.Organism parseSubstanceSourceMaterialOrganism(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial.Organism", jsonObject);
        SubstanceSourceMaterial.Organism.Builder builder = SubstanceSourceMaterial.Organism.builder();
        parseBackboneElement(builder, jsonObject);
        builder.family(parseCodeableConcept("family", JsonSupport.getJsonValue(jsonObject, "family", JsonObject.class), -1));
        builder.genus(parseCodeableConcept("genus", JsonSupport.getJsonValue(jsonObject, "genus", JsonObject.class), -1));
        builder.species(parseCodeableConcept("species", JsonSupport.getJsonValue(jsonObject, "species", JsonObject.class), -1));
        builder.intraspecificType(parseCodeableConcept("intraspecificType", JsonSupport.getJsonValue(jsonObject, "intraspecificType", JsonObject.class), -1));
        builder.intraspecificDescription(parseString("intraspecificDescription", JsonSupport.getJsonValue(jsonObject, "intraspecificDescription", JsonString.class), jsonObject.get("_intraspecificDescription"), -1));
        JsonArray authorArray = JsonSupport.getJsonArray(jsonObject, "author");
        if (authorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : authorArray) {
                builder.author(parseSubstanceSourceMaterialOrganismAuthor("author", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.hybrid(parseSubstanceSourceMaterialOrganismHybrid("hybrid", JsonSupport.getJsonValue(jsonObject, "hybrid", JsonObject.class), -1));
        builder.organismGeneral(parseSubstanceSourceMaterialOrganismOrganismGeneral("organismGeneral", JsonSupport.getJsonValue(jsonObject, "organismGeneral", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial.Organism.Author parseSubstanceSourceMaterialOrganismAuthor(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial.Organism.Author", jsonObject);
        SubstanceSourceMaterial.Organism.Author.Builder builder = SubstanceSourceMaterial.Organism.Author.builder();
        parseBackboneElement(builder, jsonObject);
        builder.authorType(parseCodeableConcept("authorType", JsonSupport.getJsonValue(jsonObject, "authorType", JsonObject.class), -1));
        builder.authorDescription(parseString("authorDescription", JsonSupport.getJsonValue(jsonObject, "authorDescription", JsonString.class), jsonObject.get("_authorDescription"), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial.Organism.Hybrid parseSubstanceSourceMaterialOrganismHybrid(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial.Organism.Hybrid", jsonObject);
        SubstanceSourceMaterial.Organism.Hybrid.Builder builder = SubstanceSourceMaterial.Organism.Hybrid.builder();
        parseBackboneElement(builder, jsonObject);
        builder.maternalOrganismId(parseString("maternalOrganismId", JsonSupport.getJsonValue(jsonObject, "maternalOrganismId", JsonString.class), jsonObject.get("_maternalOrganismId"), -1));
        builder.maternalOrganismName(parseString("maternalOrganismName", JsonSupport.getJsonValue(jsonObject, "maternalOrganismName", JsonString.class), jsonObject.get("_maternalOrganismName"), -1));
        builder.paternalOrganismId(parseString("paternalOrganismId", JsonSupport.getJsonValue(jsonObject, "paternalOrganismId", JsonString.class), jsonObject.get("_paternalOrganismId"), -1));
        builder.paternalOrganismName(parseString("paternalOrganismName", JsonSupport.getJsonValue(jsonObject, "paternalOrganismName", JsonString.class), jsonObject.get("_paternalOrganismName"), -1));
        builder.hybridType(parseCodeableConcept("hybridType", JsonSupport.getJsonValue(jsonObject, "hybridType", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial.Organism.OrganismGeneral parseSubstanceSourceMaterialOrganismOrganismGeneral(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial.Organism.OrganismGeneral", jsonObject);
        SubstanceSourceMaterial.Organism.OrganismGeneral.Builder builder = SubstanceSourceMaterial.Organism.OrganismGeneral.builder();
        parseBackboneElement(builder, jsonObject);
        builder.kingdom(parseCodeableConcept("kingdom", JsonSupport.getJsonValue(jsonObject, "kingdom", JsonObject.class), -1));
        builder.phylum(parseCodeableConcept("phylum", JsonSupport.getJsonValue(jsonObject, "phylum", JsonObject.class), -1));
        builder.clazz(parseCodeableConcept("class", JsonSupport.getJsonValue(jsonObject, "class", JsonObject.class), -1));
        builder.order(parseCodeableConcept("order", JsonSupport.getJsonValue(jsonObject, "order", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSourceMaterial.PartDescription parseSubstanceSourceMaterialPartDescription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSourceMaterial.PartDescription", jsonObject);
        SubstanceSourceMaterial.PartDescription.Builder builder = SubstanceSourceMaterial.PartDescription.builder();
        parseBackboneElement(builder, jsonObject);
        builder.part(parseCodeableConcept("part", JsonSupport.getJsonValue(jsonObject, "part", JsonObject.class), -1));
        builder.partLocation(parseCodeableConcept("partLocation", JsonSupport.getJsonValue(jsonObject, "partLocation", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification parseSubstanceSpecification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification", jsonObject);
        SubstanceSpecification.Builder builder = SubstanceSpecification.builder();
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.domain(parseCodeableConcept("domain", JsonSupport.getJsonValue(jsonObject, "domain", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray moietyArray = JsonSupport.getJsonArray(jsonObject, "moiety");
        if (moietyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : moietyArray) {
                builder.moiety(parseSubstanceSpecificationMoiety("moiety", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyArray = JsonSupport.getJsonArray(jsonObject, "property");
        if (propertyArray != null) {
            int index = 0;
            for (JsonValue jsonValue : propertyArray) {
                builder.property(parseSubstanceSpecificationProperty("property", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.referenceInformation(parseReference("referenceInformation", JsonSupport.getJsonValue(jsonObject, "referenceInformation", JsonObject.class), -1));
        builder.structure(parseSubstanceSpecificationStructure("structure", JsonSupport.getJsonValue(jsonObject, "structure", JsonObject.class), -1));
        JsonArray codeArray = JsonSupport.getJsonArray(jsonObject, "code");
        if (codeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeArray) {
                builder.code(parseSubstanceSpecificationCode("code", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray nameArray = JsonSupport.getJsonArray(jsonObject, "name");
        if (nameArray != null) {
            int index = 0;
            for (JsonValue jsonValue : nameArray) {
                builder.name(parseSubstanceSpecificationName("name", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray molecularWeightArray = JsonSupport.getJsonArray(jsonObject, "molecularWeight");
        if (molecularWeightArray != null) {
            int index = 0;
            for (JsonValue jsonValue : molecularWeightArray) {
                builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relationshipArray = JsonSupport.getJsonArray(jsonObject, "relationship");
        if (relationshipArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relationshipArray) {
                builder.relationship(parseSubstanceSpecificationRelationship("relationship", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.nucleicAcid(parseReference("nucleicAcid", JsonSupport.getJsonValue(jsonObject, "nucleicAcid", JsonObject.class), -1));
        builder.polymer(parseReference("polymer", JsonSupport.getJsonValue(jsonObject, "polymer", JsonObject.class), -1));
        builder.protein(parseReference("protein", JsonSupport.getJsonValue(jsonObject, "protein", JsonObject.class), -1));
        builder.sourceMaterial(parseReference("sourceMaterial", JsonSupport.getJsonValue(jsonObject, "sourceMaterial", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Code parseSubstanceSpecificationCode(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Code", jsonObject);
        SubstanceSpecification.Code.Builder builder = SubstanceSpecification.Code.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.statusDate(parseDateTime("statusDate", JsonSupport.getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.comment(parseString("comment", JsonSupport.getJsonValue(jsonObject, "comment", JsonString.class), jsonObject.get("_comment"), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Moiety parseSubstanceSpecificationMoiety(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Moiety", jsonObject);
        SubstanceSpecification.Moiety.Builder builder = SubstanceSpecification.Moiety.builder();
        parseBackboneElement(builder, jsonObject);
        builder.role(parseCodeableConcept("role", JsonSupport.getJsonValue(jsonObject, "role", JsonObject.class), -1));
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.stereochemistry(parseCodeableConcept("stereochemistry", JsonSupport.getJsonValue(jsonObject, "stereochemistry", JsonObject.class), -1));
        builder.opticalActivity(parseCodeableConcept("opticalActivity", JsonSupport.getJsonValue(jsonObject, "opticalActivity", JsonObject.class), -1));
        builder.molecularFormula(parseString("molecularFormula", JsonSupport.getJsonValue(jsonObject, "molecularFormula", JsonString.class), jsonObject.get("_molecularFormula"), -1));
        builder.amount(parseChoiceElement("amount", jsonObject, "Quantity", "String"));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Name parseSubstanceSpecificationName(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Name", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        SubstanceSpecification.Name.Builder builder = SubstanceSpecification.Name.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.preferred(parseBoolean("preferred", JsonSupport.getJsonValue(jsonObject, "preferred", JsonValue.class), jsonObject.get("_preferred"), -1));
        JsonArray languageArray = JsonSupport.getJsonArray(jsonObject, "language");
        if (languageArray != null) {
            int index = 0;
            for (JsonValue jsonValue : languageArray) {
                builder.language(parseCodeableConcept("language", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray domainArray = JsonSupport.getJsonArray(jsonObject, "domain");
        if (domainArray != null) {
            int index = 0;
            for (JsonValue jsonValue : domainArray) {
                builder.domain(parseCodeableConcept("domain", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray synonymArray = JsonSupport.getJsonArray(jsonObject, "synonym");
        if (synonymArray != null) {
            int index = 0;
            for (JsonValue jsonValue : synonymArray) {
                builder.synonym(parseSubstanceSpecificationName("synonym", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray translationArray = JsonSupport.getJsonArray(jsonObject, "translation");
        if (translationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : translationArray) {
                builder.translation(parseSubstanceSpecificationName("translation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray officialArray = JsonSupport.getJsonArray(jsonObject, "official");
        if (officialArray != null) {
            int index = 0;
            for (JsonValue jsonValue : officialArray) {
                builder.official(parseSubstanceSpecificationNameOfficial("official", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Name.Official parseSubstanceSpecificationNameOfficial(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Name.Official", jsonObject);
        SubstanceSpecification.Name.Official.Builder builder = SubstanceSpecification.Name.Official.builder();
        parseBackboneElement(builder, jsonObject);
        builder.authority(parseCodeableConcept("authority", JsonSupport.getJsonValue(jsonObject, "authority", JsonObject.class), -1));
        builder.status(parseCodeableConcept("status", JsonSupport.getJsonValue(jsonObject, "status", JsonObject.class), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Property parseSubstanceSpecificationProperty(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Property", jsonObject);
        SubstanceSpecification.Property.Builder builder = SubstanceSpecification.Property.builder();
        parseBackboneElement(builder, jsonObject);
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.parameters(parseString("parameters", JsonSupport.getJsonValue(jsonObject, "parameters", JsonString.class), jsonObject.get("_parameters"), -1));
        builder.definingSubstance(parseChoiceElement("definingSubstance", jsonObject, "Reference", "CodeableConcept"));
        builder.amount(parseChoiceElement("amount", jsonObject, "Quantity", "String"));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Relationship parseSubstanceSpecificationRelationship(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Relationship", jsonObject);
        SubstanceSpecification.Relationship.Builder builder = SubstanceSpecification.Relationship.builder();
        parseBackboneElement(builder, jsonObject);
        builder.substance(parseChoiceElement("substance", jsonObject, "Reference", "CodeableConcept"));
        builder.relationship(parseCodeableConcept("relationship", JsonSupport.getJsonValue(jsonObject, "relationship", JsonObject.class), -1));
        builder.isDefining(parseBoolean("isDefining", JsonSupport.getJsonValue(jsonObject, "isDefining", JsonValue.class), jsonObject.get("_isDefining"), -1));
        builder.amount(parseChoiceElement("amount", jsonObject, "Quantity", "Range", "Ratio", "String"));
        builder.amountRatioLowLimit(parseRatio("amountRatioLowLimit", JsonSupport.getJsonValue(jsonObject, "amountRatioLowLimit", JsonObject.class), -1));
        builder.amountType(parseCodeableConcept("amountType", JsonSupport.getJsonValue(jsonObject, "amountType", JsonObject.class), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Structure parseSubstanceSpecificationStructure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Structure", jsonObject);
        SubstanceSpecification.Structure.Builder builder = SubstanceSpecification.Structure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.stereochemistry(parseCodeableConcept("stereochemistry", JsonSupport.getJsonValue(jsonObject, "stereochemistry", JsonObject.class), -1));
        builder.opticalActivity(parseCodeableConcept("opticalActivity", JsonSupport.getJsonValue(jsonObject, "opticalActivity", JsonObject.class), -1));
        builder.molecularFormula(parseString("molecularFormula", JsonSupport.getJsonValue(jsonObject, "molecularFormula", JsonString.class), jsonObject.get("_molecularFormula"), -1));
        builder.molecularFormulaByMoiety(parseString("molecularFormulaByMoiety", JsonSupport.getJsonValue(jsonObject, "molecularFormulaByMoiety", JsonString.class), jsonObject.get("_molecularFormulaByMoiety"), -1));
        JsonArray isotopeArray = JsonSupport.getJsonArray(jsonObject, "isotope");
        if (isotopeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : isotopeArray) {
                builder.isotope(parseSubstanceSpecificationStructureIsotope("isotope", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", JsonSupport.getJsonValue(jsonObject, "molecularWeight", JsonObject.class), -1));
        JsonArray sourceArray = JsonSupport.getJsonArray(jsonObject, "source");
        if (sourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : sourceArray) {
                builder.source(parseReference("source", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray representationArray = JsonSupport.getJsonArray(jsonObject, "representation");
        if (representationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : representationArray) {
                builder.representation(parseSubstanceSpecificationStructureRepresentation("representation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Structure.Isotope parseSubstanceSpecificationStructureIsotope(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Structure.Isotope", jsonObject);
        SubstanceSpecification.Structure.Isotope.Builder builder = SubstanceSpecification.Structure.Isotope.builder();
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseCodeableConcept("name", JsonSupport.getJsonValue(jsonObject, "name", JsonObject.class), -1));
        builder.substitution(parseCodeableConcept("substitution", JsonSupport.getJsonValue(jsonObject, "substitution", JsonObject.class), -1));
        builder.halfLife(parseQuantity("halfLife", JsonSupport.getJsonValue(jsonObject, "halfLife", JsonObject.class), -1));
        builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", JsonSupport.getJsonValue(jsonObject, "molecularWeight", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Structure.Isotope.MolecularWeight parseSubstanceSpecificationStructureIsotopeMolecularWeight(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Structure.Isotope.MolecularWeight", jsonObject);
        SubstanceSpecification.Structure.Isotope.MolecularWeight.Builder builder = SubstanceSpecification.Structure.Isotope.MolecularWeight.builder();
        parseBackboneElement(builder, jsonObject);
        builder.method(parseCodeableConcept("method", JsonSupport.getJsonValue(jsonObject, "method", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.amount(parseQuantity("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SubstanceSpecification.Structure.Representation parseSubstanceSpecificationStructureRepresentation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SubstanceSpecification.Structure.Representation", jsonObject);
        SubstanceSpecification.Structure.Representation.Builder builder = SubstanceSpecification.Structure.Representation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.representation(parseString("representation", JsonSupport.getJsonValue(jsonObject, "representation", JsonString.class), jsonObject.get("_representation"), -1));
        builder.attachment(parseAttachment("attachment", JsonSupport.getJsonValue(jsonObject, "attachment", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SupplyDelivery parseSupplyDelivery(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SupplyDelivery", jsonObject);
        SupplyDelivery.Builder builder = SupplyDelivery.builder();
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((SupplyDeliveryStatus) parseString(SupplyDeliveryStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.patient(parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1));
        builder.type(parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.suppliedItem(parseSupplyDeliverySuppliedItem("suppliedItem", JsonSupport.getJsonValue(jsonObject, "suppliedItem", JsonObject.class), -1));
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period", "Timing"));
        builder.supplier(parseReference("supplier", JsonSupport.getJsonValue(jsonObject, "supplier", JsonObject.class), -1));
        builder.destination(parseReference("destination", JsonSupport.getJsonValue(jsonObject, "destination", JsonObject.class), -1));
        JsonArray receiverArray = JsonSupport.getJsonArray(jsonObject, "receiver");
        if (receiverArray != null) {
            int index = 0;
            for (JsonValue jsonValue : receiverArray) {
                builder.receiver(parseReference("receiver", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected SupplyDelivery.SuppliedItem parseSupplyDeliverySuppliedItem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SupplyDelivery.SuppliedItem", jsonObject);
        SupplyDelivery.SuppliedItem.Builder builder = SupplyDelivery.SuppliedItem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1));
        builder.item(parseChoiceElement("item", jsonObject, "CodeableConcept", "Reference"));
        stackPop();
        return builder.build();
    }

    protected SupplyRequest parseSupplyRequest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SupplyRequest", jsonObject);
        Element item = parseChoiceElement("item", jsonObject, "CodeableConcept", "Reference");
        Quantity quantity = parseQuantity("quantity", JsonSupport.getJsonValue(jsonObject, "quantity", JsonObject.class), -1);
        SupplyRequest.Builder builder = SupplyRequest.builder(item, quantity);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.status((SupplyRequestStatus) parseString(SupplyRequestStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1));
        builder.category(parseCodeableConcept("category", JsonSupport.getJsonValue(jsonObject, "category", JsonObject.class), -1));
        builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseSupplyRequestParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.occurrence(parseChoiceElement("occurrence", jsonObject, "DateTime", "Period", "Timing"));
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.requester(parseReference("requester", JsonSupport.getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        JsonArray supplierArray = JsonSupport.getJsonArray(jsonObject, "supplier");
        if (supplierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : supplierArray) {
                builder.supplier(parseReference("supplier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonCodeArray = JsonSupport.getJsonArray(jsonObject, "reasonCode");
        if (reasonCodeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonCodeArray) {
                builder.reasonCode(parseCodeableConcept("reasonCode", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray reasonReferenceArray = JsonSupport.getJsonArray(jsonObject, "reasonReference");
        if (reasonReferenceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : reasonReferenceArray) {
                builder.reasonReference(parseReference("reasonReference", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.deliverFrom(parseReference("deliverFrom", JsonSupport.getJsonValue(jsonObject, "deliverFrom", JsonObject.class), -1));
        builder.deliverTo(parseReference("deliverTo", JsonSupport.getJsonValue(jsonObject, "deliverTo", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected SupplyRequest.Parameter parseSupplyRequestParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("SupplyRequest.Parameter", jsonObject);
        SupplyRequest.Parameter.Builder builder = SupplyRequest.Parameter.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.value(parseChoiceElement("value", jsonObject, "CodeableConcept", "Quantity", "Range", "Boolean"));
        stackPop();
        return builder.build();
    }

    protected Task parseTask(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Task", jsonObject);
        TaskStatus status = (TaskStatus) parseString(TaskStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        TaskIntent intent = (TaskIntent) parseString(TaskIntent.builder(), "intent", JsonSupport.getJsonValue(jsonObject, "intent", JsonString.class), jsonObject.get("_intent"), -1);
        Task.Builder builder = Task.builder(status, intent);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", JsonSupport.getJsonValue(jsonObject, "instantiatesCanonical", JsonString.class), jsonObject.get("_instantiatesCanonical"), -1));
        builder.instantiatesUri(parseUri("instantiatesUri", JsonSupport.getJsonValue(jsonObject, "instantiatesUri", JsonString.class), jsonObject.get("_instantiatesUri"), -1));
        JsonArray basedOnArray = JsonSupport.getJsonArray(jsonObject, "basedOn");
        if (basedOnArray != null) {
            int index = 0;
            for (JsonValue jsonValue : basedOnArray) {
                builder.basedOn(parseReference("basedOn", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.groupIdentifier(parseIdentifier("groupIdentifier", JsonSupport.getJsonValue(jsonObject, "groupIdentifier", JsonObject.class), -1));
        JsonArray partOfArray = JsonSupport.getJsonArray(jsonObject, "partOf");
        if (partOfArray != null) {
            int index = 0;
            for (JsonValue jsonValue : partOfArray) {
                builder.partOf(parseReference("partOf", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.statusReason(parseCodeableConcept("statusReason", JsonSupport.getJsonValue(jsonObject, "statusReason", JsonObject.class), -1));
        builder.businessStatus(parseCodeableConcept("businessStatus", JsonSupport.getJsonValue(jsonObject, "businessStatus", JsonObject.class), -1));
        builder.priority((TaskPriority) parseString(TaskPriority.builder(), "priority", JsonSupport.getJsonValue(jsonObject, "priority", JsonString.class), jsonObject.get("_priority"), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.focus(parseReference("focus", JsonSupport.getJsonValue(jsonObject, "focus", JsonObject.class), -1));
        builder._for(parseReference("for", JsonSupport.getJsonValue(jsonObject, "for", JsonObject.class), -1));
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        builder.executionPeriod(parsePeriod("executionPeriod", JsonSupport.getJsonValue(jsonObject, "executionPeriod", JsonObject.class), -1));
        builder.authoredOn(parseDateTime("authoredOn", JsonSupport.getJsonValue(jsonObject, "authoredOn", JsonString.class), jsonObject.get("_authoredOn"), -1));
        builder.lastModified(parseDateTime("lastModified", JsonSupport.getJsonValue(jsonObject, "lastModified", JsonString.class), jsonObject.get("_lastModified"), -1));
        builder.requester(parseReference("requester", JsonSupport.getJsonValue(jsonObject, "requester", JsonObject.class), -1));
        JsonArray performerTypeArray = JsonSupport.getJsonArray(jsonObject, "performerType");
        if (performerTypeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : performerTypeArray) {
                builder.performerType(parseCodeableConcept("performerType", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.owner(parseReference("owner", JsonSupport.getJsonValue(jsonObject, "owner", JsonObject.class), -1));
        builder.location(parseReference("location", JsonSupport.getJsonValue(jsonObject, "location", JsonObject.class), -1));
        builder.reasonCode(parseCodeableConcept("reasonCode", JsonSupport.getJsonValue(jsonObject, "reasonCode", JsonObject.class), -1));
        builder.reasonReference(parseReference("reasonReference", JsonSupport.getJsonValue(jsonObject, "reasonReference", JsonObject.class), -1));
        JsonArray insuranceArray = JsonSupport.getJsonArray(jsonObject, "insurance");
        if (insuranceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : insuranceArray) {
                builder.insurance(parseReference("insurance", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray relevantHistoryArray = JsonSupport.getJsonArray(jsonObject, "relevantHistory");
        if (relevantHistoryArray != null) {
            int index = 0;
            for (JsonValue jsonValue : relevantHistoryArray) {
                builder.relevantHistory(parseReference("relevantHistory", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.restriction(parseTaskRestriction("restriction", JsonSupport.getJsonValue(jsonObject, "restriction", JsonObject.class), -1));
        JsonArray inputArray = JsonSupport.getJsonArray(jsonObject, "input");
        if (inputArray != null) {
            int index = 0;
            for (JsonValue jsonValue : inputArray) {
                builder.input(parseTaskInput("input", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray outputArray = JsonSupport.getJsonArray(jsonObject, "output");
        if (outputArray != null) {
            int index = 0;
            for (JsonValue jsonValue : outputArray) {
                builder.output(parseTaskOutput("output", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected Task.Input parseTaskInput(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Task.Input", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Element value = parseChoiceElement("value", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage");
        Task.Input.Builder builder = Task.Input.builder(type, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Task.Output parseTaskOutput(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Task.Output", jsonObject);
        CodeableConcept type = parseCodeableConcept("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1);
        Element value = parseChoiceElement("value", jsonObject, "Base64Binary", "Boolean", "Canonical", "Code", "Date", "DateTime", "Decimal", "Id", "Instant", "Integer", "Markdown", "Oid", "PositiveInt", "String", "Time", "UnsignedInt", "Uri", "Url", "Uuid", "Address", "Age", "Annotation", "Attachment", "CodeableConcept", "Coding", "ContactPoint", "Count", "Distance", "Duration", "HumanName", "Identifier", "Money", "Period", "Quantity", "Range", "Ratio", "Reference", "SampledData", "Signature", "Timing", "ContactDetail", "Contributor", "DataRequirement", "Expression", "ParameterDefinition", "RelatedArtifact", "TriggerDefinition", "UsageContext", "Dosage");
        Task.Output.Builder builder = Task.Output.builder(type, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected Task.Restriction parseTaskRestriction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Task.Restriction", jsonObject);
        Task.Restriction.Builder builder = Task.Restriction.builder();
        parseBackboneElement(builder, jsonObject);
        builder.repetitions((PositiveInt) parseInteger(PositiveInt.builder(), "repetitions", JsonSupport.getJsonValue(jsonObject, "repetitions", JsonNumber.class), jsonObject.get("_repetitions"), -1));
        builder.period(parsePeriod("period", JsonSupport.getJsonValue(jsonObject, "period", JsonObject.class), -1));
        JsonArray recipientArray = JsonSupport.getJsonArray(jsonObject, "recipient");
        if (recipientArray != null) {
            int index = 0;
            for (JsonValue jsonValue : recipientArray) {
                builder.recipient(parseReference("recipient", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities parseTerminologyCapabilities(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DateTime date = parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1);
        CapabilityStatementKind kind = (CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", JsonSupport.getJsonValue(jsonObject, "kind", JsonString.class), jsonObject.get("_kind"), -1);
        TerminologyCapabilities.Builder builder = TerminologyCapabilities.builder(status, date, kind);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.software(parseTerminologyCapabilitiesSoftware("software", JsonSupport.getJsonValue(jsonObject, "software", JsonObject.class), -1));
        builder.implementation(parseTerminologyCapabilitiesImplementation("implementation", JsonSupport.getJsonValue(jsonObject, "implementation", JsonObject.class), -1));
        builder.lockedDate(parseBoolean("lockedDate", JsonSupport.getJsonValue(jsonObject, "lockedDate", JsonValue.class), jsonObject.get("_lockedDate"), -1));
        JsonArray codeSystemArray = JsonSupport.getJsonArray(jsonObject, "codeSystem");
        if (codeSystemArray != null) {
            int index = 0;
            for (JsonValue jsonValue : codeSystemArray) {
                builder.codeSystem(parseTerminologyCapabilitiesCodeSystem("codeSystem", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.expansion(parseTerminologyCapabilitiesExpansion("expansion", JsonSupport.getJsonValue(jsonObject, "expansion", JsonObject.class), -1));
        builder.codeSearch((CodeSearchSupport) parseString(CodeSearchSupport.builder(), "codeSearch", JsonSupport.getJsonValue(jsonObject, "codeSearch", JsonString.class), jsonObject.get("_codeSearch"), -1));
        builder.validateCode(parseTerminologyCapabilitiesValidateCode("validateCode", JsonSupport.getJsonValue(jsonObject, "validateCode", JsonObject.class), -1));
        builder.translation(parseTerminologyCapabilitiesTranslation("translation", JsonSupport.getJsonValue(jsonObject, "translation", JsonObject.class), -1));
        builder.closure(parseTerminologyCapabilitiesClosure("closure", JsonSupport.getJsonValue(jsonObject, "closure", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.Closure parseTerminologyCapabilitiesClosure(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.Closure", jsonObject);
        TerminologyCapabilities.Closure.Builder builder = TerminologyCapabilities.Closure.builder();
        parseBackboneElement(builder, jsonObject);
        builder.translation(parseBoolean("translation", JsonSupport.getJsonValue(jsonObject, "translation", JsonValue.class), jsonObject.get("_translation"), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.CodeSystem parseTerminologyCapabilitiesCodeSystem(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.CodeSystem", jsonObject);
        TerminologyCapabilities.CodeSystem.Builder builder = TerminologyCapabilities.CodeSystem.builder();
        parseBackboneElement(builder, jsonObject);
        builder.uri((Canonical) parseUri(Canonical.builder(), "uri", JsonSupport.getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1));
        JsonArray versionArray = JsonSupport.getJsonArray(jsonObject, "version");
        if (versionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : versionArray) {
                builder.version(parseTerminologyCapabilitiesCodeSystemVersion("version", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.subsumption(parseBoolean("subsumption", JsonSupport.getJsonValue(jsonObject, "subsumption", JsonValue.class), jsonObject.get("_subsumption"), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.CodeSystem.Version parseTerminologyCapabilitiesCodeSystemVersion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.CodeSystem.Version", jsonObject);
        TerminologyCapabilities.CodeSystem.Version.Builder builder = TerminologyCapabilities.CodeSystem.Version.builder();
        parseBackboneElement(builder, jsonObject);
        builder.code(parseString("code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.isDefault(parseBoolean("isDefault", JsonSupport.getJsonValue(jsonObject, "isDefault", JsonValue.class), jsonObject.get("_isDefault"), -1));
        builder.compositional(parseBoolean("compositional", JsonSupport.getJsonValue(jsonObject, "compositional", JsonValue.class), jsonObject.get("_compositional"), -1));
        JsonArray languageArray = JsonSupport.getJsonArray(jsonObject, "language", true);
        if (languageArray != null) {
            int index = 0;
            JsonArray _languageArray = jsonObject.getJsonArray("_language");
            for (JsonValue jsonValue : languageArray) {
                builder.language((Code) parseString(Code.builder(), "language", jsonValue, JsonSupport.getJsonValue(_languageArray, index), index));
                index++;
            }
        }
        JsonArray filterArray = JsonSupport.getJsonArray(jsonObject, "filter");
        if (filterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : filterArray) {
                builder.filter(parseTerminologyCapabilitiesCodeSystemVersionFilter("filter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray propertyArray = JsonSupport.getJsonArray(jsonObject, "property", true);
        if (propertyArray != null) {
            int index = 0;
            JsonArray _propertyArray = jsonObject.getJsonArray("_property");
            for (JsonValue jsonValue : propertyArray) {
                builder.property((Code) parseString(Code.builder(), "property", jsonValue, JsonSupport.getJsonValue(_propertyArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.CodeSystem.Version.Filter parseTerminologyCapabilitiesCodeSystemVersionFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.CodeSystem.Version.Filter", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        java.util.List<Code> op = new ArrayList<>();
        JsonArray opArray = JsonSupport.getJsonArray(jsonObject, "op", true);
        if (opArray != null) {
            int index = 0;
            JsonArray _opArray = jsonObject.getJsonArray("_op");
            for (JsonValue jsonValue : opArray) {
                op.add((Code) parseString(Code.builder(), "op", jsonValue, JsonSupport.getJsonValue(_opArray, index), index));
                index++;
            }
        }
        TerminologyCapabilities.CodeSystem.Version.Filter.Builder builder = TerminologyCapabilities.CodeSystem.Version.Filter.builder(code, op);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.Expansion parseTerminologyCapabilitiesExpansion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.Expansion", jsonObject);
        TerminologyCapabilities.Expansion.Builder builder = TerminologyCapabilities.Expansion.builder();
        parseBackboneElement(builder, jsonObject);
        builder.hierarchical(parseBoolean("hierarchical", JsonSupport.getJsonValue(jsonObject, "hierarchical", JsonValue.class), jsonObject.get("_hierarchical"), -1));
        builder.paging(parseBoolean("paging", JsonSupport.getJsonValue(jsonObject, "paging", JsonValue.class), jsonObject.get("_paging"), -1));
        builder.incomplete(parseBoolean("incomplete", JsonSupport.getJsonValue(jsonObject, "incomplete", JsonValue.class), jsonObject.get("_incomplete"), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseTerminologyCapabilitiesExpansionParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.textFilter((Markdown) parseString(Markdown.builder(), "textFilter", JsonSupport.getJsonValue(jsonObject, "textFilter", JsonString.class), jsonObject.get("_textFilter"), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.Expansion.Parameter parseTerminologyCapabilitiesExpansionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.Expansion.Parameter", jsonObject);
        Code name = (Code) parseString(Code.builder(), "name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        TerminologyCapabilities.Expansion.Parameter.Builder builder = TerminologyCapabilities.Expansion.Parameter.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.documentation(parseString("documentation", JsonSupport.getJsonValue(jsonObject, "documentation", JsonString.class), jsonObject.get("_documentation"), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.Implementation parseTerminologyCapabilitiesImplementation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.Implementation", jsonObject);
        String description = parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1);
        TerminologyCapabilities.Implementation.Builder builder = TerminologyCapabilities.Implementation.builder(description);
        parseBackboneElement(builder, jsonObject);
        builder.url((Url) parseUri(Url.builder(), "url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.Software parseTerminologyCapabilitiesSoftware(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.Software", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        TerminologyCapabilities.Software.Builder builder = TerminologyCapabilities.Software.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.Translation parseTerminologyCapabilitiesTranslation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.Translation", jsonObject);
        Boolean needsMap = parseBoolean("needsMap", JsonSupport.getJsonValue(jsonObject, "needsMap", JsonValue.class), jsonObject.get("_needsMap"), -1);
        TerminologyCapabilities.Translation.Builder builder = TerminologyCapabilities.Translation.builder(needsMap);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TerminologyCapabilities.ValidateCode parseTerminologyCapabilitiesValidateCode(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TerminologyCapabilities.ValidateCode", jsonObject);
        Boolean translations = parseBoolean("translations", JsonSupport.getJsonValue(jsonObject, "translations", JsonValue.class), jsonObject.get("_translations"), -1);
        TerminologyCapabilities.ValidateCode.Builder builder = TerminologyCapabilities.ValidateCode.builder(translations);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestReport parseTestReport(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport", jsonObject);
        TestReportStatus status = (TestReportStatus) parseString(TestReportStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        Reference testScript = parseReference("testScript", JsonSupport.getJsonValue(jsonObject, "testScript", JsonObject.class), -1);
        TestReportResult result = (TestReportResult) parseString(TestReportResult.builder(), "result", JsonSupport.getJsonValue(jsonObject, "result", JsonString.class), jsonObject.get("_result"), -1);
        TestReport.Builder builder = TestReport.builder(status, testScript, result);
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.score(parseDecimal("score", JsonSupport.getJsonValue(jsonObject, "score", JsonNumber.class), jsonObject.get("_score"), -1));
        builder.tester(parseString("tester", JsonSupport.getJsonValue(jsonObject, "tester", JsonString.class), jsonObject.get("_tester"), -1));
        builder.issued(parseDateTime("issued", JsonSupport.getJsonValue(jsonObject, "issued", JsonString.class), jsonObject.get("_issued"), -1));
        JsonArray participantArray = JsonSupport.getJsonArray(jsonObject, "participant");
        if (participantArray != null) {
            int index = 0;
            for (JsonValue jsonValue : participantArray) {
                builder.participant(parseTestReportParticipant("participant", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.setup(parseTestReportSetup("setup", JsonSupport.getJsonValue(jsonObject, "setup", JsonObject.class), -1));
        JsonArray testArray = JsonSupport.getJsonArray(jsonObject, "test");
        if (testArray != null) {
            int index = 0;
            for (JsonValue jsonValue : testArray) {
                builder.test(parseTestReportTest("test", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.teardown(parseTestReportTeardown("teardown", JsonSupport.getJsonValue(jsonObject, "teardown", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestReport.Participant parseTestReportParticipant(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Participant", jsonObject);
        TestReportParticipantType type = (TestReportParticipantType) parseString(TestReportParticipantType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        Uri uri = parseUri("uri", JsonSupport.getJsonValue(jsonObject, "uri", JsonString.class), jsonObject.get("_uri"), -1);
        TestReport.Participant.Builder builder = TestReport.Participant.builder(type, uri);
        parseBackboneElement(builder, jsonObject);
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        stackPop();
        return builder.build();
    }

    protected TestReport.Setup parseTestReportSetup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Setup", jsonObject);
        java.util.List<TestReport.Setup.Action> action = new ArrayList<>();
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                action.add(parseTestReportSetupAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestReport.Setup.Builder builder = TestReport.Setup.builder(action);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestReport.Setup.Action parseTestReportSetupAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Setup.Action", jsonObject);
        TestReport.Setup.Action.Builder builder = TestReport.Setup.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestReportSetupActionOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestReportSetupActionAssert("assert", JsonSupport.getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestReport.Setup.Action.Assert parseTestReportSetupActionAssert(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Setup.Action.Assert", jsonObject);
        TestReportActionResult result = (TestReportActionResult) parseString(TestReportActionResult.builder(), "result", JsonSupport.getJsonValue(jsonObject, "result", JsonString.class), jsonObject.get("_result"), -1);
        TestReport.Setup.Action.Assert.Builder builder = TestReport.Setup.Action.Assert.builder(result);
        parseBackboneElement(builder, jsonObject);
        builder.message((Markdown) parseString(Markdown.builder(), "message", JsonSupport.getJsonValue(jsonObject, "message", JsonString.class), jsonObject.get("_message"), -1));
        builder.detail(parseString("detail", JsonSupport.getJsonValue(jsonObject, "detail", JsonString.class), jsonObject.get("_detail"), -1));
        stackPop();
        return builder.build();
    }

    protected TestReport.Setup.Action.Operation parseTestReportSetupActionOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Setup.Action.Operation", jsonObject);
        TestReportActionResult result = (TestReportActionResult) parseString(TestReportActionResult.builder(), "result", JsonSupport.getJsonValue(jsonObject, "result", JsonString.class), jsonObject.get("_result"), -1);
        TestReport.Setup.Action.Operation.Builder builder = TestReport.Setup.Action.Operation.builder(result);
        parseBackboneElement(builder, jsonObject);
        builder.message((Markdown) parseString(Markdown.builder(), "message", JsonSupport.getJsonValue(jsonObject, "message", JsonString.class), jsonObject.get("_message"), -1));
        builder.detail(parseUri("detail", JsonSupport.getJsonValue(jsonObject, "detail", JsonString.class), jsonObject.get("_detail"), -1));
        stackPop();
        return builder.build();
    }

    protected TestReport.Teardown parseTestReportTeardown(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Teardown", jsonObject);
        java.util.List<TestReport.Teardown.Action> action = new ArrayList<>();
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                action.add(parseTestReportTeardownAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestReport.Teardown.Builder builder = TestReport.Teardown.builder(action);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestReport.Teardown.Action parseTestReportTeardownAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Teardown.Action", jsonObject);
        TestReport.Setup.Action.Operation operation = parseTestReportSetupActionOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1);
        TestReport.Teardown.Action.Builder builder = TestReport.Teardown.Action.builder(operation);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestReport.Test parseTestReportTest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Test", jsonObject);
        java.util.List<TestReport.Test.Action> action = new ArrayList<>();
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                action.add(parseTestReportTestAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestReport.Test.Builder builder = TestReport.Test.builder(action);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected TestReport.Test.Action parseTestReportTestAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestReport.Test.Action", jsonObject);
        TestReport.Test.Action.Builder builder = TestReport.Test.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestReportSetupActionOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestReportSetupActionAssert("assert", JsonSupport.getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript parseTestScript(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        TestScript.Builder builder = TestScript.builder(url, name, status);
        parseDomainResource(builder, jsonObject);
        builder.identifier(parseIdentifier("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonObject.class), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        JsonArray originArray = JsonSupport.getJsonArray(jsonObject, "origin");
        if (originArray != null) {
            int index = 0;
            for (JsonValue jsonValue : originArray) {
                builder.origin(parseTestScriptOrigin("origin", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray destinationArray = JsonSupport.getJsonArray(jsonObject, "destination");
        if (destinationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : destinationArray) {
                builder.destination(parseTestScriptDestination("destination", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.metadata(parseTestScriptMetadata("metadata", JsonSupport.getJsonValue(jsonObject, "metadata", JsonObject.class), -1));
        JsonArray fixtureArray = JsonSupport.getJsonArray(jsonObject, "fixture");
        if (fixtureArray != null) {
            int index = 0;
            for (JsonValue jsonValue : fixtureArray) {
                builder.fixture(parseTestScriptFixture("fixture", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray profileArray = JsonSupport.getJsonArray(jsonObject, "profile");
        if (profileArray != null) {
            int index = 0;
            for (JsonValue jsonValue : profileArray) {
                builder.profile(parseReference("profile", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray variableArray = JsonSupport.getJsonArray(jsonObject, "variable");
        if (variableArray != null) {
            int index = 0;
            for (JsonValue jsonValue : variableArray) {
                builder.variable(parseTestScriptVariable("variable", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.setup(parseTestScriptSetup("setup", JsonSupport.getJsonValue(jsonObject, "setup", JsonObject.class), -1));
        JsonArray testArray = JsonSupport.getJsonArray(jsonObject, "test");
        if (testArray != null) {
            int index = 0;
            for (JsonValue jsonValue : testArray) {
                builder.test(parseTestScriptTest("test", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.teardown(parseTestScriptTeardown("teardown", JsonSupport.getJsonValue(jsonObject, "teardown", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Destination parseTestScriptDestination(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Destination", jsonObject);
        Integer index = parseInteger("index", JsonSupport.getJsonValue(jsonObject, "index", JsonNumber.class), jsonObject.get("_index"), -1);
        Coding profile = parseCoding("profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonObject.class), -1);
        TestScript.Destination.Builder builder = TestScript.Destination.builder(index, profile);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestScript.Fixture parseTestScriptFixture(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Fixture", jsonObject);
        Boolean autocreate = parseBoolean("autocreate", JsonSupport.getJsonValue(jsonObject, "autocreate", JsonValue.class), jsonObject.get("_autocreate"), -1);
        Boolean autodelete = parseBoolean("autodelete", JsonSupport.getJsonValue(jsonObject, "autodelete", JsonValue.class), jsonObject.get("_autodelete"), -1);
        TestScript.Fixture.Builder builder = TestScript.Fixture.builder(autocreate, autodelete);
        parseBackboneElement(builder, jsonObject);
        builder.resource(parseReference("resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Metadata parseTestScriptMetadata(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Metadata", jsonObject);
        java.util.List<TestScript.Metadata.Capability> capability = new ArrayList<>();
        JsonArray capabilityArray = JsonSupport.getJsonArray(jsonObject, "capability");
        if (capabilityArray != null) {
            int index = 0;
            for (JsonValue jsonValue : capabilityArray) {
                capability.add(parseTestScriptMetadataCapability("capability", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestScript.Metadata.Builder builder = TestScript.Metadata.builder(capability);
        parseBackboneElement(builder, jsonObject);
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link");
        if (linkArray != null) {
            int index = 0;
            for (JsonValue jsonValue : linkArray) {
                builder.link(parseTestScriptMetadataLink("link", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected TestScript.Metadata.Capability parseTestScriptMetadataCapability(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Metadata.Capability", jsonObject);
        Boolean required = parseBoolean("required", JsonSupport.getJsonValue(jsonObject, "required", JsonValue.class), jsonObject.get("_required"), -1);
        Boolean validated = parseBoolean("validated", JsonSupport.getJsonValue(jsonObject, "validated", JsonValue.class), jsonObject.get("_validated"), -1);
        Canonical capabilities = (Canonical) parseUri(Canonical.builder(), "capabilities", JsonSupport.getJsonValue(jsonObject, "capabilities", JsonString.class), jsonObject.get("_capabilities"), -1);
        TestScript.Metadata.Capability.Builder builder = TestScript.Metadata.Capability.builder(required, validated, capabilities);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray originArray = JsonSupport.getJsonArray(jsonObject, "origin", true);
        if (originArray != null) {
            int index = 0;
            JsonArray _originArray = jsonObject.getJsonArray("_origin");
            for (JsonValue jsonValue : originArray) {
                builder.origin(parseInteger("origin", jsonValue, JsonSupport.getJsonValue(_originArray, index), index));
                index++;
            }
        }
        builder.destination(parseInteger("destination", JsonSupport.getJsonValue(jsonObject, "destination", JsonNumber.class), jsonObject.get("_destination"), -1));
        JsonArray linkArray = JsonSupport.getJsonArray(jsonObject, "link", true);
        if (linkArray != null) {
            int index = 0;
            JsonArray _linkArray = jsonObject.getJsonArray("_link");
            for (JsonValue jsonValue : linkArray) {
                builder.link(parseUri("link", jsonValue, JsonSupport.getJsonValue(_linkArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected TestScript.Metadata.Link parseTestScriptMetadataLink(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Metadata.Link", jsonObject);
        Uri url = parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1);
        TestScript.Metadata.Link.Builder builder = TestScript.Metadata.Link.builder(url);
        parseBackboneElement(builder, jsonObject);
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Origin parseTestScriptOrigin(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Origin", jsonObject);
        Integer index = parseInteger("index", JsonSupport.getJsonValue(jsonObject, "index", JsonNumber.class), jsonObject.get("_index"), -1);
        Coding profile = parseCoding("profile", JsonSupport.getJsonValue(jsonObject, "profile", JsonObject.class), -1);
        TestScript.Origin.Builder builder = TestScript.Origin.builder(index, profile);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestScript.Setup parseTestScriptSetup(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Setup", jsonObject);
        java.util.List<TestScript.Setup.Action> action = new ArrayList<>();
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                action.add(parseTestScriptSetupAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestScript.Setup.Builder builder = TestScript.Setup.builder(action);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestScript.Setup.Action parseTestScriptSetupAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Setup.Action", jsonObject);
        TestScript.Setup.Action.Builder builder = TestScript.Setup.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestScriptSetupActionOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestScriptSetupActionAssert("assert", JsonSupport.getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Setup.Action.Assert parseTestScriptSetupActionAssert(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Setup.Action.Assert", jsonObject);
        Boolean warningOnly = parseBoolean("warningOnly", JsonSupport.getJsonValue(jsonObject, "warningOnly", JsonValue.class), jsonObject.get("_warningOnly"), -1);
        TestScript.Setup.Action.Assert.Builder builder = TestScript.Setup.Action.Assert.builder(warningOnly);
        parseBackboneElement(builder, jsonObject);
        builder.label(parseString("label", JsonSupport.getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.direction((AssertionDirectionType) parseString(AssertionDirectionType.builder(), "direction", JsonSupport.getJsonValue(jsonObject, "direction", JsonString.class), jsonObject.get("_direction"), -1));
        builder.compareToSourceId(parseString("compareToSourceId", JsonSupport.getJsonValue(jsonObject, "compareToSourceId", JsonString.class), jsonObject.get("_compareToSourceId"), -1));
        builder.compareToSourceExpression(parseString("compareToSourceExpression", JsonSupport.getJsonValue(jsonObject, "compareToSourceExpression", JsonString.class), jsonObject.get("_compareToSourceExpression"), -1));
        builder.compareToSourcePath(parseString("compareToSourcePath", JsonSupport.getJsonValue(jsonObject, "compareToSourcePath", JsonString.class), jsonObject.get("_compareToSourcePath"), -1));
        builder.contentType((Code) parseString(Code.builder(), "contentType", JsonSupport.getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.headerField(parseString("headerField", JsonSupport.getJsonValue(jsonObject, "headerField", JsonString.class), jsonObject.get("_headerField"), -1));
        builder.minimumId(parseString("minimumId", JsonSupport.getJsonValue(jsonObject, "minimumId", JsonString.class), jsonObject.get("_minimumId"), -1));
        builder.navigationLinks(parseBoolean("navigationLinks", JsonSupport.getJsonValue(jsonObject, "navigationLinks", JsonValue.class), jsonObject.get("_navigationLinks"), -1));
        builder.operator((AssertionOperatorType) parseString(AssertionOperatorType.builder(), "operator", JsonSupport.getJsonValue(jsonObject, "operator", JsonString.class), jsonObject.get("_operator"), -1));
        builder.path(parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.requestMethod((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "requestMethod", JsonSupport.getJsonValue(jsonObject, "requestMethod", JsonString.class), jsonObject.get("_requestMethod"), -1));
        builder.requestURL(parseString("requestURL", JsonSupport.getJsonValue(jsonObject, "requestURL", JsonString.class), jsonObject.get("_requestURL"), -1));
        builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonString.class), jsonObject.get("_resource"), -1));
        builder.response((AssertionResponseTypes) parseString(AssertionResponseTypes.builder(), "response", JsonSupport.getJsonValue(jsonObject, "response", JsonString.class), jsonObject.get("_response"), -1));
        builder.responseCode(parseString("responseCode", JsonSupport.getJsonValue(jsonObject, "responseCode", JsonString.class), jsonObject.get("_responseCode"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", JsonSupport.getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        builder.validateProfileId((Id) parseString(Id.builder(), "validateProfileId", JsonSupport.getJsonValue(jsonObject, "validateProfileId", JsonString.class), jsonObject.get("_validateProfileId"), -1));
        builder.value(parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Setup.Action.Operation parseTestScriptSetupActionOperation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Setup.Action.Operation", jsonObject);
        Boolean encodeRequestUrl = parseBoolean("encodeRequestUrl", JsonSupport.getJsonValue(jsonObject, "encodeRequestUrl", JsonValue.class), jsonObject.get("_encodeRequestUrl"), -1);
        TestScript.Setup.Action.Operation.Builder builder = TestScript.Setup.Action.Operation.builder(encodeRequestUrl);
        parseBackboneElement(builder, jsonObject);
        builder.type(parseCoding("type", JsonSupport.getJsonValue(jsonObject, "type", JsonObject.class), -1));
        builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", JsonSupport.getJsonValue(jsonObject, "resource", JsonString.class), jsonObject.get("_resource"), -1));
        builder.label(parseString("label", JsonSupport.getJsonValue(jsonObject, "label", JsonString.class), jsonObject.get("_label"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.accept((Code) parseString(Code.builder(), "accept", JsonSupport.getJsonValue(jsonObject, "accept", JsonString.class), jsonObject.get("_accept"), -1));
        builder.contentType((Code) parseString(Code.builder(), "contentType", JsonSupport.getJsonValue(jsonObject, "contentType", JsonString.class), jsonObject.get("_contentType"), -1));
        builder.destination(parseInteger("destination", JsonSupport.getJsonValue(jsonObject, "destination", JsonNumber.class), jsonObject.get("_destination"), -1));
        builder.method((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "method", JsonSupport.getJsonValue(jsonObject, "method", JsonString.class), jsonObject.get("_method"), -1));
        builder.origin(parseInteger("origin", JsonSupport.getJsonValue(jsonObject, "origin", JsonNumber.class), jsonObject.get("_origin"), -1));
        builder.params(parseString("params", JsonSupport.getJsonValue(jsonObject, "params", JsonString.class), jsonObject.get("_params"), -1));
        JsonArray requestHeaderArray = JsonSupport.getJsonArray(jsonObject, "requestHeader");
        if (requestHeaderArray != null) {
            int index = 0;
            for (JsonValue jsonValue : requestHeaderArray) {
                builder.requestHeader(parseTestScriptSetupActionOperationRequestHeader("requestHeader", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.requestId((Id) parseString(Id.builder(), "requestId", JsonSupport.getJsonValue(jsonObject, "requestId", JsonString.class), jsonObject.get("_requestId"), -1));
        builder.responseId((Id) parseString(Id.builder(), "responseId", JsonSupport.getJsonValue(jsonObject, "responseId", JsonString.class), jsonObject.get("_responseId"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", JsonSupport.getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        builder.targetId((Id) parseString(Id.builder(), "targetId", JsonSupport.getJsonValue(jsonObject, "targetId", JsonString.class), jsonObject.get("_targetId"), -1));
        builder.url(parseString("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Setup.Action.Operation.RequestHeader parseTestScriptSetupActionOperationRequestHeader(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Setup.Action.Operation.RequestHeader", jsonObject);
        String field = parseString("field", JsonSupport.getJsonValue(jsonObject, "field", JsonString.class), jsonObject.get("_field"), -1);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        TestScript.Setup.Action.Operation.RequestHeader.Builder builder = TestScript.Setup.Action.Operation.RequestHeader.builder(field, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestScript.Teardown parseTestScriptTeardown(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Teardown", jsonObject);
        java.util.List<TestScript.Teardown.Action> action = new ArrayList<>();
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                action.add(parseTestScriptTeardownAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestScript.Teardown.Builder builder = TestScript.Teardown.builder(action);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestScript.Teardown.Action parseTestScriptTeardownAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Teardown.Action", jsonObject);
        TestScript.Setup.Action.Operation operation = parseTestScriptSetupActionOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1);
        TestScript.Teardown.Action.Builder builder = TestScript.Teardown.Action.builder(operation);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected TestScript.Test parseTestScriptTest(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Test", jsonObject);
        java.util.List<TestScript.Test.Action> action = new ArrayList<>();
        JsonArray actionArray = JsonSupport.getJsonArray(jsonObject, "action");
        if (actionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : actionArray) {
                action.add(parseTestScriptTestAction("action", (JsonObject) jsonValue, index));
                index++;
            }
        }
        TestScript.Test.Builder builder = TestScript.Test.builder(action);
        parseBackboneElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Test.Action parseTestScriptTestAction(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Test.Action", jsonObject);
        TestScript.Test.Action.Builder builder = TestScript.Test.Action.builder();
        parseBackboneElement(builder, jsonObject);
        builder.operation(parseTestScriptSetupActionOperation("operation", JsonSupport.getJsonValue(jsonObject, "operation", JsonObject.class), -1));
        builder._assert(parseTestScriptSetupActionAssert("assert", JsonSupport.getJsonValue(jsonObject, "assert", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected TestScript.Variable parseTestScriptVariable(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TestScript.Variable", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        TestScript.Variable.Builder builder = TestScript.Variable.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.defaultValue(parseString("defaultValue", JsonSupport.getJsonValue(jsonObject, "defaultValue", JsonString.class), jsonObject.get("_defaultValue"), -1));
        builder.description(parseString("description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        builder.expression(parseString("expression", JsonSupport.getJsonValue(jsonObject, "expression", JsonString.class), jsonObject.get("_expression"), -1));
        builder.headerField(parseString("headerField", JsonSupport.getJsonValue(jsonObject, "headerField", JsonString.class), jsonObject.get("_headerField"), -1));
        builder.hint(parseString("hint", JsonSupport.getJsonValue(jsonObject, "hint", JsonString.class), jsonObject.get("_hint"), -1));
        builder.path(parseString("path", JsonSupport.getJsonValue(jsonObject, "path", JsonString.class), jsonObject.get("_path"), -1));
        builder.sourceId((Id) parseString(Id.builder(), "sourceId", JsonSupport.getJsonValue(jsonObject, "sourceId", JsonString.class), jsonObject.get("_sourceId"), -1));
        stackPop();
        return builder.build();
    }

    protected Time parseTime(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        Time.Builder builder = Time.builder();
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected Timing parseTiming(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Timing", jsonObject);
        Timing.Builder builder = Timing.builder();
        parseBackboneElement(builder, jsonObject);
        JsonArray eventArray = JsonSupport.getJsonArray(jsonObject, "event", true);
        if (eventArray != null) {
            int index = 0;
            JsonArray _eventArray = jsonObject.getJsonArray("_event");
            for (JsonValue jsonValue : eventArray) {
                builder.event(parseDateTime("event", jsonValue, JsonSupport.getJsonValue(_eventArray, index), index));
                index++;
            }
        }
        builder.repeat(parseTimingRepeat("repeat", JsonSupport.getJsonValue(jsonObject, "repeat", JsonObject.class), -1));
        builder.code(parseCodeableConcept("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Timing.Repeat parseTimingRepeat(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("Timing.Repeat", jsonObject);
        Timing.Repeat.Builder builder = Timing.Repeat.builder();
        parseBackboneElement(builder, jsonObject);
        builder.bounds(parseChoiceElement("bounds", jsonObject, "Duration", "Range", "Period"));
        builder.count((PositiveInt) parseInteger(PositiveInt.builder(), "count", JsonSupport.getJsonValue(jsonObject, "count", JsonNumber.class), jsonObject.get("_count"), -1));
        builder.countMax((PositiveInt) parseInteger(PositiveInt.builder(), "countMax", JsonSupport.getJsonValue(jsonObject, "countMax", JsonNumber.class), jsonObject.get("_countMax"), -1));
        builder.duration(parseDecimal("duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonNumber.class), jsonObject.get("_duration"), -1));
        builder.durationMax(parseDecimal("durationMax", JsonSupport.getJsonValue(jsonObject, "durationMax", JsonNumber.class), jsonObject.get("_durationMax"), -1));
        builder.durationUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "durationUnit", JsonSupport.getJsonValue(jsonObject, "durationUnit", JsonString.class), jsonObject.get("_durationUnit"), -1));
        builder.frequency((PositiveInt) parseInteger(PositiveInt.builder(), "frequency", JsonSupport.getJsonValue(jsonObject, "frequency", JsonNumber.class), jsonObject.get("_frequency"), -1));
        builder.frequencyMax((PositiveInt) parseInteger(PositiveInt.builder(), "frequencyMax", JsonSupport.getJsonValue(jsonObject, "frequencyMax", JsonNumber.class), jsonObject.get("_frequencyMax"), -1));
        builder.period(parseDecimal("period", JsonSupport.getJsonValue(jsonObject, "period", JsonNumber.class), jsonObject.get("_period"), -1));
        builder.periodMax(parseDecimal("periodMax", JsonSupport.getJsonValue(jsonObject, "periodMax", JsonNumber.class), jsonObject.get("_periodMax"), -1));
        builder.periodUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "periodUnit", JsonSupport.getJsonValue(jsonObject, "periodUnit", JsonString.class), jsonObject.get("_periodUnit"), -1));
        JsonArray dayOfWeekArray = JsonSupport.getJsonArray(jsonObject, "dayOfWeek", true);
        if (dayOfWeekArray != null) {
            int index = 0;
            JsonArray _dayOfWeekArray = jsonObject.getJsonArray("_dayOfWeek");
            for (JsonValue jsonValue : dayOfWeekArray) {
                builder.dayOfWeek((DayOfWeek) parseString(DayOfWeek.builder(), "dayOfWeek", jsonValue, JsonSupport.getJsonValue(_dayOfWeekArray, index), index));
                index++;
            }
        }
        JsonArray timeOfDayArray = JsonSupport.getJsonArray(jsonObject, "timeOfDay", true);
        if (timeOfDayArray != null) {
            int index = 0;
            JsonArray _timeOfDayArray = jsonObject.getJsonArray("_timeOfDay");
            for (JsonValue jsonValue : timeOfDayArray) {
                builder.timeOfDay(parseTime("timeOfDay", jsonValue, JsonSupport.getJsonValue(_timeOfDayArray, index), index));
                index++;
            }
        }
        JsonArray whenArray = JsonSupport.getJsonArray(jsonObject, "when", true);
        if (whenArray != null) {
            int index = 0;
            JsonArray _whenArray = jsonObject.getJsonArray("_when");
            for (JsonValue jsonValue : whenArray) {
                builder.when((EventTiming) parseString(EventTiming.builder(), "when", jsonValue, JsonSupport.getJsonValue(_whenArray, index), index));
                index++;
            }
        }
        builder.offset((UnsignedInt) parseInteger(UnsignedInt.builder(), "offset", JsonSupport.getJsonValue(jsonObject, "offset", JsonNumber.class), jsonObject.get("_offset"), -1));
        stackPop();
        return builder.build();
    }

    protected TriggerDefinition parseTriggerDefinition(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("TriggerDefinition", jsonObject);
        TriggerType type = (TriggerType) parseString(TriggerType.builder(), "type", JsonSupport.getJsonValue(jsonObject, "type", JsonString.class), jsonObject.get("_type"), -1);
        TriggerDefinition.Builder builder = TriggerDefinition.builder(type);
        parseElement(builder, jsonObject);
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.timing(parseChoiceElement("timing", jsonObject, "Timing", "Reference", "Date", "DateTime"));
        JsonArray dataArray = JsonSupport.getJsonArray(jsonObject, "data");
        if (dataArray != null) {
            int index = 0;
            for (JsonValue jsonValue : dataArray) {
                builder.data(parseDataRequirement("data", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.condition(parseExpression("condition", JsonSupport.getJsonValue(jsonObject, "condition", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected Uri parseUri(Uri.Builder builder, java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        if (jsonValue == null && _jsonValue == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        if (_jsonValue != null && _jsonValue.getValueType() == JsonValue.ValueType.OBJECT) {
            JsonObject jsonObject = (JsonObject) _jsonValue;
            checkForUnrecognizedElements("Element", jsonObject);
            parseElement(builder, jsonObject);
        }
        if (jsonValue != null && jsonValue.getValueType() == JsonValue.ValueType.STRING) {
            JsonString jsonString = (JsonString) jsonValue;
            builder.value(jsonString.getString());
        }
        stackPop();
        return builder.build();
    }

    protected Uri parseUri(java.lang.String elementName, JsonValue jsonValue, JsonValue _jsonValue, int elementIndex) {
        return parseUri(Uri.builder(), elementName, jsonValue, _jsonValue, elementIndex);
    }

    protected UsageContext parseUsageContext(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("UsageContext", jsonObject);
        Coding code = parseCoding("code", JsonSupport.getJsonValue(jsonObject, "code", JsonObject.class), -1);
        Element value = parseChoiceElement("value", jsonObject, "CodeableConcept", "Quantity", "Range", "Reference");
        UsageContext.Builder builder = UsageContext.builder(code, value);
        parseElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ValueSet parseValueSet(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet", jsonObject);
        PublicationStatus status = (PublicationStatus) parseString(PublicationStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        ValueSet.Builder builder = ValueSet.builder(status);
        parseDomainResource(builder, jsonObject);
        builder.url(parseUri("url", JsonSupport.getJsonValue(jsonObject, "url", JsonString.class), jsonObject.get("_url"), -1));
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.name(parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1));
        builder.title(parseString("title", JsonSupport.getJsonValue(jsonObject, "title", JsonString.class), jsonObject.get("_title"), -1));
        builder.experimental(parseBoolean("experimental", JsonSupport.getJsonValue(jsonObject, "experimental", JsonValue.class), jsonObject.get("_experimental"), -1));
        builder.date(parseDateTime("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.publisher(parseString("publisher", JsonSupport.getJsonValue(jsonObject, "publisher", JsonString.class), jsonObject.get("_publisher"), -1));
        JsonArray contactArray = JsonSupport.getJsonArray(jsonObject, "contact");
        if (contactArray != null) {
            int index = 0;
            for (JsonValue jsonValue : contactArray) {
                builder.contact(parseContactDetail("contact", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.description((Markdown) parseString(Markdown.builder(), "description", JsonSupport.getJsonValue(jsonObject, "description", JsonString.class), jsonObject.get("_description"), -1));
        JsonArray useContextArray = JsonSupport.getJsonArray(jsonObject, "useContext");
        if (useContextArray != null) {
            int index = 0;
            for (JsonValue jsonValue : useContextArray) {
                builder.useContext(parseUsageContext("useContext", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray jurisdictionArray = JsonSupport.getJsonArray(jsonObject, "jurisdiction");
        if (jurisdictionArray != null) {
            int index = 0;
            for (JsonValue jsonValue : jurisdictionArray) {
                builder.jurisdiction(parseCodeableConcept("jurisdiction", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.immutable(parseBoolean("immutable", JsonSupport.getJsonValue(jsonObject, "immutable", JsonValue.class), jsonObject.get("_immutable"), -1));
        builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", JsonSupport.getJsonValue(jsonObject, "purpose", JsonString.class), jsonObject.get("_purpose"), -1));
        builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", JsonSupport.getJsonValue(jsonObject, "copyright", JsonString.class), jsonObject.get("_copyright"), -1));
        builder.compose(parseValueSetCompose("compose", JsonSupport.getJsonValue(jsonObject, "compose", JsonObject.class), -1));
        builder.expansion(parseValueSetExpansion("expansion", JsonSupport.getJsonValue(jsonObject, "expansion", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ValueSet.Compose parseValueSetCompose(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Compose", jsonObject);
        java.util.List<ValueSet.Compose.Include> include = new ArrayList<>();
        JsonArray includeArray = JsonSupport.getJsonArray(jsonObject, "include");
        if (includeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : includeArray) {
                include.add(parseValueSetComposeInclude("include", (JsonObject) jsonValue, index));
                index++;
            }
        }
        ValueSet.Compose.Builder builder = ValueSet.Compose.builder(include);
        parseBackboneElement(builder, jsonObject);
        builder.lockedDate(parseDate("lockedDate", JsonSupport.getJsonValue(jsonObject, "lockedDate", JsonString.class), jsonObject.get("_lockedDate"), -1));
        builder.inactive(parseBoolean("inactive", JsonSupport.getJsonValue(jsonObject, "inactive", JsonValue.class), jsonObject.get("_inactive"), -1));
        JsonArray excludeArray = JsonSupport.getJsonArray(jsonObject, "exclude");
        if (excludeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : excludeArray) {
                builder.exclude(parseValueSetComposeInclude("exclude", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ValueSet.Compose.Include parseValueSetComposeInclude(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Compose.Include", jsonObject);
        ValueSet.Compose.Include.Builder builder = ValueSet.Compose.Include.builder();
        parseBackboneElement(builder, jsonObject);
        builder.system(parseUri("system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        JsonArray conceptArray = JsonSupport.getJsonArray(jsonObject, "concept");
        if (conceptArray != null) {
            int index = 0;
            for (JsonValue jsonValue : conceptArray) {
                builder.concept(parseValueSetComposeIncludeConcept("concept", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray filterArray = JsonSupport.getJsonArray(jsonObject, "filter");
        if (filterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : filterArray) {
                builder.filter(parseValueSetComposeIncludeFilter("filter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray valueSetArray = JsonSupport.getJsonArray(jsonObject, "valueSet", true);
        if (valueSetArray != null) {
            int index = 0;
            JsonArray _valueSetArray = jsonObject.getJsonArray("_valueSet");
            for (JsonValue jsonValue : valueSetArray) {
                builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", jsonValue, JsonSupport.getJsonValue(_valueSetArray, index), index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ValueSet.Compose.Include.Concept parseValueSetComposeIncludeConcept(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Compose.Include.Concept", jsonObject);
        Code code = (Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1);
        ValueSet.Compose.Include.Concept.Builder builder = ValueSet.Compose.Include.Concept.builder(code);
        parseBackboneElement(builder, jsonObject);
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        JsonArray designationArray = JsonSupport.getJsonArray(jsonObject, "designation");
        if (designationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : designationArray) {
                builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ValueSet.Compose.Include.Concept.Designation parseValueSetComposeIncludeConceptDesignation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Compose.Include.Concept.Designation", jsonObject);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        ValueSet.Compose.Include.Concept.Designation.Builder builder = ValueSet.Compose.Include.Concept.Designation.builder(value);
        parseBackboneElement(builder, jsonObject);
        builder.language((Code) parseString(Code.builder(), "language", JsonSupport.getJsonValue(jsonObject, "language", JsonString.class), jsonObject.get("_language"), -1));
        builder.use(parseCoding("use", JsonSupport.getJsonValue(jsonObject, "use", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected ValueSet.Compose.Include.Filter parseValueSetComposeIncludeFilter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Compose.Include.Filter", jsonObject);
        Code property = (Code) parseString(Code.builder(), "property", JsonSupport.getJsonValue(jsonObject, "property", JsonString.class), jsonObject.get("_property"), -1);
        FilterOperator op = (FilterOperator) parseString(FilterOperator.builder(), "op", JsonSupport.getJsonValue(jsonObject, "op", JsonString.class), jsonObject.get("_op"), -1);
        String value = parseString("value", JsonSupport.getJsonValue(jsonObject, "value", JsonString.class), jsonObject.get("_value"), -1);
        ValueSet.Compose.Include.Filter.Builder builder = ValueSet.Compose.Include.Filter.builder(property, op, value);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected ValueSet.Expansion parseValueSetExpansion(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Expansion", jsonObject);
        DateTime timestamp = parseDateTime("timestamp", JsonSupport.getJsonValue(jsonObject, "timestamp", JsonString.class), jsonObject.get("_timestamp"), -1);
        ValueSet.Expansion.Builder builder = ValueSet.Expansion.builder(timestamp);
        parseBackboneElement(builder, jsonObject);
        builder.identifier(parseUri("identifier", JsonSupport.getJsonValue(jsonObject, "identifier", JsonString.class), jsonObject.get("_identifier"), -1));
        builder.total(parseInteger("total", JsonSupport.getJsonValue(jsonObject, "total", JsonNumber.class), jsonObject.get("_total"), -1));
        builder.offset(parseInteger("offset", JsonSupport.getJsonValue(jsonObject, "offset", JsonNumber.class), jsonObject.get("_offset"), -1));
        JsonArray parameterArray = JsonSupport.getJsonArray(jsonObject, "parameter");
        if (parameterArray != null) {
            int index = 0;
            for (JsonValue jsonValue : parameterArray) {
                builder.parameter(parseValueSetExpansionParameter("parameter", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray containsArray = JsonSupport.getJsonArray(jsonObject, "contains");
        if (containsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : containsArray) {
                builder.contains(parseValueSetExpansionContains("contains", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ValueSet.Expansion.Contains parseValueSetExpansionContains(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Expansion.Contains", jsonObject);
        ValueSet.Expansion.Contains.Builder builder = ValueSet.Expansion.Contains.builder();
        parseBackboneElement(builder, jsonObject);
        builder.system(parseUri("system", JsonSupport.getJsonValue(jsonObject, "system", JsonString.class), jsonObject.get("_system"), -1));
        builder._abstract(parseBoolean("abstract", JsonSupport.getJsonValue(jsonObject, "abstract", JsonValue.class), jsonObject.get("_abstract"), -1));
        builder.inactive(parseBoolean("inactive", JsonSupport.getJsonValue(jsonObject, "inactive", JsonValue.class), jsonObject.get("_inactive"), -1));
        builder.version(parseString("version", JsonSupport.getJsonValue(jsonObject, "version", JsonString.class), jsonObject.get("_version"), -1));
        builder.code((Code) parseString(Code.builder(), "code", JsonSupport.getJsonValue(jsonObject, "code", JsonString.class), jsonObject.get("_code"), -1));
        builder.display(parseString("display", JsonSupport.getJsonValue(jsonObject, "display", JsonString.class), jsonObject.get("_display"), -1));
        JsonArray designationArray = JsonSupport.getJsonArray(jsonObject, "designation");
        if (designationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : designationArray) {
                builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray containsArray = JsonSupport.getJsonArray(jsonObject, "contains");
        if (containsArray != null) {
            int index = 0;
            for (JsonValue jsonValue : containsArray) {
                builder.contains(parseValueSetExpansionContains("contains", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected ValueSet.Expansion.Parameter parseValueSetExpansionParameter(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("ValueSet.Expansion.Parameter", jsonObject);
        String name = parseString("name", JsonSupport.getJsonValue(jsonObject, "name", JsonString.class), jsonObject.get("_name"), -1);
        ValueSet.Expansion.Parameter.Builder builder = ValueSet.Expansion.Parameter.builder(name);
        parseBackboneElement(builder, jsonObject);
        builder.value(parseChoiceElement("value", jsonObject, "String", "Boolean", "Integer", "Decimal", "Uri", "Code", "DateTime"));
        stackPop();
        return builder.build();
    }

    protected VerificationResult parseVerificationResult(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VerificationResult", jsonObject);
        Status status = (Status) parseString(Status.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        VerificationResult.Builder builder = VerificationResult.builder(status);
        parseDomainResource(builder, jsonObject);
        JsonArray targetArray = JsonSupport.getJsonArray(jsonObject, "target");
        if (targetArray != null) {
            int index = 0;
            for (JsonValue jsonValue : targetArray) {
                builder.target(parseReference("target", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray targetLocationArray = JsonSupport.getJsonArray(jsonObject, "targetLocation", true);
        if (targetLocationArray != null) {
            int index = 0;
            JsonArray _targetLocationArray = jsonObject.getJsonArray("_targetLocation");
            for (JsonValue jsonValue : targetLocationArray) {
                builder.targetLocation(parseString("targetLocation", jsonValue, JsonSupport.getJsonValue(_targetLocationArray, index), index));
                index++;
            }
        }
        builder.need(parseCodeableConcept("need", JsonSupport.getJsonValue(jsonObject, "need", JsonObject.class), -1));
        builder.statusDate(parseDateTime("statusDate", JsonSupport.getJsonValue(jsonObject, "statusDate", JsonString.class), jsonObject.get("_statusDate"), -1));
        builder.validationType(parseCodeableConcept("validationType", JsonSupport.getJsonValue(jsonObject, "validationType", JsonObject.class), -1));
        JsonArray validationProcessArray = JsonSupport.getJsonArray(jsonObject, "validationProcess");
        if (validationProcessArray != null) {
            int index = 0;
            for (JsonValue jsonValue : validationProcessArray) {
                builder.validationProcess(parseCodeableConcept("validationProcess", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.frequency(parseTiming("frequency", JsonSupport.getJsonValue(jsonObject, "frequency", JsonObject.class), -1));
        builder.lastPerformed(parseDateTime("lastPerformed", JsonSupport.getJsonValue(jsonObject, "lastPerformed", JsonString.class), jsonObject.get("_lastPerformed"), -1));
        builder.nextScheduled(parseDate("nextScheduled", JsonSupport.getJsonValue(jsonObject, "nextScheduled", JsonString.class), jsonObject.get("_nextScheduled"), -1));
        builder.failureAction(parseCodeableConcept("failureAction", JsonSupport.getJsonValue(jsonObject, "failureAction", JsonObject.class), -1));
        JsonArray primarySourceArray = JsonSupport.getJsonArray(jsonObject, "primarySource");
        if (primarySourceArray != null) {
            int index = 0;
            for (JsonValue jsonValue : primarySourceArray) {
                builder.primarySource(parseVerificationResultPrimarySource("primarySource", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.attestation(parseVerificationResultAttestation("attestation", JsonSupport.getJsonValue(jsonObject, "attestation", JsonObject.class), -1));
        JsonArray validatorArray = JsonSupport.getJsonArray(jsonObject, "validator");
        if (validatorArray != null) {
            int index = 0;
            for (JsonValue jsonValue : validatorArray) {
                builder.validator(parseVerificationResultValidator("validator", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected VerificationResult.Attestation parseVerificationResultAttestation(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VerificationResult.Attestation", jsonObject);
        VerificationResult.Attestation.Builder builder = VerificationResult.Attestation.builder();
        parseBackboneElement(builder, jsonObject);
        builder.who(parseReference("who", JsonSupport.getJsonValue(jsonObject, "who", JsonObject.class), -1));
        builder.onBehalfOf(parseReference("onBehalfOf", JsonSupport.getJsonValue(jsonObject, "onBehalfOf", JsonObject.class), -1));
        builder.communicationMethod(parseCodeableConcept("communicationMethod", JsonSupport.getJsonValue(jsonObject, "communicationMethod", JsonObject.class), -1));
        builder.date(parseDate("date", JsonSupport.getJsonValue(jsonObject, "date", JsonString.class), jsonObject.get("_date"), -1));
        builder.sourceIdentityCertificate(parseString("sourceIdentityCertificate", JsonSupport.getJsonValue(jsonObject, "sourceIdentityCertificate", JsonString.class), jsonObject.get("_sourceIdentityCertificate"), -1));
        builder.proxyIdentityCertificate(parseString("proxyIdentityCertificate", JsonSupport.getJsonValue(jsonObject, "proxyIdentityCertificate", JsonString.class), jsonObject.get("_proxyIdentityCertificate"), -1));
        builder.proxySignature(parseSignature("proxySignature", JsonSupport.getJsonValue(jsonObject, "proxySignature", JsonObject.class), -1));
        builder.sourceSignature(parseSignature("sourceSignature", JsonSupport.getJsonValue(jsonObject, "sourceSignature", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected VerificationResult.PrimarySource parseVerificationResultPrimarySource(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VerificationResult.PrimarySource", jsonObject);
        VerificationResult.PrimarySource.Builder builder = VerificationResult.PrimarySource.builder();
        parseBackboneElement(builder, jsonObject);
        builder.who(parseReference("who", JsonSupport.getJsonValue(jsonObject, "who", JsonObject.class), -1));
        JsonArray typeArray = JsonSupport.getJsonArray(jsonObject, "type");
        if (typeArray != null) {
            int index = 0;
            for (JsonValue jsonValue : typeArray) {
                builder.type(parseCodeableConcept("type", (JsonObject) jsonValue, index));
                index++;
            }
        }
        JsonArray communicationMethodArray = JsonSupport.getJsonArray(jsonObject, "communicationMethod");
        if (communicationMethodArray != null) {
            int index = 0;
            for (JsonValue jsonValue : communicationMethodArray) {
                builder.communicationMethod(parseCodeableConcept("communicationMethod", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.validationStatus(parseCodeableConcept("validationStatus", JsonSupport.getJsonValue(jsonObject, "validationStatus", JsonObject.class), -1));
        builder.validationDate(parseDateTime("validationDate", JsonSupport.getJsonValue(jsonObject, "validationDate", JsonString.class), jsonObject.get("_validationDate"), -1));
        builder.canPushUpdates(parseCodeableConcept("canPushUpdates", JsonSupport.getJsonValue(jsonObject, "canPushUpdates", JsonObject.class), -1));
        JsonArray pushTypeAvailableArray = JsonSupport.getJsonArray(jsonObject, "pushTypeAvailable");
        if (pushTypeAvailableArray != null) {
            int index = 0;
            for (JsonValue jsonValue : pushTypeAvailableArray) {
                builder.pushTypeAvailable(parseCodeableConcept("pushTypeAvailable", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected VerificationResult.Validator parseVerificationResultValidator(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VerificationResult.Validator", jsonObject);
        Reference organization = parseReference("organization", JsonSupport.getJsonValue(jsonObject, "organization", JsonObject.class), -1);
        VerificationResult.Validator.Builder builder = VerificationResult.Validator.builder(organization);
        parseBackboneElement(builder, jsonObject);
        builder.identityCertificate(parseString("identityCertificate", JsonSupport.getJsonValue(jsonObject, "identityCertificate", JsonString.class), jsonObject.get("_identityCertificate"), -1));
        builder.attestationSignature(parseSignature("attestationSignature", JsonSupport.getJsonValue(jsonObject, "attestationSignature", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected VisionPrescription parseVisionPrescription(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VisionPrescription", jsonObject);
        VisionStatus status = (VisionStatus) parseString(VisionStatus.builder(), "status", JsonSupport.getJsonValue(jsonObject, "status", JsonString.class), jsonObject.get("_status"), -1);
        DateTime created = parseDateTime("created", JsonSupport.getJsonValue(jsonObject, "created", JsonString.class), jsonObject.get("_created"), -1);
        Reference patient = parseReference("patient", JsonSupport.getJsonValue(jsonObject, "patient", JsonObject.class), -1);
        DateTime dateWritten = parseDateTime("dateWritten", JsonSupport.getJsonValue(jsonObject, "dateWritten", JsonString.class), jsonObject.get("_dateWritten"), -1);
        Reference prescriber = parseReference("prescriber", JsonSupport.getJsonValue(jsonObject, "prescriber", JsonObject.class), -1);
        java.util.List<VisionPrescription.LensSpecification> lensSpecification = new ArrayList<>();
        JsonArray lensSpecificationArray = JsonSupport.getJsonArray(jsonObject, "lensSpecification");
        if (lensSpecificationArray != null) {
            int index = 0;
            for (JsonValue jsonValue : lensSpecificationArray) {
                lensSpecification.add(parseVisionPrescriptionLensSpecification("lensSpecification", (JsonObject) jsonValue, index));
                index++;
            }
        }
        VisionPrescription.Builder builder = VisionPrescription.builder(status, created, patient, dateWritten, prescriber, lensSpecification);
        parseDomainResource(builder, jsonObject);
        JsonArray identifierArray = JsonSupport.getJsonArray(jsonObject, "identifier");
        if (identifierArray != null) {
            int index = 0;
            for (JsonValue jsonValue : identifierArray) {
                builder.identifier(parseIdentifier("identifier", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.encounter(parseReference("encounter", JsonSupport.getJsonValue(jsonObject, "encounter", JsonObject.class), -1));
        stackPop();
        return builder.build();
    }

    protected VisionPrescription.LensSpecification parseVisionPrescriptionLensSpecification(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VisionPrescription.LensSpecification", jsonObject);
        CodeableConcept product = parseCodeableConcept("product", JsonSupport.getJsonValue(jsonObject, "product", JsonObject.class), -1);
        VisionEyes eye = (VisionEyes) parseString(VisionEyes.builder(), "eye", JsonSupport.getJsonValue(jsonObject, "eye", JsonString.class), jsonObject.get("_eye"), -1);
        VisionPrescription.LensSpecification.Builder builder = VisionPrescription.LensSpecification.builder(product, eye);
        parseBackboneElement(builder, jsonObject);
        builder.sphere(parseDecimal("sphere", JsonSupport.getJsonValue(jsonObject, "sphere", JsonNumber.class), jsonObject.get("_sphere"), -1));
        builder.cylinder(parseDecimal("cylinder", JsonSupport.getJsonValue(jsonObject, "cylinder", JsonNumber.class), jsonObject.get("_cylinder"), -1));
        builder.axis(parseInteger("axis", JsonSupport.getJsonValue(jsonObject, "axis", JsonNumber.class), jsonObject.get("_axis"), -1));
        JsonArray prismArray = JsonSupport.getJsonArray(jsonObject, "prism");
        if (prismArray != null) {
            int index = 0;
            for (JsonValue jsonValue : prismArray) {
                builder.prism(parseVisionPrescriptionLensSpecificationPrism("prism", (JsonObject) jsonValue, index));
                index++;
            }
        }
        builder.add(parseDecimal("add", JsonSupport.getJsonValue(jsonObject, "add", JsonNumber.class), jsonObject.get("_add"), -1));
        builder.power(parseDecimal("power", JsonSupport.getJsonValue(jsonObject, "power", JsonNumber.class), jsonObject.get("_power"), -1));
        builder.backCurve(parseDecimal("backCurve", JsonSupport.getJsonValue(jsonObject, "backCurve", JsonNumber.class), jsonObject.get("_backCurve"), -1));
        builder.diameter(parseDecimal("diameter", JsonSupport.getJsonValue(jsonObject, "diameter", JsonNumber.class), jsonObject.get("_diameter"), -1));
        builder.duration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "duration", JsonSupport.getJsonValue(jsonObject, "duration", JsonObject.class), -1));
        builder.color(parseString("color", JsonSupport.getJsonValue(jsonObject, "color", JsonString.class), jsonObject.get("_color"), -1));
        builder.brand(parseString("brand", JsonSupport.getJsonValue(jsonObject, "brand", JsonString.class), jsonObject.get("_brand"), -1));
        JsonArray noteArray = JsonSupport.getJsonArray(jsonObject, "note");
        if (noteArray != null) {
            int index = 0;
            for (JsonValue jsonValue : noteArray) {
                builder.note(parseAnnotation("note", (JsonObject) jsonValue, index));
                index++;
            }
        }
        stackPop();
        return builder.build();
    }

    protected VisionPrescription.LensSpecification.Prism parseVisionPrescriptionLensSpecificationPrism(java.lang.String elementName, JsonObject jsonObject, int elementIndex) {
        if (jsonObject == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        checkForUnrecognizedElements("VisionPrescription.LensSpecification.Prism", jsonObject);
        Decimal amount = parseDecimal("amount", JsonSupport.getJsonValue(jsonObject, "amount", JsonNumber.class), jsonObject.get("_amount"), -1);
        VisionBase base = (VisionBase) parseString(VisionBase.builder(), "base", JsonSupport.getJsonValue(jsonObject, "base", JsonString.class), jsonObject.get("_base"), -1);
        VisionPrescription.LensSpecification.Prism.Builder builder = VisionPrescription.LensSpecification.Prism.builder(amount, base);
        parseBackboneElement(builder, jsonObject);
        stackPop();
        return builder.build();
    }

    protected void stackPush(java.lang.String elementName, int elementIndex) {
        if (elementIndex != -1) {
            stack.push(elementName + "[" + elementIndex + "]");
        } else {
            stack.push(elementName);
        }
        if (DEBUG) {
            System.out.println(getPath());
        }
    }

    protected void stackPop() {
        stack.pop();
    }

    protected Element parseChoiceElement(java.lang.String name, JsonObject jsonObject, java.lang.String... choiceTypeNames) {
        if (jsonObject == null) {
            return null;
        }

        java.lang.String elementName = null;
        java.lang.String _elementName = null;
        java.lang.String elementType = null;

        for (java.lang.String choiceTypeName : choiceTypeNames) {
            java.lang.String key = name + FHIRUtil.getConcreteType(choiceTypeName);
            if (jsonObject.containsKey(key)) {
                if (elementName != null) {
                    throw new IllegalArgumentException();
                }
                elementName = key;
                elementType = choiceTypeName;
            }

            java.lang.String _key = "_" + key;
            if (jsonObject.containsKey(_key)) {
                if (_elementName != null) {
                    throw new IllegalArgumentException();
                }
                _elementName = _key;
                if (elementType == null) {
                    elementType = choiceTypeName;
                }
            }
        }

        if (elementName != null && _elementName != null && !_elementName.endsWith(elementName)) {
            throw new IllegalArgumentException();
        }

        JsonValue jsonValue = null;
        if (elementName != null) {
            jsonValue = jsonObject.get(elementName);
        }

        JsonValue _jsonValue = null;
        if (_elementName != null) {
            _jsonValue = jsonObject.get(_elementName);
        }

        if (elementType != null) {
            switch (elementType) {
            case "Base64Binary":
                return parseBase64Binary(elementName, jsonValue, _jsonValue, -1);
            case "Boolean":
                return parseBoolean(elementName, jsonValue, _jsonValue, -1);
            case "Canonical":
                return parseUri(Canonical.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Code":
                return parseString(Code.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Date":
                return parseDate(elementName, jsonValue, _jsonValue, -1);
            case "DateTime":
                return parseDateTime(elementName, jsonValue, _jsonValue, -1);
            case "Decimal":
                return parseDecimal(elementName, jsonValue, _jsonValue, -1);
            case "Id":
                return parseString(Id.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Instant":
                return parseInstant(elementName, jsonValue, _jsonValue, -1);
            case "Integer":
                return parseInteger(elementName, jsonValue, _jsonValue, -1);
            case "Markdown":
                return parseString(Markdown.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Oid":
                return parseUri(Oid.builder(), elementName, jsonValue, _jsonValue, -1);
            case "PositiveInt":
                return parseInteger(PositiveInt.builder(), elementName, jsonValue, _jsonValue, -1);
            case "String":
                return parseString(elementName, jsonValue, _jsonValue, -1);
            case "Time":
                return parseTime(elementName, jsonValue, _jsonValue, -1);
            case "UnsignedInt":
                return parseInteger(UnsignedInt.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Uri":
                return parseUri(elementName, jsonValue, _jsonValue, -1);
            case "Url":
                return parseUri(Url.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Uuid":
                return parseUri(Uuid.builder(), elementName, jsonValue, _jsonValue, -1);
            case "Address":
                return parseAddress(elementName, (JsonObject) jsonValue, -1);
            case "Age":
                return parseQuantity(Age.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Annotation":
                return parseAnnotation(elementName, (JsonObject) jsonValue, -1);
            case "Attachment":
                return parseAttachment(elementName, (JsonObject) jsonValue, -1);
            case "CodeableConcept":
                return parseCodeableConcept(elementName, (JsonObject) jsonValue, -1);
            case "Coding":
                return parseCoding(elementName, (JsonObject) jsonValue, -1);
            case "ContactPoint":
                return parseContactPoint(elementName, (JsonObject) jsonValue, -1);
            case "Count":
                return parseQuantity(Count.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Distance":
                return parseQuantity(Distance.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Duration":
                return parseQuantity(Duration.builder(), elementName, (JsonObject) jsonValue, -1);
            case "HumanName":
                return parseHumanName(elementName, (JsonObject) jsonValue, -1);
            case "Identifier":
                return parseIdentifier(elementName, (JsonObject) jsonValue, -1);
            case "Money":
                return parseMoney(elementName, (JsonObject) jsonValue, -1);
            case "MoneyQuantity":
                return parseQuantity(MoneyQuantity.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Period":
                return parsePeriod(elementName, (JsonObject) jsonValue, -1);
            case "Quantity":
                return parseQuantity(elementName, (JsonObject) jsonValue, -1);
            case "Range":
                return parseRange(elementName, (JsonObject) jsonValue, -1);
            case "Ratio":
                return parseRatio(elementName, (JsonObject) jsonValue, -1);
            case "Reference":
                return parseReference(elementName, (JsonObject) jsonValue, -1);
            case "SampledData":
                return parseSampledData(elementName, (JsonObject) jsonValue, -1);
            case "SimpleQuantity":
                return parseQuantity(SimpleQuantity.builder(), elementName, (JsonObject) jsonValue, -1);
            case "Signature":
                return parseSignature(elementName, (JsonObject) jsonValue, -1);
            case "Timing":
                return parseTiming(elementName, (JsonObject) jsonValue, -1);
            case "ContactDetail":
                return parseContactDetail(elementName, (JsonObject) jsonValue, -1);
            case "Contributor":
                return parseContributor(elementName, (JsonObject) jsonValue, -1);
            case "DataRequirement":
                return parseDataRequirement(elementName, (JsonObject) jsonValue, -1);
            case "Expression":
                return parseExpression(elementName, (JsonObject) jsonValue, -1);
            case "ParameterDefinition":
                return parseParameterDefinition(elementName, (JsonObject) jsonValue, -1);
            case "RelatedArtifact":
                return parseRelatedArtifact(elementName, (JsonObject) jsonValue, -1);
            case "TriggerDefinition":
                return parseTriggerDefinition(elementName, (JsonObject) jsonValue, -1);
            case "UsageContext":
                return parseUsageContext(elementName, (JsonObject) jsonValue, -1);
            case "Dosage":
                return parseDosage(elementName, (JsonObject) jsonValue, -1);
            }
        }

        return null;
    }

    protected java.lang.String getPath() {
        StringJoiner joiner = new StringJoiner(".");
        for (java.lang.String s : stack) {
            joiner.add(s);
        }
        return joiner.toString();
    }

    protected java.lang.String parseJavaString(java.lang.String elementName, JsonString jsonString, int elementIndex) {
        if (jsonString == null) {
            return null;
        }
        stackPush(elementName, elementIndex);
        java.lang.String javaString = jsonString.getString();
        stackPop();
        return javaString;
    }

    protected void checkForUnrecognizedElements(java.lang.String typeName, JsonObject jsonObject) {
        Set<java.lang.String> elementNames = JsonSupport.getElementNames(typeName);
        for (java.lang.String key : jsonObject.keySet()) {
            if (!elementNames.contains(key) && !"resourceType".equals(key) && !"fhir_comments".equals(key)) {
                throw new IllegalArgumentException("Unrecognized element: '" + key + "'");
            }
        }
    }

    protected java.lang.String getResourceType(JsonObject jsonObject) {
        JsonString resourceTypeString = jsonObject.getJsonString("resourceType");
        if (resourceTypeString == null) {
            throw new IllegalArgumentException("Missing required element: 'resourceType'");
        }
        java.lang.String resourceType = resourceTypeString.getString();
        try {
            ResourceType.ValueSet.from(resourceType);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid resource type: '" + resourceType + "'");
        }
        return resourceTypeString.getString();
    }
}
