/**
 * (C) Copyright IBM Corp. 2019
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package com.ibm.watsonhealth.fhir.model.parser;

import static com.ibm.watsonhealth.fhir.model.util.XMLSupport.createStreamReaderDelegate;
import static com.ibm.watsonhealth.fhir.model.util.XMLSupport.parseDiv;
import static com.ibm.watsonhealth.fhir.model.util.XMLSupport.requireNamespace;
import static com.ibm.watsonhealth.fhir.model.util.XMLSupport.FHIR_NS_URI;
import static com.ibm.watsonhealth.fhir.model.util.XMLSupport.XHTML_NS_URI;
import static com.ibm.watsonhealth.fhir.model.util.XMLSupport.XML_INPUT_FACTORY;

import java.io.InputStream;
import java.io.Reader;
import java.util.Stack;
import java.util.StringJoiner;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import com.ibm.watsonhealth.fhir.model.parser.FHIRParser;
import com.ibm.watsonhealth.fhir.model.parser.exception.FHIRParserException;
import com.ibm.watsonhealth.fhir.model.resource.*;
import com.ibm.watsonhealth.fhir.model.type.*;
import com.ibm.watsonhealth.fhir.model.type.Boolean;
import com.ibm.watsonhealth.fhir.model.type.Integer;
import com.ibm.watsonhealth.fhir.model.type.String;
import com.ibm.watsonhealth.fhir.model.util.XMLSupport.StreamReaderDelegate;

public class FHIRXMLParser implements FHIRParser {
    public static boolean DEBUG = false;

    private final Stack<java.lang.String> stack = new Stack<>();

    FHIRXMLParser() {
        // only visible to subclasses or classes/interfaces in the same package (e.g. FHIRParser)
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends Resource> T parse(InputStream in) throws FHIRParserException {
        try (StreamReaderDelegate delegate = createStreamReaderDelegate(XML_INPUT_FACTORY.createXMLStreamReader(in, "UTF-8"))) {
            while (delegate.hasNext()) {
                int eventType = delegate.next();
                switch (eventType) {
                case XMLStreamReader.START_ELEMENT:
                    requireNamespace(delegate, FHIR_NS_URI);
                    return (T) parseResource(getResourceType(delegate), delegate, -1);
                }
            }
            throw new XMLStreamException("Unexpected end of stream");
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    @SuppressWarnings("unchecked")
    @Override
    public <T extends Resource> T parse(Reader reader) throws FHIRParserException {
        try (StreamReaderDelegate delegate = createStreamReaderDelegate(XML_INPUT_FACTORY.createXMLStreamReader(reader))) {
            while (delegate.hasNext()) {
                int eventType = delegate.next();
                switch (eventType) {
                case XMLStreamReader.START_ELEMENT:
                    requireNamespace(delegate, FHIR_NS_URI);
                    return (T) parseResource(getResourceType(delegate), delegate, -1);
                }
            }
            throw new XMLStreamException("Unexpected end of stream");
        } catch (Exception e) {
            throw new FHIRParserException(e.getMessage(), getPath(), e);
        }
    }

    @Override
    public void reset() {
        stack.clear();
    }

    private Resource parseResource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        java.lang.String resourceType = getResourceType(reader);
        switch (resourceType) {
        case "Account":
            return parseAccount(elementName, reader, elementIndex);
        case "ActivityDefinition":
            return parseActivityDefinition(elementName, reader, elementIndex);
        case "AdverseEvent":
            return parseAdverseEvent(elementName, reader, elementIndex);
        case "AllergyIntolerance":
            return parseAllergyIntolerance(elementName, reader, elementIndex);
        case "Appointment":
            return parseAppointment(elementName, reader, elementIndex);
        case "AppointmentResponse":
            return parseAppointmentResponse(elementName, reader, elementIndex);
        case "AuditEvent":
            return parseAuditEvent(elementName, reader, elementIndex);
        case "Basic":
            return parseBasic(elementName, reader, elementIndex);
        case "Binary":
            return parseBinary(elementName, reader, elementIndex);
        case "BiologicallyDerivedProduct":
            return parseBiologicallyDerivedProduct(elementName, reader, elementIndex);
        case "BodyStructure":
            return parseBodyStructure(elementName, reader, elementIndex);
        case "Bundle":
            return parseBundle(elementName, reader, elementIndex);
        case "CapabilityStatement":
            return parseCapabilityStatement(elementName, reader, elementIndex);
        case "CarePlan":
            return parseCarePlan(elementName, reader, elementIndex);
        case "CareTeam":
            return parseCareTeam(elementName, reader, elementIndex);
        case "CatalogEntry":
            return parseCatalogEntry(elementName, reader, elementIndex);
        case "ChargeItem":
            return parseChargeItem(elementName, reader, elementIndex);
        case "ChargeItemDefinition":
            return parseChargeItemDefinition(elementName, reader, elementIndex);
        case "Claim":
            return parseClaim(elementName, reader, elementIndex);
        case "ClaimResponse":
            return parseClaimResponse(elementName, reader, elementIndex);
        case "ClinicalImpression":
            return parseClinicalImpression(elementName, reader, elementIndex);
        case "CodeSystem":
            return parseCodeSystem(elementName, reader, elementIndex);
        case "Communication":
            return parseCommunication(elementName, reader, elementIndex);
        case "CommunicationRequest":
            return parseCommunicationRequest(elementName, reader, elementIndex);
        case "CompartmentDefinition":
            return parseCompartmentDefinition(elementName, reader, elementIndex);
        case "Composition":
            return parseComposition(elementName, reader, elementIndex);
        case "ConceptMap":
            return parseConceptMap(elementName, reader, elementIndex);
        case "Condition":
            return parseCondition(elementName, reader, elementIndex);
        case "Consent":
            return parseConsent(elementName, reader, elementIndex);
        case "Contract":
            return parseContract(elementName, reader, elementIndex);
        case "Coverage":
            return parseCoverage(elementName, reader, elementIndex);
        case "CoverageEligibilityRequest":
            return parseCoverageEligibilityRequest(elementName, reader, elementIndex);
        case "CoverageEligibilityResponse":
            return parseCoverageEligibilityResponse(elementName, reader, elementIndex);
        case "DetectedIssue":
            return parseDetectedIssue(elementName, reader, elementIndex);
        case "Device":
            return parseDevice(elementName, reader, elementIndex);
        case "DeviceDefinition":
            return parseDeviceDefinition(elementName, reader, elementIndex);
        case "DeviceMetric":
            return parseDeviceMetric(elementName, reader, elementIndex);
        case "DeviceRequest":
            return parseDeviceRequest(elementName, reader, elementIndex);
        case "DeviceUseStatement":
            return parseDeviceUseStatement(elementName, reader, elementIndex);
        case "DiagnosticReport":
            return parseDiagnosticReport(elementName, reader, elementIndex);
        case "DocumentManifest":
            return parseDocumentManifest(elementName, reader, elementIndex);
        case "DocumentReference":
            return parseDocumentReference(elementName, reader, elementIndex);
        case "EffectEvidenceSynthesis":
            return parseEffectEvidenceSynthesis(elementName, reader, elementIndex);
        case "Encounter":
            return parseEncounter(elementName, reader, elementIndex);
        case "Endpoint":
            return parseEndpoint(elementName, reader, elementIndex);
        case "EnrollmentRequest":
            return parseEnrollmentRequest(elementName, reader, elementIndex);
        case "EnrollmentResponse":
            return parseEnrollmentResponse(elementName, reader, elementIndex);
        case "EpisodeOfCare":
            return parseEpisodeOfCare(elementName, reader, elementIndex);
        case "EventDefinition":
            return parseEventDefinition(elementName, reader, elementIndex);
        case "Evidence":
            return parseEvidence(elementName, reader, elementIndex);
        case "EvidenceVariable":
            return parseEvidenceVariable(elementName, reader, elementIndex);
        case "ExampleScenario":
            return parseExampleScenario(elementName, reader, elementIndex);
        case "ExplanationOfBenefit":
            return parseExplanationOfBenefit(elementName, reader, elementIndex);
        case "FamilyMemberHistory":
            return parseFamilyMemberHistory(elementName, reader, elementIndex);
        case "Flag":
            return parseFlag(elementName, reader, elementIndex);
        case "Goal":
            return parseGoal(elementName, reader, elementIndex);
        case "GraphDefinition":
            return parseGraphDefinition(elementName, reader, elementIndex);
        case "Group":
            return parseGroup(elementName, reader, elementIndex);
        case "GuidanceResponse":
            return parseGuidanceResponse(elementName, reader, elementIndex);
        case "HealthcareService":
            return parseHealthcareService(elementName, reader, elementIndex);
        case "ImagingStudy":
            return parseImagingStudy(elementName, reader, elementIndex);
        case "Immunization":
            return parseImmunization(elementName, reader, elementIndex);
        case "ImmunizationEvaluation":
            return parseImmunizationEvaluation(elementName, reader, elementIndex);
        case "ImmunizationRecommendation":
            return parseImmunizationRecommendation(elementName, reader, elementIndex);
        case "ImplementationGuide":
            return parseImplementationGuide(elementName, reader, elementIndex);
        case "InsurancePlan":
            return parseInsurancePlan(elementName, reader, elementIndex);
        case "Invoice":
            return parseInvoice(elementName, reader, elementIndex);
        case "Library":
            return parseLibrary(elementName, reader, elementIndex);
        case "Linkage":
            return parseLinkage(elementName, reader, elementIndex);
        case "List":
            return parseList(elementName, reader, elementIndex);
        case "Location":
            return parseLocation(elementName, reader, elementIndex);
        case "Measure":
            return parseMeasure(elementName, reader, elementIndex);
        case "MeasureReport":
            return parseMeasureReport(elementName, reader, elementIndex);
        case "Media":
            return parseMedia(elementName, reader, elementIndex);
        case "Medication":
            return parseMedication(elementName, reader, elementIndex);
        case "MedicationAdministration":
            return parseMedicationAdministration(elementName, reader, elementIndex);
        case "MedicationDispense":
            return parseMedicationDispense(elementName, reader, elementIndex);
        case "MedicationKnowledge":
            return parseMedicationKnowledge(elementName, reader, elementIndex);
        case "MedicationRequest":
            return parseMedicationRequest(elementName, reader, elementIndex);
        case "MedicationStatement":
            return parseMedicationStatement(elementName, reader, elementIndex);
        case "MedicinalProduct":
            return parseMedicinalProduct(elementName, reader, elementIndex);
        case "MedicinalProductAuthorization":
            return parseMedicinalProductAuthorization(elementName, reader, elementIndex);
        case "MedicinalProductContraindication":
            return parseMedicinalProductContraindication(elementName, reader, elementIndex);
        case "MedicinalProductIndication":
            return parseMedicinalProductIndication(elementName, reader, elementIndex);
        case "MedicinalProductIngredient":
            return parseMedicinalProductIngredient(elementName, reader, elementIndex);
        case "MedicinalProductInteraction":
            return parseMedicinalProductInteraction(elementName, reader, elementIndex);
        case "MedicinalProductManufactured":
            return parseMedicinalProductManufactured(elementName, reader, elementIndex);
        case "MedicinalProductPackaged":
            return parseMedicinalProductPackaged(elementName, reader, elementIndex);
        case "MedicinalProductPharmaceutical":
            return parseMedicinalProductPharmaceutical(elementName, reader, elementIndex);
        case "MedicinalProductUndesirableEffect":
            return parseMedicinalProductUndesirableEffect(elementName, reader, elementIndex);
        case "MessageDefinition":
            return parseMessageDefinition(elementName, reader, elementIndex);
        case "MessageHeader":
            return parseMessageHeader(elementName, reader, elementIndex);
        case "MetadataResource":
            return parseMetadataResource(elementName, reader, elementIndex);
        case "MolecularSequence":
            return parseMolecularSequence(elementName, reader, elementIndex);
        case "NamingSystem":
            return parseNamingSystem(elementName, reader, elementIndex);
        case "NutritionOrder":
            return parseNutritionOrder(elementName, reader, elementIndex);
        case "Observation":
            return parseObservation(elementName, reader, elementIndex);
        case "ObservationDefinition":
            return parseObservationDefinition(elementName, reader, elementIndex);
        case "OperationDefinition":
            return parseOperationDefinition(elementName, reader, elementIndex);
        case "OperationOutcome":
            return parseOperationOutcome(elementName, reader, elementIndex);
        case "Organization":
            return parseOrganization(elementName, reader, elementIndex);
        case "OrganizationAffiliation":
            return parseOrganizationAffiliation(elementName, reader, elementIndex);
        case "Parameters":
            return parseParameters(elementName, reader, elementIndex);
        case "Patient":
            return parsePatient(elementName, reader, elementIndex);
        case "PaymentNotice":
            return parsePaymentNotice(elementName, reader, elementIndex);
        case "PaymentReconciliation":
            return parsePaymentReconciliation(elementName, reader, elementIndex);
        case "Person":
            return parsePerson(elementName, reader, elementIndex);
        case "PlanDefinition":
            return parsePlanDefinition(elementName, reader, elementIndex);
        case "Practitioner":
            return parsePractitioner(elementName, reader, elementIndex);
        case "PractitionerRole":
            return parsePractitionerRole(elementName, reader, elementIndex);
        case "Procedure":
            return parseProcedure(elementName, reader, elementIndex);
        case "Provenance":
            return parseProvenance(elementName, reader, elementIndex);
        case "Questionnaire":
            return parseQuestionnaire(elementName, reader, elementIndex);
        case "QuestionnaireResponse":
            return parseQuestionnaireResponse(elementName, reader, elementIndex);
        case "RelatedPerson":
            return parseRelatedPerson(elementName, reader, elementIndex);
        case "RequestGroup":
            return parseRequestGroup(elementName, reader, elementIndex);
        case "ResearchDefinition":
            return parseResearchDefinition(elementName, reader, elementIndex);
        case "ResearchElementDefinition":
            return parseResearchElementDefinition(elementName, reader, elementIndex);
        case "ResearchStudy":
            return parseResearchStudy(elementName, reader, elementIndex);
        case "ResearchSubject":
            return parseResearchSubject(elementName, reader, elementIndex);
        case "RiskAssessment":
            return parseRiskAssessment(elementName, reader, elementIndex);
        case "RiskEvidenceSynthesis":
            return parseRiskEvidenceSynthesis(elementName, reader, elementIndex);
        case "Schedule":
            return parseSchedule(elementName, reader, elementIndex);
        case "SearchParameter":
            return parseSearchParameter(elementName, reader, elementIndex);
        case "ServiceRequest":
            return parseServiceRequest(elementName, reader, elementIndex);
        case "Slot":
            return parseSlot(elementName, reader, elementIndex);
        case "Specimen":
            return parseSpecimen(elementName, reader, elementIndex);
        case "SpecimenDefinition":
            return parseSpecimenDefinition(elementName, reader, elementIndex);
        case "StructureDefinition":
            return parseStructureDefinition(elementName, reader, elementIndex);
        case "StructureMap":
            return parseStructureMap(elementName, reader, elementIndex);
        case "Subscription":
            return parseSubscription(elementName, reader, elementIndex);
        case "Substance":
            return parseSubstance(elementName, reader, elementIndex);
        case "SubstanceNucleicAcid":
            return parseSubstanceNucleicAcid(elementName, reader, elementIndex);
        case "SubstancePolymer":
            return parseSubstancePolymer(elementName, reader, elementIndex);
        case "SubstanceProtein":
            return parseSubstanceProtein(elementName, reader, elementIndex);
        case "SubstanceReferenceInformation":
            return parseSubstanceReferenceInformation(elementName, reader, elementIndex);
        case "SubstanceSourceMaterial":
            return parseSubstanceSourceMaterial(elementName, reader, elementIndex);
        case "SubstanceSpecification":
            return parseSubstanceSpecification(elementName, reader, elementIndex);
        case "SupplyDelivery":
            return parseSupplyDelivery(elementName, reader, elementIndex);
        case "SupplyRequest":
            return parseSupplyRequest(elementName, reader, elementIndex);
        case "Task":
            return parseTask(elementName, reader, elementIndex);
        case "TerminologyCapabilities":
            return parseTerminologyCapabilities(elementName, reader, elementIndex);
        case "TestReport":
            return parseTestReport(elementName, reader, elementIndex);
        case "TestScript":
            return parseTestScript(elementName, reader, elementIndex);
        case "ValueSet":
            return parseValueSet(elementName, reader, elementIndex);
        case "VerificationResult":
            return parseVerificationResult(elementName, reader, elementIndex);
        case "VisionPrescription":
            return parseVisionPrescription(elementName, reader, elementIndex);
        }
        return null;
    }

    private Account parseAccount(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Account.Builder builder = Account.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, subjectElementIndex = 0, coverageElementIndex = 0, guarantorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((AccountStatus) parseString(AccountStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "servicePeriod":
                    builder.servicePeriod(parsePeriod("servicePeriod", reader, -1));
                    break;
                case "coverage":
                    builder.coverage(parseAccountCoverage("coverage", reader, coverageElementIndex++));
                    break;
                case "owner":
                    builder.owner(parseReference("owner", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "guarantor":
                    builder.guarantor(parseAccountGuarantor("guarantor", reader, guarantorElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Account.Coverage parseAccountCoverage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Account.Coverage.Builder builder = Account.Coverage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                case "priority":
                    builder.priority((PositiveInt) parseInteger(PositiveInt.builder(), "priority", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Account.Guarantor parseAccountGuarantor(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Account.Guarantor.Builder builder = Account.Guarantor.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "party":
                    builder.party(parseReference("party", reader, -1));
                    break;
                case "onHold":
                    builder.onHold(parseBoolean("onHold", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ActivityDefinition parseActivityDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ActivityDefinition.Builder builder = ActivityDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, libraryElementIndex = 0, participantElementIndex = 0, dosageElementIndex = 0, bodySiteElementIndex = 0, specimenRequirementElementIndex = 0, observationRequirementElementIndex = 0, observationResultRequirementElementIndex = 0, dynamicValueElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "library":
                    builder.library((Canonical) parseUri(Canonical.builder(), "library", reader, libraryElementIndex++));
                    break;
                case "kind":
                    builder.kind((ActivityDefinitionKind) parseString(ActivityDefinitionKind.builder(), "kind", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "intent":
                    builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", reader, -1));
                    break;
                case "priority":
                    builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", reader, -1));
                    break;
                case "doNotPerform":
                    builder.doNotPerform(parseBoolean("doNotPerform", reader, -1));
                    break;
                case "timingTiming":
                    builder.timing(parseTiming("timingTiming", reader, -1));
                    break;
                case "timingDateTime":
                    builder.timing(parseDateTime("timingDateTime", reader, -1));
                    break;
                case "timingAge":
                    builder.timing((Age) parseQuantity(Age.builder(), "timingAge", reader, -1));
                    break;
                case "timingPeriod":
                    builder.timing(parsePeriod("timingPeriod", reader, -1));
                    break;
                case "timingRange":
                    builder.timing(parseRange("timingRange", reader, -1));
                    break;
                case "timingDuration":
                    builder.timing((Duration) parseQuantity(Duration.builder(), "timingDuration", reader, -1));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "participant":
                    builder.participant(parseActivityDefinitionParticipant("participant", reader, participantElementIndex++));
                    break;
                case "productReference":
                    builder.product(parseReference("productReference", reader, -1));
                    break;
                case "productCodeableConcept":
                    builder.product(parseCodeableConcept("productCodeableConcept", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "dosage":
                    builder.dosage(parseDosage("dosage", reader, dosageElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, bodySiteElementIndex++));
                    break;
                case "specimenRequirement":
                    builder.specimenRequirement(parseReference("specimenRequirement", reader, specimenRequirementElementIndex++));
                    break;
                case "observationRequirement":
                    builder.observationRequirement(parseReference("observationRequirement", reader, observationRequirementElementIndex++));
                    break;
                case "observationResultRequirement":
                    builder.observationResultRequirement(parseReference("observationResultRequirement", reader, observationResultRequirementElementIndex++));
                    break;
                case "transform":
                    builder.transform((Canonical) parseUri(Canonical.builder(), "transform", reader, -1));
                    break;
                case "dynamicValue":
                    builder.dynamicValue(parseActivityDefinitionDynamicValue("dynamicValue", reader, dynamicValueElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ActivityDefinition.DynamicValue parseActivityDefinitionDynamicValue(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ActivityDefinition.DynamicValue.Builder builder = ActivityDefinition.DynamicValue.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseExpression("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ActivityDefinition.Participant parseActivityDefinitionParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ActivityDefinition.Participant.Builder builder = ActivityDefinition.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ActivityParticipantType) parseString(ActivityParticipantType.builder(), "type", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Address parseAddress(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Address.Builder builder = Address.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, lineElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "use":
                    builder.use((AddressUse) parseString(AddressUse.builder(), "use", reader, -1));
                    break;
                case "type":
                    builder.type((AddressType) parseString(AddressType.builder(), "type", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "line":
                    builder.line(parseString("line", reader, lineElementIndex++));
                    break;
                case "city":
                    builder.city(parseString("city", reader, -1));
                    break;
                case "district":
                    builder.district(parseString("district", reader, -1));
                    break;
                case "state":
                    builder.state(parseString("state", reader, -1));
                    break;
                case "postalCode":
                    builder.postalCode(parseString("postalCode", reader, -1));
                    break;
                case "country":
                    builder.country(parseString("country", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AdverseEvent parseAdverseEvent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AdverseEvent.Builder builder = AdverseEvent.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, categoryElementIndex = 0, resultingConditionElementIndex = 0, contributorElementIndex = 0, suspectEntityElementIndex = 0, subjectMedicalHistoryElementIndex = 0, referenceDocumentElementIndex = 0, studyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "actuality":
                    builder.actuality((AdverseEventActuality) parseString(AdverseEventActuality.builder(), "actuality", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "event":
                    builder.event(parseCodeableConcept("event", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "detected":
                    builder.detected(parseDateTime("detected", reader, -1));
                    break;
                case "recordedDate":
                    builder.recordedDate(parseDateTime("recordedDate", reader, -1));
                    break;
                case "resultingCondition":
                    builder.resultingCondition(parseReference("resultingCondition", reader, resultingConditionElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "seriousness":
                    builder.seriousness(parseCodeableConcept("seriousness", reader, -1));
                    break;
                case "severity":
                    builder.severity(parseCodeableConcept("severity", reader, -1));
                    break;
                case "outcome":
                    builder.outcome(parseCodeableConcept("outcome", reader, -1));
                    break;
                case "recorder":
                    builder.recorder(parseReference("recorder", reader, -1));
                    break;
                case "contributor":
                    builder.contributor(parseReference("contributor", reader, contributorElementIndex++));
                    break;
                case "suspectEntity":
                    builder.suspectEntity(parseAdverseEventSuspectEntity("suspectEntity", reader, suspectEntityElementIndex++));
                    break;
                case "subjectMedicalHistory":
                    builder.subjectMedicalHistory(parseReference("subjectMedicalHistory", reader, subjectMedicalHistoryElementIndex++));
                    break;
                case "referenceDocument":
                    builder.referenceDocument(parseReference("referenceDocument", reader, referenceDocumentElementIndex++));
                    break;
                case "study":
                    builder.study(parseReference("study", reader, studyElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AdverseEvent.SuspectEntity parseAdverseEventSuspectEntity(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AdverseEvent.SuspectEntity.Builder builder = AdverseEvent.SuspectEntity.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, causalityElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "instance":
                    builder.instance(parseReference("instance", reader, -1));
                    break;
                case "causality":
                    builder.causality(parseAdverseEventSuspectEntityCausality("causality", reader, causalityElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AdverseEvent.SuspectEntity.Causality parseAdverseEventSuspectEntityCausality(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AdverseEvent.SuspectEntity.Causality.Builder builder = AdverseEvent.SuspectEntity.Causality.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "assessment":
                    builder.assessment(parseCodeableConcept("assessment", reader, -1));
                    break;
                case "productRelatedness":
                    builder.productRelatedness(parseString("productRelatedness", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AllergyIntolerance parseAllergyIntolerance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AllergyIntolerance.Builder builder = AllergyIntolerance.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, noteElementIndex = 0, reactionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "clinicalStatus":
                    builder.clinicalStatus(parseCodeableConcept("clinicalStatus", reader, -1));
                    break;
                case "verificationStatus":
                    builder.verificationStatus(parseCodeableConcept("verificationStatus", reader, -1));
                    break;
                case "type":
                    builder.type((AllergyIntoleranceType) parseString(AllergyIntoleranceType.builder(), "type", reader, -1));
                    break;
                case "category":
                    builder.category((AllergyIntoleranceCategory) parseString(AllergyIntoleranceCategory.builder(), "category", reader, categoryElementIndex++));
                    break;
                case "criticality":
                    builder.criticality((AllergyIntoleranceCriticality) parseString(AllergyIntoleranceCriticality.builder(), "criticality", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "onsetDateTime":
                    builder.onset(parseDateTime("onsetDateTime", reader, -1));
                    break;
                case "onsetAge":
                    builder.onset((Age) parseQuantity(Age.builder(), "onsetAge", reader, -1));
                    break;
                case "onsetPeriod":
                    builder.onset(parsePeriod("onsetPeriod", reader, -1));
                    break;
                case "onsetRange":
                    builder.onset(parseRange("onsetRange", reader, -1));
                    break;
                case "onsetString":
                    builder.onset(parseString("onsetString", reader, -1));
                    break;
                case "recordedDate":
                    builder.recordedDate(parseDateTime("recordedDate", reader, -1));
                    break;
                case "recorder":
                    builder.recorder(parseReference("recorder", reader, -1));
                    break;
                case "asserter":
                    builder.asserter(parseReference("asserter", reader, -1));
                    break;
                case "lastOccurrence":
                    builder.lastOccurrence(parseDateTime("lastOccurrence", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "reaction":
                    builder.reaction(parseAllergyIntoleranceReaction("reaction", reader, reactionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AllergyIntolerance.Reaction parseAllergyIntoleranceReaction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AllergyIntolerance.Reaction.Builder builder = AllergyIntolerance.Reaction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, manifestationElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "substance":
                    builder.substance(parseCodeableConcept("substance", reader, -1));
                    break;
                case "manifestation":
                    builder.manifestation(parseCodeableConcept("manifestation", reader, manifestationElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "onset":
                    builder.onset(parseDateTime("onset", reader, -1));
                    break;
                case "severity":
                    builder.severity((AllergyIntoleranceSeverity) parseString(AllergyIntoleranceSeverity.builder(), "severity", reader, -1));
                    break;
                case "exposureRoute":
                    builder.exposureRoute(parseCodeableConcept("exposureRoute", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Annotation parseAnnotation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Annotation.Builder builder = Annotation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "authorReference":
                    builder.author(parseReference("authorReference", reader, -1));
                    break;
                case "authorString":
                    builder.author(parseString("authorString", reader, -1));
                    break;
                case "time":
                    builder.time(parseDateTime("time", reader, -1));
                    break;
                case "text":
                    builder.text((Markdown) parseString(Markdown.builder(), "text", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Appointment parseAppointment(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Appointment.Builder builder = Appointment.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, serviceCategoryElementIndex = 0, serviceTypeElementIndex = 0, specialtyElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, supportingInformationElementIndex = 0, slotElementIndex = 0, basedOnElementIndex = 0, participantElementIndex = 0, requestedPeriodElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((AppointmentStatus) parseString(AppointmentStatus.builder(), "status", reader, -1));
                    break;
                case "cancelationReason":
                    builder.cancelationReason(parseCodeableConcept("cancelationReason", reader, -1));
                    break;
                case "serviceCategory":
                    builder.serviceCategory(parseCodeableConcept("serviceCategory", reader, serviceCategoryElementIndex++));
                    break;
                case "serviceType":
                    builder.serviceType(parseCodeableConcept("serviceType", reader, serviceTypeElementIndex++));
                    break;
                case "specialty":
                    builder.specialty(parseCodeableConcept("specialty", reader, specialtyElementIndex++));
                    break;
                case "appointmentType":
                    builder.appointmentType(parseCodeableConcept("appointmentType", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "priority":
                    builder.priority((UnsignedInt) parseInteger(UnsignedInt.builder(), "priority", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "supportingInformation":
                    builder.supportingInformation(parseReference("supportingInformation", reader, supportingInformationElementIndex++));
                    break;
                case "start":
                    builder.start(parseInstant("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInstant("end", reader, -1));
                    break;
                case "minutesDuration":
                    builder.minutesDuration((PositiveInt) parseInteger(PositiveInt.builder(), "minutesDuration", reader, -1));
                    break;
                case "slot":
                    builder.slot(parseReference("slot", reader, slotElementIndex++));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "patientInstruction":
                    builder.patientInstruction(parseString("patientInstruction", reader, -1));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "participant":
                    builder.participant(parseAppointmentParticipant("participant", reader, participantElementIndex++));
                    break;
                case "requestedPeriod":
                    builder.requestedPeriod(parsePeriod("requestedPeriod", reader, requestedPeriodElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Appointment.Participant parseAppointmentParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Appointment.Participant.Builder builder = Appointment.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                case "required":
                    builder.required((ParticipantRequired) parseString(ParticipantRequired.builder(), "required", reader, -1));
                    break;
                case "status":
                    builder.status((ParticipationStatus) parseString(ParticipationStatus.builder(), "status", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AppointmentResponse parseAppointmentResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AppointmentResponse.Builder builder = AppointmentResponse.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, participantTypeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "appointment":
                    builder.appointment(parseReference("appointment", reader, -1));
                    break;
                case "start":
                    builder.start(parseInstant("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInstant("end", reader, -1));
                    break;
                case "participantType":
                    builder.participantType(parseCodeableConcept("participantType", reader, participantTypeElementIndex++));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                case "participantStatus":
                    builder.participantStatus((ParticipantStatus) parseString(ParticipantStatus.builder(), "participantStatus", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Attachment parseAttachment(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Attachment.Builder builder = Attachment.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "contentType":
                    builder.contentType((Code) parseString(Code.builder(), "contentType", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "data":
                    builder.data(parseBase64Binary("data", reader, -1));
                    break;
                case "url":
                    builder.url((Url) parseUri(Url.builder(), "url", reader, -1));
                    break;
                case "size":
                    builder.size((UnsignedInt) parseInteger(UnsignedInt.builder(), "size", reader, -1));
                    break;
                case "hash":
                    builder.hash(parseBase64Binary("hash", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "creation":
                    builder.creation(parseDateTime("creation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AuditEvent parseAuditEvent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AuditEvent.Builder builder = AuditEvent.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, subtypeElementIndex = 0, purposeOfEventElementIndex = 0, agentElementIndex = 0, entityElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, -1));
                    break;
                case "subtype":
                    builder.subtype(parseCoding("subtype", reader, subtypeElementIndex++));
                    break;
                case "action":
                    builder.action((AuditEventAction) parseString(AuditEventAction.builder(), "action", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "recorded":
                    builder.recorded(parseInstant("recorded", reader, -1));
                    break;
                case "outcome":
                    builder.outcome((AuditEventOutcome) parseString(AuditEventOutcome.builder(), "outcome", reader, -1));
                    break;
                case "outcomeDesc":
                    builder.outcomeDesc(parseString("outcomeDesc", reader, -1));
                    break;
                case "purposeOfEvent":
                    builder.purposeOfEvent(parseCodeableConcept("purposeOfEvent", reader, purposeOfEventElementIndex++));
                    break;
                case "agent":
                    builder.agent(parseAuditEventAgent("agent", reader, agentElementIndex++));
                    break;
                case "source":
                    builder.source(parseAuditEventSource("source", reader, -1));
                    break;
                case "entity":
                    builder.entity(parseAuditEventEntity("entity", reader, entityElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AuditEvent.Agent parseAuditEventAgent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AuditEvent.Agent.Builder builder = AuditEvent.Agent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, roleElementIndex = 0, policyElementIndex = 0, purposeOfUseElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, roleElementIndex++));
                    break;
                case "who":
                    builder.who(parseReference("who", reader, -1));
                    break;
                case "altId":
                    builder.altId(parseString("altId", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "requestor":
                    builder.requestor(parseBoolean("requestor", reader, -1));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "policy":
                    builder.policy(parseUri("policy", reader, policyElementIndex++));
                    break;
                case "media":
                    builder.media(parseCoding("media", reader, -1));
                    break;
                case "network":
                    builder.network(parseAuditEventAgentNetwork("network", reader, -1));
                    break;
                case "purposeOfUse":
                    builder.purposeOfUse(parseCodeableConcept("purposeOfUse", reader, purposeOfUseElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AuditEvent.Agent.Network parseAuditEventAgentNetwork(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AuditEvent.Agent.Network.Builder builder = AuditEvent.Agent.Network.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "address":
                    builder.address(parseString("address", reader, -1));
                    break;
                case "type":
                    builder.type((AuditEventAgentNetworkType) parseString(AuditEventAgentNetworkType.builder(), "type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AuditEvent.Entity parseAuditEventEntity(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AuditEvent.Entity.Builder builder = AuditEvent.Entity.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, securityLabelElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "what":
                    builder.what(parseReference("what", reader, -1));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, -1));
                    break;
                case "role":
                    builder.role(parseCoding("role", reader, -1));
                    break;
                case "lifecycle":
                    builder.lifecycle(parseCoding("lifecycle", reader, -1));
                    break;
                case "securityLabel":
                    builder.securityLabel(parseCoding("securityLabel", reader, securityLabelElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "query":
                    builder.query(parseBase64Binary("query", reader, -1));
                    break;
                case "detail":
                    builder.detail(parseAuditEventEntityDetail("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AuditEvent.Entity.Detail parseAuditEventEntityDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AuditEvent.Entity.Detail.Builder builder = AuditEvent.Entity.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseString("type", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private AuditEvent.Source parseAuditEventSource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        AuditEvent.Source.Builder builder = AuditEvent.Source.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "site":
                    builder.site(parseString("site", reader, -1));
                    break;
                case "observer":
                    builder.observer(parseReference("observer", reader, -1));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, typeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Base64Binary parseBase64Binary(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Base64Binary.Builder builder = Base64Binary.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Basic parseBasic(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Basic.Builder builder = Basic.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "created":
                    builder.created(parseDate("created", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Binary parseBinary(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Binary.Builder builder = Binary.builder();
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "contentType":
                    builder.contentType((Code) parseString(Code.builder(), "contentType", reader, -1));
                    break;
                case "securityContext":
                    builder.securityContext(parseReference("securityContext", reader, -1));
                    break;
                case "data":
                    builder.data(parseBase64Binary("data", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private BiologicallyDerivedProduct parseBiologicallyDerivedProduct(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        BiologicallyDerivedProduct.Builder builder = BiologicallyDerivedProduct.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, requestElementIndex = 0, parentElementIndex = 0, processingElementIndex = 0, storageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "productCategory":
                    builder.productCategory((BiologicallyDerivedProductCategory) parseString(BiologicallyDerivedProductCategory.builder(), "productCategory", reader, -1));
                    break;
                case "productCode":
                    builder.productCode(parseCodeableConcept("productCode", reader, -1));
                    break;
                case "status":
                    builder.status((BiologicallyDerivedProductStatus) parseString(BiologicallyDerivedProductStatus.builder(), "status", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, requestElementIndex++));
                    break;
                case "quantity":
                    builder.quantity(parseInteger("quantity", reader, -1));
                    break;
                case "parent":
                    builder.parent(parseReference("parent", reader, parentElementIndex++));
                    break;
                case "collection":
                    builder.collection(parseBiologicallyDerivedProductCollection("collection", reader, -1));
                    break;
                case "processing":
                    builder.processing(parseBiologicallyDerivedProductProcessing("processing", reader, processingElementIndex++));
                    break;
                case "manipulation":
                    builder.manipulation(parseBiologicallyDerivedProductManipulation("manipulation", reader, -1));
                    break;
                case "storage":
                    builder.storage(parseBiologicallyDerivedProductStorage("storage", reader, storageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private BiologicallyDerivedProduct.Collection parseBiologicallyDerivedProductCollection(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        BiologicallyDerivedProduct.Collection.Builder builder = BiologicallyDerivedProduct.Collection.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "collector":
                    builder.collector(parseReference("collector", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, -1));
                    break;
                case "collectedDateTime":
                    builder.collected(parseDateTime("collectedDateTime", reader, -1));
                    break;
                case "collectedPeriod":
                    builder.collected(parsePeriod("collectedPeriod", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private BiologicallyDerivedProduct.Manipulation parseBiologicallyDerivedProductManipulation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        BiologicallyDerivedProduct.Manipulation.Builder builder = BiologicallyDerivedProduct.Manipulation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "timeDateTime":
                    builder.time(parseDateTime("timeDateTime", reader, -1));
                    break;
                case "timePeriod":
                    builder.time(parsePeriod("timePeriod", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private BiologicallyDerivedProduct.Processing parseBiologicallyDerivedProductProcessing(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        BiologicallyDerivedProduct.Processing.Builder builder = BiologicallyDerivedProduct.Processing.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "procedure":
                    builder.procedure(parseCodeableConcept("procedure", reader, -1));
                    break;
                case "additive":
                    builder.additive(parseReference("additive", reader, -1));
                    break;
                case "timeDateTime":
                    builder.time(parseDateTime("timeDateTime", reader, -1));
                    break;
                case "timePeriod":
                    builder.time(parsePeriod("timePeriod", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private BiologicallyDerivedProduct.Storage parseBiologicallyDerivedProductStorage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        BiologicallyDerivedProduct.Storage.Builder builder = BiologicallyDerivedProduct.Storage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "temperature":
                    builder.temperature(parseDecimal("temperature", reader, -1));
                    break;
                case "scale":
                    builder.scale((BiologicallyDerivedProductStorageScale) parseString(BiologicallyDerivedProductStorageScale.builder(), "scale", reader, -1));
                    break;
                case "duration":
                    builder.duration(parsePeriod("duration", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private BodyStructure parseBodyStructure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        BodyStructure.Builder builder = BodyStructure.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, locationQualifierElementIndex = 0, imageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "morphology":
                    builder.morphology(parseCodeableConcept("morphology", reader, -1));
                    break;
                case "location":
                    builder.location(parseCodeableConcept("location", reader, -1));
                    break;
                case "locationQualifier":
                    builder.locationQualifier(parseCodeableConcept("locationQualifier", reader, locationQualifierElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "image":
                    builder.image(parseAttachment("image", reader, imageElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Boolean parseBoolean(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Boolean.Builder builder = Boolean.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Bundle parseBundle(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Bundle.Builder builder = Bundle.builder();
        int linkElementIndex = 0, entryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "type":
                    builder.type((BundleType) parseString(BundleType.builder(), "type", reader, -1));
                    break;
                case "timestamp":
                    builder.timestamp(parseInstant("timestamp", reader, -1));
                    break;
                case "total":
                    builder.total((UnsignedInt) parseInteger(UnsignedInt.builder(), "total", reader, -1));
                    break;
                case "link":
                    builder.link(parseBundleLink("link", reader, linkElementIndex++));
                    break;
                case "entry":
                    builder.entry(parseBundleEntry("entry", reader, entryElementIndex++));
                    break;
                case "signature":
                    builder.signature(parseSignature("signature", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Bundle.Entry parseBundleEntry(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Bundle.Entry.Builder builder = Bundle.Entry.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, linkElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "link":
                    builder.link(parseBundleLink("link", reader, linkElementIndex++));
                    break;
                case "fullUrl":
                    builder.fullUrl(parseUri("fullUrl", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseResource("resource", reader, -1));
                    break;
                case "search":
                    builder.search(parseBundleEntrySearch("search", reader, -1));
                    break;
                case "request":
                    builder.request(parseBundleEntryRequest("request", reader, -1));
                    break;
                case "response":
                    builder.response(parseBundleEntryResponse("response", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Bundle.Entry.Request parseBundleEntryRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Bundle.Entry.Request.Builder builder = Bundle.Entry.Request.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "method":
                    builder.method((HTTPVerb) parseString(HTTPVerb.builder(), "method", reader, -1));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "ifNoneMatch":
                    builder.ifNoneMatch(parseString("ifNoneMatch", reader, -1));
                    break;
                case "ifModifiedSince":
                    builder.ifModifiedSince(parseInstant("ifModifiedSince", reader, -1));
                    break;
                case "ifMatch":
                    builder.ifMatch(parseString("ifMatch", reader, -1));
                    break;
                case "ifNoneExist":
                    builder.ifNoneExist(parseString("ifNoneExist", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Bundle.Entry.Response parseBundleEntryResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Bundle.Entry.Response.Builder builder = Bundle.Entry.Response.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "status":
                    builder.status(parseString("status", reader, -1));
                    break;
                case "location":
                    builder.location(parseUri("location", reader, -1));
                    break;
                case "etag":
                    builder.etag(parseString("etag", reader, -1));
                    break;
                case "lastModified":
                    builder.lastModified(parseInstant("lastModified", reader, -1));
                    break;
                case "outcome":
                    builder.outcome(parseResource("outcome", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Bundle.Entry.Search parseBundleEntrySearch(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Bundle.Entry.Search.Builder builder = Bundle.Entry.Search.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "mode":
                    builder.mode((SearchEntryMode) parseString(SearchEntryMode.builder(), "mode", reader, -1));
                    break;
                case "score":
                    builder.score(parseDecimal("score", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Bundle.Link parseBundleLink(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Bundle.Link.Builder builder = Bundle.Link.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "relation":
                    builder.relation(parseString("relation", reader, -1));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement parseCapabilityStatement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Builder builder = CapabilityStatement.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, instantiatesElementIndex = 0, importsElementIndex = 0, formatElementIndex = 0, patchFormatElementIndex = 0, implementationGuideElementIndex = 0, restElementIndex = 0, messagingElementIndex = 0, documentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "kind":
                    builder.kind((CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", reader, -1));
                    break;
                case "instantiates":
                    builder.instantiates((Canonical) parseUri(Canonical.builder(), "instantiates", reader, instantiatesElementIndex++));
                    break;
                case "imports":
                    builder.imports((Canonical) parseUri(Canonical.builder(), "imports", reader, importsElementIndex++));
                    break;
                case "software":
                    builder.software(parseCapabilityStatementSoftware("software", reader, -1));
                    break;
                case "implementation":
                    builder.implementation(parseCapabilityStatementImplementation("implementation", reader, -1));
                    break;
                case "fhirVersion":
                    builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", reader, -1));
                    break;
                case "format":
                    builder.format((Code) parseString(Code.builder(), "format", reader, formatElementIndex++));
                    break;
                case "patchFormat":
                    builder.patchFormat((Code) parseString(Code.builder(), "patchFormat", reader, patchFormatElementIndex++));
                    break;
                case "implementationGuide":
                    builder.implementationGuide((Canonical) parseUri(Canonical.builder(), "implementationGuide", reader, implementationGuideElementIndex++));
                    break;
                case "rest":
                    builder.rest(parseCapabilityStatementRest("rest", reader, restElementIndex++));
                    break;
                case "messaging":
                    builder.messaging(parseCapabilityStatementMessaging("messaging", reader, messagingElementIndex++));
                    break;
                case "document":
                    builder.document(parseCapabilityStatementDocument("document", reader, documentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Document parseCapabilityStatementDocument(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Document.Builder builder = CapabilityStatement.Document.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "mode":
                    builder.mode((DocumentMode) parseString(DocumentMode.builder(), "mode", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Implementation parseCapabilityStatementImplementation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Implementation.Builder builder = CapabilityStatement.Implementation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "url":
                    builder.url((Url) parseUri(Url.builder(), "url", reader, -1));
                    break;
                case "custodian":
                    builder.custodian(parseReference("custodian", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Messaging parseCapabilityStatementMessaging(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Messaging.Builder builder = CapabilityStatement.Messaging.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, endpointElementIndex = 0, supportedMessageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "endpoint":
                    builder.endpoint(parseCapabilityStatementMessagingEndpoint("endpoint", reader, endpointElementIndex++));
                    break;
                case "reliableCache":
                    builder.reliableCache((UnsignedInt) parseInteger(UnsignedInt.builder(), "reliableCache", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                case "supportedMessage":
                    builder.supportedMessage(parseCapabilityStatementMessagingSupportedMessage("supportedMessage", reader, supportedMessageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Messaging.Endpoint parseCapabilityStatementMessagingEndpoint(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Messaging.Endpoint.Builder builder = CapabilityStatement.Messaging.Endpoint.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "protocol":
                    builder.protocol(parseCoding("protocol", reader, -1));
                    break;
                case "address":
                    builder.address((Url) parseUri(Url.builder(), "address", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Messaging.SupportedMessage parseCapabilityStatementMessagingSupportedMessage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Messaging.SupportedMessage.Builder builder = CapabilityStatement.Messaging.SupportedMessage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "mode":
                    builder.mode((EventCapabilityMode) parseString(EventCapabilityMode.builder(), "mode", reader, -1));
                    break;
                case "definition":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definition", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest parseCapabilityStatementRest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Builder builder = CapabilityStatement.Rest.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, resourceElementIndex = 0, interactionElementIndex = 0, searchParamElementIndex = 0, operationElementIndex = 0, compartmentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "mode":
                    builder.mode((RestfulCapabilityMode) parseString(RestfulCapabilityMode.builder(), "mode", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                case "security":
                    builder.security(parseCapabilityStatementRestSecurity("security", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseCapabilityStatementRestResource("resource", reader, resourceElementIndex++));
                    break;
                case "interaction":
                    builder.interaction(parseCapabilityStatementRestInteraction("interaction", reader, interactionElementIndex++));
                    break;
                case "searchParam":
                    builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", reader, searchParamElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseCapabilityStatementRestResourceOperation("operation", reader, operationElementIndex++));
                    break;
                case "compartment":
                    builder.compartment((Canonical) parseUri(Canonical.builder(), "compartment", reader, compartmentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest.Interaction parseCapabilityStatementRestInteraction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Interaction.Builder builder = CapabilityStatement.Rest.Interaction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((SystemRestfulInteraction) parseString(SystemRestfulInteraction.builder(), "code", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest.Resource parseCapabilityStatementRestResource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Resource.Builder builder = CapabilityStatement.Rest.Resource.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, supportedProfileElementIndex = 0, interactionElementIndex = 0, referencePolicyElementIndex = 0, searchIncludeElementIndex = 0, searchRevIncludeElementIndex = 0, searchParamElementIndex = 0, operationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ResourceType) parseString(ResourceType.builder(), "type", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                case "supportedProfile":
                    builder.supportedProfile((Canonical) parseUri(Canonical.builder(), "supportedProfile", reader, supportedProfileElementIndex++));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                case "interaction":
                    builder.interaction(parseCapabilityStatementRestResourceInteraction("interaction", reader, interactionElementIndex++));
                    break;
                case "versioning":
                    builder.versioning((ResourceVersionPolicy) parseString(ResourceVersionPolicy.builder(), "versioning", reader, -1));
                    break;
                case "readHistory":
                    builder.readHistory(parseBoolean("readHistory", reader, -1));
                    break;
                case "updateCreate":
                    builder.updateCreate(parseBoolean("updateCreate", reader, -1));
                    break;
                case "conditionalCreate":
                    builder.conditionalCreate(parseBoolean("conditionalCreate", reader, -1));
                    break;
                case "conditionalRead":
                    builder.conditionalRead((ConditionalReadStatus) parseString(ConditionalReadStatus.builder(), "conditionalRead", reader, -1));
                    break;
                case "conditionalUpdate":
                    builder.conditionalUpdate(parseBoolean("conditionalUpdate", reader, -1));
                    break;
                case "conditionalDelete":
                    builder.conditionalDelete((ConditionalDeleteStatus) parseString(ConditionalDeleteStatus.builder(), "conditionalDelete", reader, -1));
                    break;
                case "referencePolicy":
                    builder.referencePolicy((ReferenceHandlingPolicy) parseString(ReferenceHandlingPolicy.builder(), "referencePolicy", reader, referencePolicyElementIndex++));
                    break;
                case "searchInclude":
                    builder.searchInclude(parseString("searchInclude", reader, searchIncludeElementIndex++));
                    break;
                case "searchRevInclude":
                    builder.searchRevInclude(parseString("searchRevInclude", reader, searchRevIncludeElementIndex++));
                    break;
                case "searchParam":
                    builder.searchParam(parseCapabilityStatementRestResourceSearchParam("searchParam", reader, searchParamElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseCapabilityStatementRestResourceOperation("operation", reader, operationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest.Resource.Interaction parseCapabilityStatementRestResourceInteraction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Resource.Interaction.Builder builder = CapabilityStatement.Rest.Resource.Interaction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((TypeRestfulInteraction) parseString(TypeRestfulInteraction.builder(), "code", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest.Resource.Operation parseCapabilityStatementRestResourceOperation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Resource.Operation.Builder builder = CapabilityStatement.Rest.Resource.Operation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "definition":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definition", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest.Resource.SearchParam parseCapabilityStatementRestResourceSearchParam(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Resource.SearchParam.Builder builder = CapabilityStatement.Rest.Resource.SearchParam.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "definition":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definition", reader, -1));
                    break;
                case "type":
                    builder.type((SearchParamType) parseString(SearchParamType.builder(), "type", reader, -1));
                    break;
                case "documentation":
                    builder.documentation((Markdown) parseString(Markdown.builder(), "documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Rest.Security parseCapabilityStatementRestSecurity(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Rest.Security.Builder builder = CapabilityStatement.Rest.Security.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, serviceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "cors":
                    builder.cors(parseBoolean("cors", reader, -1));
                    break;
                case "service":
                    builder.service(parseCodeableConcept("service", reader, serviceElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CapabilityStatement.Software parseCapabilityStatementSoftware(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CapabilityStatement.Software.Builder builder = CapabilityStatement.Software.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "releaseDate":
                    builder.releaseDate(parseDateTime("releaseDate", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CarePlan parseCarePlan(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CarePlan.Builder builder = CarePlan.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, replacesElementIndex = 0, partOfElementIndex = 0, categoryElementIndex = 0, contributorElementIndex = 0, careTeamElementIndex = 0, addressesElementIndex = 0, supportingInfoElementIndex = 0, goalElementIndex = 0, activityElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "replaces":
                    builder.replaces(parseReference("replaces", reader, replacesElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((CarePlanStatus) parseString(CarePlanStatus.builder(), "status", reader, -1));
                    break;
                case "intent":
                    builder.intent((CarePlanIntent) parseString(CarePlanIntent.builder(), "intent", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "contributor":
                    builder.contributor(parseReference("contributor", reader, contributorElementIndex++));
                    break;
                case "careTeam":
                    builder.careTeam(parseReference("careTeam", reader, careTeamElementIndex++));
                    break;
                case "addresses":
                    builder.addresses(parseReference("addresses", reader, addressesElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseReference("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "goal":
                    builder.goal(parseReference("goal", reader, goalElementIndex++));
                    break;
                case "activity":
                    builder.activity(parseCarePlanActivity("activity", reader, activityElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CarePlan.Activity parseCarePlanActivity(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CarePlan.Activity.Builder builder = CarePlan.Activity.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, outcomeCodeableConceptElementIndex = 0, outcomeReferenceElementIndex = 0, progressElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "outcomeCodeableConcept":
                    builder.outcomeCodeableConcept(parseCodeableConcept("outcomeCodeableConcept", reader, outcomeCodeableConceptElementIndex++));
                    break;
                case "outcomeReference":
                    builder.outcomeReference(parseReference("outcomeReference", reader, outcomeReferenceElementIndex++));
                    break;
                case "progress":
                    builder.progress(parseAnnotation("progress", reader, progressElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, -1));
                    break;
                case "detail":
                    builder.detail(parseCarePlanActivityDetail("detail", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CarePlan.Activity.Detail parseCarePlanActivityDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CarePlan.Activity.Detail.Builder builder = CarePlan.Activity.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, goalElementIndex = 0, performerElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "kind":
                    builder.kind((CarePlanActivityKind) parseString(CarePlanActivityKind.builder(), "kind", reader, -1));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "goal":
                    builder.goal(parseReference("goal", reader, goalElementIndex++));
                    break;
                case "status":
                    builder.status((CarePlanActivityStatus) parseString(CarePlanActivityStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "doNotPerform":
                    builder.doNotPerform(parseBoolean("doNotPerform", reader, -1));
                    break;
                case "scheduledTiming":
                    builder.scheduled(parseTiming("scheduledTiming", reader, -1));
                    break;
                case "scheduledPeriod":
                    builder.scheduled(parsePeriod("scheduledPeriod", reader, -1));
                    break;
                case "scheduledString":
                    builder.scheduled(parseString("scheduledString", reader, -1));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, performerElementIndex++));
                    break;
                case "productCodeableConcept":
                    builder.product(parseCodeableConcept("productCodeableConcept", reader, -1));
                    break;
                case "productReference":
                    builder.product(parseReference("productReference", reader, -1));
                    break;
                case "dailyAmount":
                    builder.dailyAmount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dailyAmount", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CareTeam parseCareTeam(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CareTeam.Builder builder = CareTeam.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, participantElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, managingOrganizationElementIndex = 0, telecomElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((CareTeamStatus) parseString(CareTeamStatus.builder(), "status", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "participant":
                    builder.participant(parseCareTeamParticipant("participant", reader, participantElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "managingOrganization":
                    builder.managingOrganization(parseReference("managingOrganization", reader, managingOrganizationElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CareTeam.Participant parseCareTeamParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CareTeam.Participant.Builder builder = CareTeam.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, roleElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, roleElementIndex++));
                    break;
                case "member":
                    builder.member(parseReference("member", reader, -1));
                    break;
                case "onBehalfOf":
                    builder.onBehalfOf(parseReference("onBehalfOf", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CatalogEntry parseCatalogEntry(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CatalogEntry.Builder builder = CatalogEntry.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, additionalIdentifierElementIndex = 0, classificationElementIndex = 0, additionalCharacteristicElementIndex = 0, additionalClassificationElementIndex = 0, relatedEntryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "orderable":
                    builder.orderable(parseBoolean("orderable", reader, -1));
                    break;
                case "referencedItem":
                    builder.referencedItem(parseReference("referencedItem", reader, -1));
                    break;
                case "additionalIdentifier":
                    builder.additionalIdentifier(parseIdentifier("additionalIdentifier", reader, additionalIdentifierElementIndex++));
                    break;
                case "classification":
                    builder.classification(parseCodeableConcept("classification", reader, classificationElementIndex++));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "validityPeriod":
                    builder.validityPeriod(parsePeriod("validityPeriod", reader, -1));
                    break;
                case "validTo":
                    builder.validTo(parseDateTime("validTo", reader, -1));
                    break;
                case "lastUpdated":
                    builder.lastUpdated(parseDateTime("lastUpdated", reader, -1));
                    break;
                case "additionalCharacteristic":
                    builder.additionalCharacteristic(parseCodeableConcept("additionalCharacteristic", reader, additionalCharacteristicElementIndex++));
                    break;
                case "additionalClassification":
                    builder.additionalClassification(parseCodeableConcept("additionalClassification", reader, additionalClassificationElementIndex++));
                    break;
                case "relatedEntry":
                    builder.relatedEntry(parseCatalogEntryRelatedEntry("relatedEntry", reader, relatedEntryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CatalogEntry.RelatedEntry parseCatalogEntryRelatedEntry(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CatalogEntry.RelatedEntry.Builder builder = CatalogEntry.RelatedEntry.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "relationtype":
                    builder.relationtype((CatalogEntryRelationType) parseString(CatalogEntryRelationType.builder(), "relationtype", reader, -1));
                    break;
                case "item":
                    builder.item(parseReference("item", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ChargeItem parseChargeItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ChargeItem.Builder builder = ChargeItem.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, definitionUriElementIndex = 0, definitionCanonicalElementIndex = 0, partOfElementIndex = 0, performerElementIndex = 0, bodysiteElementIndex = 0, reasonElementIndex = 0, serviceElementIndex = 0, accountElementIndex = 0, noteElementIndex = 0, supportingInformationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "definitionUri":
                    builder.definitionUri(parseUri("definitionUri", reader, definitionUriElementIndex++));
                    break;
                case "definitionCanonical":
                    builder.definitionCanonical((Canonical) parseUri(Canonical.builder(), "definitionCanonical", reader, definitionCanonicalElementIndex++));
                    break;
                case "status":
                    builder.status((ChargeItemStatus) parseString(ChargeItemStatus.builder(), "status", reader, -1));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "context":
                    builder.context(parseReference("context", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "occurrenceTiming":
                    builder.occurrence(parseTiming("occurrenceTiming", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseChargeItemPerformer("performer", reader, performerElementIndex++));
                    break;
                case "performingOrganization":
                    builder.performingOrganization(parseReference("performingOrganization", reader, -1));
                    break;
                case "requestingOrganization":
                    builder.requestingOrganization(parseReference("requestingOrganization", reader, -1));
                    break;
                case "costCenter":
                    builder.costCenter(parseReference("costCenter", reader, -1));
                    break;
                case "quantity":
                    builder.quantity(parseQuantity("quantity", reader, -1));
                    break;
                case "bodysite":
                    builder.bodysite(parseCodeableConcept("bodysite", reader, bodysiteElementIndex++));
                    break;
                case "factorOverride":
                    builder.factorOverride(parseDecimal("factorOverride", reader, -1));
                    break;
                case "priceOverride":
                    builder.priceOverride(parseMoney("priceOverride", reader, -1));
                    break;
                case "overrideReason":
                    builder.overrideReason(parseString("overrideReason", reader, -1));
                    break;
                case "enterer":
                    builder.enterer(parseReference("enterer", reader, -1));
                    break;
                case "enteredDate":
                    builder.enteredDate(parseDateTime("enteredDate", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, reasonElementIndex++));
                    break;
                case "service":
                    builder.service(parseReference("service", reader, serviceElementIndex++));
                    break;
                case "productReference":
                    builder.product(parseReference("productReference", reader, -1));
                    break;
                case "productCodeableConcept":
                    builder.product(parseCodeableConcept("productCodeableConcept", reader, -1));
                    break;
                case "account":
                    builder.account(parseReference("account", reader, accountElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "supportingInformation":
                    builder.supportingInformation(parseReference("supportingInformation", reader, supportingInformationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ChargeItem.Performer parseChargeItemPerformer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ChargeItem.Performer.Builder builder = ChargeItem.Performer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "function":
                    builder.function(parseCodeableConcept("function", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ChargeItemDefinition parseChargeItemDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ChargeItemDefinition.Builder builder = ChargeItemDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, derivedFromUriElementIndex = 0, partOfElementIndex = 0, replacesElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, instanceElementIndex = 0, applicabilityElementIndex = 0, propertyGroupElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "derivedFromUri":
                    builder.derivedFromUri(parseUri("derivedFromUri", reader, derivedFromUriElementIndex++));
                    break;
                case "partOf":
                    builder.partOf((Canonical) parseUri(Canonical.builder(), "partOf", reader, partOfElementIndex++));
                    break;
                case "replaces":
                    builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", reader, replacesElementIndex++));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "instance":
                    builder.instance(parseReference("instance", reader, instanceElementIndex++));
                    break;
                case "applicability":
                    builder.applicability(parseChargeItemDefinitionApplicability("applicability", reader, applicabilityElementIndex++));
                    break;
                case "propertyGroup":
                    builder.propertyGroup(parseChargeItemDefinitionPropertyGroup("propertyGroup", reader, propertyGroupElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ChargeItemDefinition.Applicability parseChargeItemDefinitionApplicability(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ChargeItemDefinition.Applicability.Builder builder = ChargeItemDefinition.Applicability.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "language":
                    builder.language(parseString("language", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ChargeItemDefinition.PropertyGroup parseChargeItemDefinitionPropertyGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ChargeItemDefinition.PropertyGroup.Builder builder = ChargeItemDefinition.PropertyGroup.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, applicabilityElementIndex = 0, priceComponentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "applicability":
                    builder.applicability(parseChargeItemDefinitionApplicability("applicability", reader, applicabilityElementIndex++));
                    break;
                case "priceComponent":
                    builder.priceComponent(parseChargeItemDefinitionPropertyGroupPriceComponent("priceComponent", reader, priceComponentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ChargeItemDefinition.PropertyGroup.PriceComponent parseChargeItemDefinitionPropertyGroupPriceComponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ChargeItemDefinition.PropertyGroup.PriceComponent.Builder builder = ChargeItemDefinition.PropertyGroup.PriceComponent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ChargeItemDefinitionPriceComponentType) parseString(ChargeItemDefinitionPriceComponentType.builder(), "type", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim parseClaim(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Builder builder = Claim.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, relatedElementIndex = 0, careTeamElementIndex = 0, supportingInfoElementIndex = 0, diagnosisElementIndex = 0, procedureElementIndex = 0, insuranceElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ClaimStatus) parseString(ClaimStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subType":
                    builder.subType(parseCodeableConcept("subType", reader, -1));
                    break;
                case "use":
                    builder.use((Use) parseString(Use.builder(), "use", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "billablePeriod":
                    builder.billablePeriod(parsePeriod("billablePeriod", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "enterer":
                    builder.enterer(parseReference("enterer", reader, -1));
                    break;
                case "insurer":
                    builder.insurer(parseReference("insurer", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "priority":
                    builder.priority(parseCodeableConcept("priority", reader, -1));
                    break;
                case "fundsReserve":
                    builder.fundsReserve(parseCodeableConcept("fundsReserve", reader, -1));
                    break;
                case "related":
                    builder.related(parseClaimRelated("related", reader, relatedElementIndex++));
                    break;
                case "prescription":
                    builder.prescription(parseReference("prescription", reader, -1));
                    break;
                case "originalPrescription":
                    builder.originalPrescription(parseReference("originalPrescription", reader, -1));
                    break;
                case "payee":
                    builder.payee(parseClaimPayee("payee", reader, -1));
                    break;
                case "referral":
                    builder.referral(parseReference("referral", reader, -1));
                    break;
                case "facility":
                    builder.facility(parseReference("facility", reader, -1));
                    break;
                case "careTeam":
                    builder.careTeam(parseClaimCareTeam("careTeam", reader, careTeamElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseClaimSupportingInfo("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "diagnosis":
                    builder.diagnosis(parseClaimDiagnosis("diagnosis", reader, diagnosisElementIndex++));
                    break;
                case "procedure":
                    builder.procedure(parseClaimProcedure("procedure", reader, procedureElementIndex++));
                    break;
                case "insurance":
                    builder.insurance(parseClaimInsurance("insurance", reader, insuranceElementIndex++));
                    break;
                case "accident":
                    builder.accident(parseClaimAccident("accident", reader, -1));
                    break;
                case "item":
                    builder.item(parseClaimItem("item", reader, itemElementIndex++));
                    break;
                case "total":
                    builder.total(parseMoney("total", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Accident parseClaimAccident(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Accident.Builder builder = Claim.Accident.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "date":
                    builder.date(parseDate("date", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "locationAddress":
                    builder.location(parseAddress("locationAddress", reader, -1));
                    break;
                case "locationReference":
                    builder.location(parseReference("locationReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.CareTeam parseClaimCareTeam(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.CareTeam.Builder builder = Claim.CareTeam.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "responsible":
                    builder.responsible(parseBoolean("responsible", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "qualification":
                    builder.qualification(parseCodeableConcept("qualification", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Diagnosis parseClaimDiagnosis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Diagnosis.Builder builder = Claim.Diagnosis.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "diagnosisCodeableConcept":
                    builder.diagnosis(parseCodeableConcept("diagnosisCodeableConcept", reader, -1));
                    break;
                case "diagnosisReference":
                    builder.diagnosis(parseReference("diagnosisReference", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "onAdmission":
                    builder.onAdmission(parseCodeableConcept("onAdmission", reader, -1));
                    break;
                case "packageCode":
                    builder.packageCode(parseCodeableConcept("packageCode", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Insurance parseClaimInsurance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Insurance.Builder builder = Claim.Insurance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, preAuthRefElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "focal":
                    builder.focal(parseBoolean("focal", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                case "businessArrangement":
                    builder.businessArrangement(parseString("businessArrangement", reader, -1));
                    break;
                case "preAuthRef":
                    builder.preAuthRef(parseString("preAuthRef", reader, preAuthRefElementIndex++));
                    break;
                case "claimResponse":
                    builder.claimResponse(parseReference("claimResponse", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Item parseClaimItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Item.Builder builder = Claim.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, careTeamSequenceElementIndex = 0, diagnosisSequenceElementIndex = 0, procedureSequenceElementIndex = 0, informationSequenceElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, udiElementIndex = 0, subSiteElementIndex = 0, encounterElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "careTeamSequence":
                    builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", reader, careTeamSequenceElementIndex++));
                    break;
                case "diagnosisSequence":
                    builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", reader, diagnosisSequenceElementIndex++));
                    break;
                case "procedureSequence":
                    builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", reader, procedureSequenceElementIndex++));
                    break;
                case "informationSequence":
                    builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", reader, informationSequenceElementIndex++));
                    break;
                case "revenue":
                    builder.revenue(parseCodeableConcept("revenue", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "servicedDate":
                    builder.serviced(parseDate("servicedDate", reader, -1));
                    break;
                case "servicedPeriod":
                    builder.serviced(parsePeriod("servicedPeriod", reader, -1));
                    break;
                case "locationCodeableConcept":
                    builder.location(parseCodeableConcept("locationCodeableConcept", reader, -1));
                    break;
                case "locationAddress":
                    builder.location(parseAddress("locationAddress", reader, -1));
                    break;
                case "locationReference":
                    builder.location(parseReference("locationReference", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "subSite":
                    builder.subSite(parseCodeableConcept("subSite", reader, subSiteElementIndex++));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, encounterElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseClaimItemDetail("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Item.Detail parseClaimItemDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Item.Detail.Builder builder = Claim.Item.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, udiElementIndex = 0, subDetailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "revenue":
                    builder.revenue(parseCodeableConcept("revenue", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                case "subDetail":
                    builder.subDetail(parseClaimItemDetailSubDetail("subDetail", reader, subDetailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Item.Detail.SubDetail parseClaimItemDetailSubDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Item.Detail.SubDetail.Builder builder = Claim.Item.Detail.SubDetail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, udiElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "revenue":
                    builder.revenue(parseCodeableConcept("revenue", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Payee parseClaimPayee(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Payee.Builder builder = Claim.Payee.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "party":
                    builder.party(parseReference("party", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Procedure parseClaimProcedure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Procedure.Builder builder = Claim.Procedure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0, udiElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "procedureCodeableConcept":
                    builder.procedure(parseCodeableConcept("procedureCodeableConcept", reader, -1));
                    break;
                case "procedureReference":
                    builder.procedure(parseReference("procedureReference", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.Related parseClaimRelated(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.Related.Builder builder = Claim.Related.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "claim":
                    builder.claim(parseReference("claim", reader, -1));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseIdentifier("reference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Claim.SupportingInfo parseClaimSupportingInfo(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Claim.SupportingInfo.Builder builder = Claim.SupportingInfo.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "timingDate":
                    builder.timing(parseDate("timingDate", reader, -1));
                    break;
                case "timingPeriod":
                    builder.timing(parsePeriod("timingPeriod", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse parseClaimResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Builder builder = ClaimResponse.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, itemElementIndex = 0, addItemElementIndex = 0, adjudicationElementIndex = 0, totalElementIndex = 0, processNoteElementIndex = 0, communicationRequestElementIndex = 0, insuranceElementIndex = 0, errorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ClaimResponseStatus) parseString(ClaimResponseStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subType":
                    builder.subType(parseCodeableConcept("subType", reader, -1));
                    break;
                case "use":
                    builder.use((Use) parseString(Use.builder(), "use", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "insurer":
                    builder.insurer(parseReference("insurer", reader, -1));
                    break;
                case "requestor":
                    builder.requestor(parseReference("requestor", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "outcome":
                    builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", reader, -1));
                    break;
                case "disposition":
                    builder.disposition(parseString("disposition", reader, -1));
                    break;
                case "preAuthRef":
                    builder.preAuthRef(parseString("preAuthRef", reader, -1));
                    break;
                case "preAuthPeriod":
                    builder.preAuthPeriod(parsePeriod("preAuthPeriod", reader, -1));
                    break;
                case "payeeType":
                    builder.payeeType(parseCodeableConcept("payeeType", reader, -1));
                    break;
                case "item":
                    builder.item(parseClaimResponseItem("item", reader, itemElementIndex++));
                    break;
                case "addItem":
                    builder.addItem(parseClaimResponseAddItem("addItem", reader, addItemElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "total":
                    builder.total(parseClaimResponseTotal("total", reader, totalElementIndex++));
                    break;
                case "payment":
                    builder.payment(parseClaimResponsePayment("payment", reader, -1));
                    break;
                case "fundsReserve":
                    builder.fundsReserve(parseCodeableConcept("fundsReserve", reader, -1));
                    break;
                case "formCode":
                    builder.formCode(parseCodeableConcept("formCode", reader, -1));
                    break;
                case "form":
                    builder.form(parseAttachment("form", reader, -1));
                    break;
                case "processNote":
                    builder.processNote(parseClaimResponseProcessNote("processNote", reader, processNoteElementIndex++));
                    break;
                case "communicationRequest":
                    builder.communicationRequest(parseReference("communicationRequest", reader, communicationRequestElementIndex++));
                    break;
                case "insurance":
                    builder.insurance(parseClaimResponseInsurance("insurance", reader, insuranceElementIndex++));
                    break;
                case "error":
                    builder.error(parseClaimResponseError("error", reader, errorElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.AddItem parseClaimResponseAddItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.AddItem.Builder builder = ClaimResponse.AddItem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, itemSequenceElementIndex = 0, detailSequenceElementIndex = 0, subdetailSequenceElementIndex = 0, providerElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, subSiteElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemSequence":
                    builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", reader, itemSequenceElementIndex++));
                    break;
                case "detailSequence":
                    builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", reader, detailSequenceElementIndex++));
                    break;
                case "subdetailSequence":
                    builder.subdetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subdetailSequence", reader, subdetailSequenceElementIndex++));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, providerElementIndex++));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "servicedDate":
                    builder.serviced(parseDate("servicedDate", reader, -1));
                    break;
                case "servicedPeriod":
                    builder.serviced(parsePeriod("servicedPeriod", reader, -1));
                    break;
                case "locationCodeableConcept":
                    builder.location(parseCodeableConcept("locationCodeableConcept", reader, -1));
                    break;
                case "locationAddress":
                    builder.location(parseAddress("locationAddress", reader, -1));
                    break;
                case "locationReference":
                    builder.location(parseReference("locationReference", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "subSite":
                    builder.subSite(parseCodeableConcept("subSite", reader, subSiteElementIndex++));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseClaimResponseAddItemDetail("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.AddItem.Detail parseClaimResponseAddItemDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.AddItem.Detail.Builder builder = ClaimResponse.AddItem.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, subDetailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "subDetail":
                    builder.subDetail(parseClaimResponseAddItemDetailSubDetail("subDetail", reader, subDetailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.AddItem.Detail.SubDetail parseClaimResponseAddItemDetailSubDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.AddItem.Detail.SubDetail.Builder builder = ClaimResponse.AddItem.Detail.SubDetail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Error parseClaimResponseError(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Error.Builder builder = ClaimResponse.Error.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemSequence":
                    builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", reader, -1));
                    break;
                case "detailSequence":
                    builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", reader, -1));
                    break;
                case "subDetailSequence":
                    builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Insurance parseClaimResponseInsurance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Insurance.Builder builder = ClaimResponse.Insurance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "focal":
                    builder.focal(parseBoolean("focal", reader, -1));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                case "businessArrangement":
                    builder.businessArrangement(parseString("businessArrangement", reader, -1));
                    break;
                case "claimResponse":
                    builder.claimResponse(parseReference("claimResponse", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Item parseClaimResponseItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Item.Builder builder = ClaimResponse.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemSequence":
                    builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseClaimResponseItemDetail("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Item.Adjudication parseClaimResponseItemAdjudication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Item.Adjudication.Builder builder = ClaimResponse.Item.Adjudication.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                case "value":
                    builder.value(parseDecimal("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Item.Detail parseClaimResponseItemDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Item.Detail.Builder builder = ClaimResponse.Item.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, subDetailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "detailSequence":
                    builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "subDetail":
                    builder.subDetail(parseClaimResponseItemDetailSubDetail("subDetail", reader, subDetailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Item.Detail.SubDetail parseClaimResponseItemDetailSubDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Item.Detail.SubDetail.Builder builder = ClaimResponse.Item.Detail.SubDetail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subDetailSequence":
                    builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseClaimResponseItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Payment parseClaimResponsePayment(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Payment.Builder builder = ClaimResponse.Payment.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "adjustment":
                    builder.adjustment(parseMoney("adjustment", reader, -1));
                    break;
                case "adjustmentReason":
                    builder.adjustmentReason(parseCodeableConcept("adjustmentReason", reader, -1));
                    break;
                case "date":
                    builder.date(parseDate("date", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.ProcessNote parseClaimResponseProcessNote(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.ProcessNote.Builder builder = ClaimResponse.ProcessNote.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "number":
                    builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", reader, -1));
                    break;
                case "type":
                    builder.type((NoteType) parseString(NoteType.builder(), "type", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "language":
                    builder.language(parseCodeableConcept("language", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClaimResponse.Total parseClaimResponseTotal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClaimResponse.Total.Builder builder = ClaimResponse.Total.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClinicalImpression parseClinicalImpression(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClinicalImpression.Builder builder = ClinicalImpression.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, problemElementIndex = 0, investigationElementIndex = 0, protocolElementIndex = 0, findingElementIndex = 0, prognosisCodeableConceptElementIndex = 0, prognosisReferenceElementIndex = 0, supportingInfoElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ClinicalImpressionStatus) parseString(ClinicalImpressionStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "effectiveDateTime":
                    builder.effective(parseDateTime("effectiveDateTime", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effective(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "assessor":
                    builder.assessor(parseReference("assessor", reader, -1));
                    break;
                case "previous":
                    builder.previous(parseReference("previous", reader, -1));
                    break;
                case "problem":
                    builder.problem(parseReference("problem", reader, problemElementIndex++));
                    break;
                case "investigation":
                    builder.investigation(parseClinicalImpressionInvestigation("investigation", reader, investigationElementIndex++));
                    break;
                case "protocol":
                    builder.protocol(parseUri("protocol", reader, protocolElementIndex++));
                    break;
                case "summary":
                    builder.summary(parseString("summary", reader, -1));
                    break;
                case "finding":
                    builder.finding(parseClinicalImpressionFinding("finding", reader, findingElementIndex++));
                    break;
                case "prognosisCodeableConcept":
                    builder.prognosisCodeableConcept(parseCodeableConcept("prognosisCodeableConcept", reader, prognosisCodeableConceptElementIndex++));
                    break;
                case "prognosisReference":
                    builder.prognosisReference(parseReference("prognosisReference", reader, prognosisReferenceElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseReference("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClinicalImpression.Finding parseClinicalImpressionFinding(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClinicalImpression.Finding.Builder builder = ClinicalImpression.Finding.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemCodeableConcept":
                    builder.itemCodeableConcept(parseCodeableConcept("itemCodeableConcept", reader, -1));
                    break;
                case "itemReference":
                    builder.itemReference(parseReference("itemReference", reader, -1));
                    break;
                case "basis":
                    builder.basis(parseString("basis", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ClinicalImpression.Investigation parseClinicalImpressionInvestigation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ClinicalImpression.Investigation.Builder builder = ClinicalImpression.Investigation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "item":
                    builder.item(parseReference("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeSystem parseCodeSystem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeSystem.Builder builder = CodeSystem.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, filterElementIndex = 0, propertyElementIndex = 0, conceptElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "caseSensitive":
                    builder.caseSensitive(parseBoolean("caseSensitive", reader, -1));
                    break;
                case "valueSet":
                    builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", reader, -1));
                    break;
                case "hierarchyMeaning":
                    builder.hierarchyMeaning((CodeSystemHierarchyMeaning) parseString(CodeSystemHierarchyMeaning.builder(), "hierarchyMeaning", reader, -1));
                    break;
                case "compositional":
                    builder.compositional(parseBoolean("compositional", reader, -1));
                    break;
                case "versionNeeded":
                    builder.versionNeeded(parseBoolean("versionNeeded", reader, -1));
                    break;
                case "content":
                    builder.content((CodeSystemContentMode) parseString(CodeSystemContentMode.builder(), "content", reader, -1));
                    break;
                case "supplements":
                    builder.supplements((Canonical) parseUri(Canonical.builder(), "supplements", reader, -1));
                    break;
                case "count":
                    builder.count((UnsignedInt) parseInteger(UnsignedInt.builder(), "count", reader, -1));
                    break;
                case "filter":
                    builder.filter(parseCodeSystemFilter("filter", reader, filterElementIndex++));
                    break;
                case "property":
                    builder.property(parseCodeSystemProperty("property", reader, propertyElementIndex++));
                    break;
                case "concept":
                    builder.concept(parseCodeSystemConcept("concept", reader, conceptElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeSystem.Concept parseCodeSystemConcept(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeSystem.Concept.Builder builder = CodeSystem.Concept.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, designationElementIndex = 0, propertyElementIndex = 0, conceptElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "definition":
                    builder.definition(parseString("definition", reader, -1));
                    break;
                case "designation":
                    builder.designation(parseCodeSystemConceptDesignation("designation", reader, designationElementIndex++));
                    break;
                case "property":
                    builder.property(parseCodeSystemConceptProperty("property", reader, propertyElementIndex++));
                    break;
                case "concept":
                    builder.concept(parseCodeSystemConcept("concept", reader, conceptElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeSystem.Concept.Designation parseCodeSystemConceptDesignation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeSystem.Concept.Designation.Builder builder = CodeSystem.Concept.Designation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "use":
                    builder.use(parseCoding("use", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeSystem.Concept.Property parseCodeSystemConceptProperty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeSystem.Concept.Property.Builder builder = CodeSystem.Concept.Property.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeSystem.Filter parseCodeSystemFilter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeSystem.Filter.Builder builder = CodeSystem.Filter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, operatorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "operator":
                    builder.operator((FilterOperator) parseString(FilterOperator.builder(), "operator", reader, operatorElementIndex++));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeSystem.Property parseCodeSystemProperty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeSystem.Property.Builder builder = CodeSystem.Property.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "uri":
                    builder.uri(parseUri("uri", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "type":
                    builder.type((PropertyType) parseString(PropertyType.builder(), "type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CodeableConcept parseCodeableConcept(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CodeableConcept.Builder builder = CodeableConcept.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, codingElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "coding":
                    builder.coding(parseCoding("coding", reader, codingElementIndex++));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Coding parseCoding(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Coding.Builder builder = Coding.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "system":
                    builder.system(parseUri("system", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "userSelected":
                    builder.userSelected(parseBoolean("userSelected", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Communication parseCommunication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Communication.Builder builder = Communication.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, inResponseToElementIndex = 0, categoryElementIndex = 0, mediumElementIndex = 0, aboutElementIndex = 0, recipientElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, payloadElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "inResponseTo":
                    builder.inResponseTo(parseReference("inResponseTo", reader, inResponseToElementIndex++));
                    break;
                case "status":
                    builder.status((CommunicationStatus) parseString(CommunicationStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "priority":
                    builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", reader, -1));
                    break;
                case "medium":
                    builder.medium(parseCodeableConcept("medium", reader, mediumElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, -1));
                    break;
                case "about":
                    builder.about(parseReference("about", reader, aboutElementIndex++));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "sent":
                    builder.sent(parseDateTime("sent", reader, -1));
                    break;
                case "received":
                    builder.received(parseDateTime("received", reader, -1));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, recipientElementIndex++));
                    break;
                case "sender":
                    builder.sender(parseReference("sender", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "payload":
                    builder.payload(parseCommunicationPayload("payload", reader, payloadElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Communication.Payload parseCommunicationPayload(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Communication.Payload.Builder builder = Communication.Payload.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "contentString":
                    builder.content(parseString("contentString", reader, -1));
                    break;
                case "contentAttachment":
                    builder.content(parseAttachment("contentAttachment", reader, -1));
                    break;
                case "contentReference":
                    builder.content(parseReference("contentReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CommunicationRequest parseCommunicationRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CommunicationRequest.Builder builder = CommunicationRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, replacesElementIndex = 0, categoryElementIndex = 0, mediumElementIndex = 0, aboutElementIndex = 0, payloadElementIndex = 0, recipientElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "replaces":
                    builder.replaces(parseReference("replaces", reader, replacesElementIndex++));
                    break;
                case "groupIdentifier":
                    builder.groupIdentifier(parseIdentifier("groupIdentifier", reader, -1));
                    break;
                case "status":
                    builder.status((CommunicationRequestStatus) parseString(CommunicationRequestStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "priority":
                    builder.priority((CommunicationPriority) parseString(CommunicationPriority.builder(), "priority", reader, -1));
                    break;
                case "doNotPerform":
                    builder.doNotPerform(parseBoolean("doNotPerform", reader, -1));
                    break;
                case "medium":
                    builder.medium(parseCodeableConcept("medium", reader, mediumElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "about":
                    builder.about(parseReference("about", reader, aboutElementIndex++));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "payload":
                    builder.payload(parseCommunicationRequestPayload("payload", reader, payloadElementIndex++));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, -1));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, recipientElementIndex++));
                    break;
                case "sender":
                    builder.sender(parseReference("sender", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CommunicationRequest.Payload parseCommunicationRequestPayload(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CommunicationRequest.Payload.Builder builder = CommunicationRequest.Payload.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "contentString":
                    builder.content(parseString("contentString", reader, -1));
                    break;
                case "contentAttachment":
                    builder.content(parseAttachment("contentAttachment", reader, -1));
                    break;
                case "contentReference":
                    builder.content(parseReference("contentReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CompartmentDefinition parseCompartmentDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CompartmentDefinition.Builder builder = CompartmentDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, resourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "code":
                    builder.code((CompartmentType) parseString(CompartmentType.builder(), "code", reader, -1));
                    break;
                case "search":
                    builder.search(parseBoolean("search", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseCompartmentDefinitionResource("resource", reader, resourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CompartmentDefinition.Resource parseCompartmentDefinitionResource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CompartmentDefinition.Resource.Builder builder = CompartmentDefinition.Resource.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, paramElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((ResourceType) parseString(ResourceType.builder(), "code", reader, -1));
                    break;
                case "param":
                    builder.param(parseString("param", reader, paramElementIndex++));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Composition parseComposition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Composition.Builder builder = Composition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, categoryElementIndex = 0, authorElementIndex = 0, attesterElementIndex = 0, relatesToElementIndex = 0, eventElementIndex = 0, sectionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "status":
                    builder.status((CompositionStatus) parseString(CompositionStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, authorElementIndex++));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "confidentiality":
                    builder.confidentiality((DocumentConfidentiality) parseString(DocumentConfidentiality.builder(), "confidentiality", reader, -1));
                    break;
                case "attester":
                    builder.attester(parseCompositionAttester("attester", reader, attesterElementIndex++));
                    break;
                case "custodian":
                    builder.custodian(parseReference("custodian", reader, -1));
                    break;
                case "relatesTo":
                    builder.relatesTo(parseCompositionRelatesTo("relatesTo", reader, relatesToElementIndex++));
                    break;
                case "event":
                    builder.event(parseCompositionEvent("event", reader, eventElementIndex++));
                    break;
                case "section":
                    builder.section(parseCompositionSection("section", reader, sectionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Composition.Attester parseCompositionAttester(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Composition.Attester.Builder builder = Composition.Attester.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "mode":
                    builder.mode((CompositionAttestationMode) parseString(CompositionAttestationMode.builder(), "mode", reader, -1));
                    break;
                case "time":
                    builder.time(parseDateTime("time", reader, -1));
                    break;
                case "party":
                    builder.party(parseReference("party", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Composition.Event parseCompositionEvent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Composition.Event.Builder builder = Composition.Event.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "detail":
                    builder.detail(parseReference("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Composition.RelatesTo parseCompositionRelatesTo(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Composition.RelatesTo.Builder builder = Composition.RelatesTo.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", reader, -1));
                    break;
                case "targetIdentifier":
                    builder.target(parseIdentifier("targetIdentifier", reader, -1));
                    break;
                case "targetReference":
                    builder.target(parseReference("targetReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Composition.Section parseCompositionSection(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Composition.Section.Builder builder = Composition.Section.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, authorElementIndex = 0, entryElementIndex = 0, sectionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, authorElementIndex++));
                    break;
                case "focus":
                    builder.focus(parseReference("focus", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "mode":
                    builder.mode((SectionMode) parseString(SectionMode.builder(), "mode", reader, -1));
                    break;
                case "orderedBy":
                    builder.orderedBy(parseCodeableConcept("orderedBy", reader, -1));
                    break;
                case "entry":
                    builder.entry(parseReference("entry", reader, entryElementIndex++));
                    break;
                case "emptyReason":
                    builder.emptyReason(parseCodeableConcept("emptyReason", reader, -1));
                    break;
                case "section":
                    builder.section(parseCompositionSection("section", reader, sectionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ConceptMap parseConceptMap(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ConceptMap.Builder builder = ConceptMap.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, groupElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "sourceUri":
                    builder.source(parseUri("sourceUri", reader, -1));
                    break;
                case "sourceCanonical":
                    builder.source((Canonical) parseUri(Canonical.builder(), "sourceCanonical", reader, -1));
                    break;
                case "targetUri":
                    builder.target(parseUri("targetUri", reader, -1));
                    break;
                case "targetCanonical":
                    builder.target((Canonical) parseUri(Canonical.builder(), "targetCanonical", reader, -1));
                    break;
                case "group":
                    builder.group(parseConceptMapGroup("group", reader, groupElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ConceptMap.Group parseConceptMapGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ConceptMap.Group.Builder builder = ConceptMap.Group.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, elementElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "source":
                    builder.source(parseUri("source", reader, -1));
                    break;
                case "sourceVersion":
                    builder.sourceVersion(parseString("sourceVersion", reader, -1));
                    break;
                case "target":
                    builder.target(parseUri("target", reader, -1));
                    break;
                case "targetVersion":
                    builder.targetVersion(parseString("targetVersion", reader, -1));
                    break;
                case "element":
                    builder.element(parseConceptMapGroupElement("element", reader, elementElementIndex++));
                    break;
                case "unmapped":
                    builder.unmapped(parseConceptMapGroupUnmapped("unmapped", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ConceptMap.Group.Element parseConceptMapGroupElement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ConceptMap.Group.Element.Builder builder = ConceptMap.Group.Element.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "target":
                    builder.target(parseConceptMapGroupElementTarget("target", reader, targetElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ConceptMap.Group.Element.Target parseConceptMapGroupElementTarget(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ConceptMap.Group.Element.Target.Builder builder = ConceptMap.Group.Element.Target.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, dependsOnElementIndex = 0, productElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "equivalence":
                    builder.equivalence((ConceptMapEquivalence) parseString(ConceptMapEquivalence.builder(), "equivalence", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "dependsOn":
                    builder.dependsOn(parseConceptMapGroupElementTargetDependsOn("dependsOn", reader, dependsOnElementIndex++));
                    break;
                case "product":
                    builder.product(parseConceptMapGroupElementTargetDependsOn("product", reader, productElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ConceptMap.Group.Element.Target.DependsOn parseConceptMapGroupElementTargetDependsOn(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ConceptMap.Group.Element.Target.DependsOn.Builder builder = ConceptMap.Group.Element.Target.DependsOn.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "property":
                    builder.property(parseUri("property", reader, -1));
                    break;
                case "system":
                    builder.system((Canonical) parseUri(Canonical.builder(), "system", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ConceptMap.Group.Unmapped parseConceptMapGroupUnmapped(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ConceptMap.Group.Unmapped.Builder builder = ConceptMap.Group.Unmapped.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "mode":
                    builder.mode((ConceptMapGroupUnmappedMode) parseString(ConceptMapGroupUnmappedMode.builder(), "mode", reader, -1));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "url":
                    builder.url((Canonical) parseUri(Canonical.builder(), "url", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Condition parseCondition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Condition.Builder builder = Condition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, bodySiteElementIndex = 0, stageElementIndex = 0, evidenceElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "clinicalStatus":
                    builder.clinicalStatus(parseCodeableConcept("clinicalStatus", reader, -1));
                    break;
                case "verificationStatus":
                    builder.verificationStatus(parseCodeableConcept("verificationStatus", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "severity":
                    builder.severity(parseCodeableConcept("severity", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, bodySiteElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "onsetDateTime":
                    builder.onset(parseDateTime("onsetDateTime", reader, -1));
                    break;
                case "onsetAge":
                    builder.onset((Age) parseQuantity(Age.builder(), "onsetAge", reader, -1));
                    break;
                case "onsetPeriod":
                    builder.onset(parsePeriod("onsetPeriod", reader, -1));
                    break;
                case "onsetRange":
                    builder.onset(parseRange("onsetRange", reader, -1));
                    break;
                case "onsetString":
                    builder.onset(parseString("onsetString", reader, -1));
                    break;
                case "abatementDateTime":
                    builder.abatement(parseDateTime("abatementDateTime", reader, -1));
                    break;
                case "abatementAge":
                    builder.abatement((Age) parseQuantity(Age.builder(), "abatementAge", reader, -1));
                    break;
                case "abatementPeriod":
                    builder.abatement(parsePeriod("abatementPeriod", reader, -1));
                    break;
                case "abatementRange":
                    builder.abatement(parseRange("abatementRange", reader, -1));
                    break;
                case "abatementString":
                    builder.abatement(parseString("abatementString", reader, -1));
                    break;
                case "recordedDate":
                    builder.recordedDate(parseDateTime("recordedDate", reader, -1));
                    break;
                case "recorder":
                    builder.recorder(parseReference("recorder", reader, -1));
                    break;
                case "asserter":
                    builder.asserter(parseReference("asserter", reader, -1));
                    break;
                case "stage":
                    builder.stage(parseConditionStage("stage", reader, stageElementIndex++));
                    break;
                case "evidence":
                    builder.evidence(parseConditionEvidence("evidence", reader, evidenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Condition.Evidence parseConditionEvidence(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Condition.Evidence.Builder builder = Condition.Evidence.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseReference("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Condition.Stage parseConditionStage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Condition.Stage.Builder builder = Condition.Stage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, assessmentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "summary":
                    builder.summary(parseCodeableConcept("summary", reader, -1));
                    break;
                case "assessment":
                    builder.assessment(parseReference("assessment", reader, assessmentElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Consent parseConsent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Consent.Builder builder = Consent.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, performerElementIndex = 0, organizationElementIndex = 0, policyElementIndex = 0, verificationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ConsentState) parseString(ConsentState.builder(), "status", reader, -1));
                    break;
                case "scope":
                    builder.scope(parseCodeableConcept("scope", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "dateTime":
                    builder.dateTime(parseDateTime("dateTime", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, performerElementIndex++));
                    break;
                case "organization":
                    builder.organization(parseReference("organization", reader, organizationElementIndex++));
                    break;
                case "sourceAttachment":
                    builder.source(parseAttachment("sourceAttachment", reader, -1));
                    break;
                case "sourceReference":
                    builder.source(parseReference("sourceReference", reader, -1));
                    break;
                case "policy":
                    builder.policy(parseConsentPolicy("policy", reader, policyElementIndex++));
                    break;
                case "policyRule":
                    builder.policyRule(parseCodeableConcept("policyRule", reader, -1));
                    break;
                case "verification":
                    builder.verification(parseConsentVerification("verification", reader, verificationElementIndex++));
                    break;
                case "provision":
                    builder.provision(parseConsentProvision("provision", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Consent.Policy parseConsentPolicy(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Consent.Policy.Builder builder = Consent.Policy.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "authority":
                    builder.authority(parseUri("authority", reader, -1));
                    break;
                case "uri":
                    builder.uri(parseUri("uri", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Consent.Provision parseConsentProvision(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Consent.Provision.Builder builder = Consent.Provision.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actorElementIndex = 0, actionElementIndex = 0, securityLabelElementIndex = 0, purposeElementIndex = 0, classElementIndex = 0, codeElementIndex = 0, dataElementIndex = 0, provisionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ConsentProvisionType) parseString(ConsentProvisionType.builder(), "type", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseConsentProvisionActor("actor", reader, actorElementIndex++));
                    break;
                case "action":
                    builder.action(parseCodeableConcept("action", reader, actionElementIndex++));
                    break;
                case "securityLabel":
                    builder.securityLabel(parseCoding("securityLabel", reader, securityLabelElementIndex++));
                    break;
                case "purpose":
                    builder.purpose(parseCoding("purpose", reader, purposeElementIndex++));
                    break;
                case "class":
                    builder.clazz(parseCoding("class", reader, classElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "dataPeriod":
                    builder.dataPeriod(parsePeriod("dataPeriod", reader, -1));
                    break;
                case "data":
                    builder.data(parseConsentProvisionData("data", reader, dataElementIndex++));
                    break;
                case "provision":
                    builder.provision(parseConsentProvision("provision", reader, provisionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Consent.Provision.Actor parseConsentProvisionActor(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Consent.Provision.Actor.Builder builder = Consent.Provision.Actor.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Consent.Provision.Data parseConsentProvisionData(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Consent.Provision.Data.Builder builder = Consent.Provision.Data.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "meaning":
                    builder.meaning((ConsentDataMeaning) parseString(ConsentDataMeaning.builder(), "meaning", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Consent.Verification parseConsentVerification(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Consent.Verification.Builder builder = Consent.Verification.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "verified":
                    builder.verified(parseBoolean("verified", reader, -1));
                    break;
                case "verifiedWith":
                    builder.verifiedWith(parseReference("verifiedWith", reader, -1));
                    break;
                case "verificationDate":
                    builder.verificationDate(parseDateTime("verificationDate", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ContactDetail parseContactDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ContactDetail.Builder builder = ContactDetail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, telecomElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ContactPoint parseContactPoint(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ContactPoint.Builder builder = ContactPoint.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "system":
                    builder.system((ContactPointSystem) parseString(ContactPointSystem.builder(), "system", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                case "use":
                    builder.use((ContactPointUse) parseString(ContactPointUse.builder(), "use", reader, -1));
                    break;
                case "rank":
                    builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract parseContract(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Builder builder = Contract.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, subjectElementIndex = 0, authorityElementIndex = 0, domainElementIndex = 0, siteElementIndex = 0, aliasElementIndex = 0, subTypeElementIndex = 0, termElementIndex = 0, supportingInfoElementIndex = 0, relevantHistoryElementIndex = 0, signerElementIndex = 0, friendlyElementIndex = 0, legalElementIndex = 0, ruleElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "status":
                    builder.status((ContractStatus) parseString(ContractStatus.builder(), "status", reader, -1));
                    break;
                case "legalState":
                    builder.legalState(parseCodeableConcept("legalState", reader, -1));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical(parseReference("instantiatesCanonical", reader, -1));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, -1));
                    break;
                case "contentDerivative":
                    builder.contentDerivative(parseCodeableConcept("contentDerivative", reader, -1));
                    break;
                case "issued":
                    builder.issued(parseDateTime("issued", reader, -1));
                    break;
                case "applies":
                    builder.applies(parsePeriod("applies", reader, -1));
                    break;
                case "expirationType":
                    builder.expirationType(parseCodeableConcept("expirationType", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "authority":
                    builder.authority(parseReference("authority", reader, authorityElementIndex++));
                    break;
                case "domain":
                    builder.domain(parseReference("domain", reader, domainElementIndex++));
                    break;
                case "site":
                    builder.site(parseReference("site", reader, siteElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "alias":
                    builder.alias(parseString("alias", reader, aliasElementIndex++));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "scope":
                    builder.scope(parseCodeableConcept("scope", reader, -1));
                    break;
                case "topicCodeableConcept":
                    builder.topic(parseCodeableConcept("topicCodeableConcept", reader, -1));
                    break;
                case "topicReference":
                    builder.topic(parseReference("topicReference", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subType":
                    builder.subType(parseCodeableConcept("subType", reader, subTypeElementIndex++));
                    break;
                case "contentDefinition":
                    builder.contentDefinition(parseContractContentDefinition("contentDefinition", reader, -1));
                    break;
                case "term":
                    builder.term(parseContractTerm("term", reader, termElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseReference("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "relevantHistory":
                    builder.relevantHistory(parseReference("relevantHistory", reader, relevantHistoryElementIndex++));
                    break;
                case "signer":
                    builder.signer(parseContractSigner("signer", reader, signerElementIndex++));
                    break;
                case "friendly":
                    builder.friendly(parseContractFriendly("friendly", reader, friendlyElementIndex++));
                    break;
                case "legal":
                    builder.legal(parseContractLegal("legal", reader, legalElementIndex++));
                    break;
                case "rule":
                    builder.rule(parseContractRule("rule", reader, ruleElementIndex++));
                    break;
                case "legallyBindingAttachment":
                    builder.legallyBinding(parseAttachment("legallyBindingAttachment", reader, -1));
                    break;
                case "legallyBindingReference":
                    builder.legallyBinding(parseReference("legallyBindingReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.ContentDefinition parseContractContentDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.ContentDefinition.Builder builder = Contract.ContentDefinition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subType":
                    builder.subType(parseCodeableConcept("subType", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseReference("publisher", reader, -1));
                    break;
                case "publicationDate":
                    builder.publicationDate(parseDateTime("publicationDate", reader, -1));
                    break;
                case "publicationStatus":
                    builder.publicationStatus((ContractPublicationStatus) parseString(ContractPublicationStatus.builder(), "publicationStatus", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Friendly parseContractFriendly(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Friendly.Builder builder = Contract.Friendly.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "contentAttachment":
                    builder.content(parseAttachment("contentAttachment", reader, -1));
                    break;
                case "contentReference":
                    builder.content(parseReference("contentReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Legal parseContractLegal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Legal.Builder builder = Contract.Legal.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "contentAttachment":
                    builder.content(parseAttachment("contentAttachment", reader, -1));
                    break;
                case "contentReference":
                    builder.content(parseReference("contentReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Rule parseContractRule(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Rule.Builder builder = Contract.Rule.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "contentAttachment":
                    builder.content(parseAttachment("contentAttachment", reader, -1));
                    break;
                case "contentReference":
                    builder.content(parseReference("contentReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Signer parseContractSigner(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Signer.Builder builder = Contract.Signer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, signatureElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, -1));
                    break;
                case "party":
                    builder.party(parseReference("party", reader, -1));
                    break;
                case "signature":
                    builder.signature(parseSignature("signature", reader, signatureElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term parseContractTerm(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Builder builder = Contract.Term.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, securityLabelElementIndex = 0, assetElementIndex = 0, actionElementIndex = 0, groupElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "issued":
                    builder.issued(parseDateTime("issued", reader, -1));
                    break;
                case "applies":
                    builder.applies(parsePeriod("applies", reader, -1));
                    break;
                case "topicCodeableConcept":
                    builder.topic(parseCodeableConcept("topicCodeableConcept", reader, -1));
                    break;
                case "topicReference":
                    builder.topic(parseReference("topicReference", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subType":
                    builder.subType(parseCodeableConcept("subType", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "securityLabel":
                    builder.securityLabel(parseContractTermSecurityLabel("securityLabel", reader, securityLabelElementIndex++));
                    break;
                case "offer":
                    builder.offer(parseContractTermOffer("offer", reader, -1));
                    break;
                case "asset":
                    builder.asset(parseContractTermAsset("asset", reader, assetElementIndex++));
                    break;
                case "action":
                    builder.action(parseContractTermAction("action", reader, actionElementIndex++));
                    break;
                case "group":
                    builder.group(parseContractTerm("group", reader, groupElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Action parseContractTermAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Action.Builder builder = Contract.Term.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, subjectElementIndex = 0, linkIdElementIndex = 0, contextLinkIdElementIndex = 0, requesterElementIndex = 0, requesterLinkIdElementIndex = 0, performerTypeElementIndex = 0, performerLinkIdElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, reasonElementIndex = 0, reasonLinkIdElementIndex = 0, noteElementIndex = 0, securityLabelNumberElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "doNotPerform":
                    builder.doNotPerform(parseBoolean("doNotPerform", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseContractTermActionSubject("subject", reader, subjectElementIndex++));
                    break;
                case "intent":
                    builder.intent(parseCodeableConcept("intent", reader, -1));
                    break;
                case "linkId":
                    builder.linkId(parseString("linkId", reader, linkIdElementIndex++));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "context":
                    builder.context(parseReference("context", reader, -1));
                    break;
                case "contextLinkId":
                    builder.contextLinkId(parseString("contextLinkId", reader, contextLinkIdElementIndex++));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "occurrenceTiming":
                    builder.occurrence(parseTiming("occurrenceTiming", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, requesterElementIndex++));
                    break;
                case "requesterLinkId":
                    builder.requesterLinkId(parseString("requesterLinkId", reader, requesterLinkIdElementIndex++));
                    break;
                case "performerType":
                    builder.performerType(parseCodeableConcept("performerType", reader, performerTypeElementIndex++));
                    break;
                case "performerRole":
                    builder.performerRole(parseCodeableConcept("performerRole", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                case "performerLinkId":
                    builder.performerLinkId(parseString("performerLinkId", reader, performerLinkIdElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "reason":
                    builder.reason(parseString("reason", reader, reasonElementIndex++));
                    break;
                case "reasonLinkId":
                    builder.reasonLinkId(parseString("reasonLinkId", reader, reasonLinkIdElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "securityLabelNumber":
                    builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", reader, securityLabelNumberElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Action.Subject parseContractTermActionSubject(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Action.Subject.Builder builder = Contract.Term.Action.Subject.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, referenceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, referenceElementIndex++));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Asset parseContractTermAsset(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Asset.Builder builder = Contract.Term.Asset.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0, typeReferenceElementIndex = 0, subtypeElementIndex = 0, contextElementIndex = 0, periodTypeElementIndex = 0, periodElementIndex = 0, usePeriodElementIndex = 0, linkIdElementIndex = 0, answerElementIndex = 0, securityLabelNumberElementIndex = 0, valuedItemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "scope":
                    builder.scope(parseCodeableConcept("scope", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "typeReference":
                    builder.typeReference(parseReference("typeReference", reader, typeReferenceElementIndex++));
                    break;
                case "subtype":
                    builder.subtype(parseCodeableConcept("subtype", reader, subtypeElementIndex++));
                    break;
                case "relationship":
                    builder.relationship(parseCoding("relationship", reader, -1));
                    break;
                case "context":
                    builder.context(parseContractTermAssetContext("context", reader, contextElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseString("condition", reader, -1));
                    break;
                case "periodType":
                    builder.periodType(parseCodeableConcept("periodType", reader, periodTypeElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, periodElementIndex++));
                    break;
                case "usePeriod":
                    builder.usePeriod(parsePeriod("usePeriod", reader, usePeriodElementIndex++));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "linkId":
                    builder.linkId(parseString("linkId", reader, linkIdElementIndex++));
                    break;
                case "answer":
                    builder.answer(parseContractTermOfferAnswer("answer", reader, answerElementIndex++));
                    break;
                case "securityLabelNumber":
                    builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", reader, securityLabelNumberElementIndex++));
                    break;
                case "valuedItem":
                    builder.valuedItem(parseContractTermAssetValuedItem("valuedItem", reader, valuedItemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Asset.Context parseContractTermAssetContext(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Asset.Context.Builder builder = Contract.Term.Asset.Context.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Asset.ValuedItem parseContractTermAssetValuedItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Asset.ValuedItem.Builder builder = Contract.Term.Asset.ValuedItem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, linkIdElementIndex = 0, securityLabelNumberElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "entityCodeableConcept":
                    builder.entity(parseCodeableConcept("entityCodeableConcept", reader, -1));
                    break;
                case "entityReference":
                    builder.entity(parseReference("entityReference", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "effectiveTime":
                    builder.effectiveTime(parseDateTime("effectiveTime", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "points":
                    builder.points(parseDecimal("points", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "payment":
                    builder.payment(parseString("payment", reader, -1));
                    break;
                case "paymentDate":
                    builder.paymentDate(parseDateTime("paymentDate", reader, -1));
                    break;
                case "responsible":
                    builder.responsible(parseReference("responsible", reader, -1));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, -1));
                    break;
                case "linkId":
                    builder.linkId(parseString("linkId", reader, linkIdElementIndex++));
                    break;
                case "securityLabelNumber":
                    builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", reader, securityLabelNumberElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Offer parseContractTermOffer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Offer.Builder builder = Contract.Term.Offer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, partyElementIndex = 0, decisionModeElementIndex = 0, answerElementIndex = 0, linkIdElementIndex = 0, securityLabelNumberElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "party":
                    builder.party(parseContractTermOfferParty("party", reader, partyElementIndex++));
                    break;
                case "topic":
                    builder.topic(parseReference("topic", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "decision":
                    builder.decision(parseCodeableConcept("decision", reader, -1));
                    break;
                case "decisionMode":
                    builder.decisionMode(parseCodeableConcept("decisionMode", reader, decisionModeElementIndex++));
                    break;
                case "answer":
                    builder.answer(parseContractTermOfferAnswer("answer", reader, answerElementIndex++));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "linkId":
                    builder.linkId(parseString("linkId", reader, linkIdElementIndex++));
                    break;
                case "securityLabelNumber":
                    builder.securityLabelNumber((UnsignedInt) parseInteger(UnsignedInt.builder(), "securityLabelNumber", reader, securityLabelNumberElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Offer.Answer parseContractTermOfferAnswer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Offer.Answer.Builder builder = Contract.Term.Offer.Answer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.Offer.Party parseContractTermOfferParty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.Offer.Party.Builder builder = Contract.Term.Offer.Party.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, referenceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, referenceElementIndex++));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contract.Term.SecurityLabel parseContractTermSecurityLabel(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contract.Term.SecurityLabel.Builder builder = Contract.Term.SecurityLabel.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, numberElementIndex = 0, categoryElementIndex = 0, controlElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "number":
                    builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", reader, numberElementIndex++));
                    break;
                case "classification":
                    builder.classification(parseCoding("classification", reader, -1));
                    break;
                case "category":
                    builder.category(parseCoding("category", reader, categoryElementIndex++));
                    break;
                case "control":
                    builder.control(parseCoding("control", reader, controlElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Contributor parseContributor(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Contributor.Builder builder = Contributor.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, contactElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "type":
                    builder.type((ContributorType) parseString(ContributorType.builder(), "type", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Coverage parseCoverage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Coverage.Builder builder = Coverage.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, payorElementIndex = 0, classElementIndex = 0, costToBeneficiaryElementIndex = 0, contractElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((CoverageStatus) parseString(CoverageStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "policyHolder":
                    builder.policyHolder(parseReference("policyHolder", reader, -1));
                    break;
                case "subscriber":
                    builder.subscriber(parseReference("subscriber", reader, -1));
                    break;
                case "subscriberId":
                    builder.subscriberId(parseString("subscriberId", reader, -1));
                    break;
                case "beneficiary":
                    builder.beneficiary(parseReference("beneficiary", reader, -1));
                    break;
                case "dependent":
                    builder.dependent(parseString("dependent", reader, -1));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "payor":
                    builder.payor(parseReference("payor", reader, payorElementIndex++));
                    break;
                case "class":
                    builder.clazz(parseCoverageClass("class", reader, classElementIndex++));
                    break;
                case "order":
                    builder.order((PositiveInt) parseInteger(PositiveInt.builder(), "order", reader, -1));
                    break;
                case "network":
                    builder.network(parseString("network", reader, -1));
                    break;
                case "costToBeneficiary":
                    builder.costToBeneficiary(parseCoverageCostToBeneficiary("costToBeneficiary", reader, costToBeneficiaryElementIndex++));
                    break;
                case "subrogation":
                    builder.subrogation(parseBoolean("subrogation", reader, -1));
                    break;
                case "contract":
                    builder.contract(parseReference("contract", reader, contractElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Coverage.Class parseCoverageClass(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Coverage.Class.Builder builder = Coverage.Class.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Coverage.CostToBeneficiary parseCoverageCostToBeneficiary(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Coverage.CostToBeneficiary.Builder builder = Coverage.CostToBeneficiary.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, exceptionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "valueSimpleQuantity":
                    builder.value((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "valueSimpleQuantity", reader, -1));
                    break;
                case "valueMoney":
                    builder.value(parseMoney("valueMoney", reader, -1));
                    break;
                case "exception":
                    builder.exception(parseCoverageCostToBeneficiaryException("exception", reader, exceptionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Coverage.CostToBeneficiary.Exception parseCoverageCostToBeneficiaryException(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Coverage.CostToBeneficiary.Exception.Builder builder = Coverage.CostToBeneficiary.Exception.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityRequest parseCoverageEligibilityRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityRequest.Builder builder = CoverageEligibilityRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, purposeElementIndex = 0, supportingInfoElementIndex = 0, insuranceElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EligibilityRequestStatus) parseString(EligibilityRequestStatus.builder(), "status", reader, -1));
                    break;
                case "priority":
                    builder.priority(parseCodeableConcept("priority", reader, -1));
                    break;
                case "purpose":
                    builder.purpose((EligibilityRequestPurpose) parseString(EligibilityRequestPurpose.builder(), "purpose", reader, purposeElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "servicedDate":
                    builder.serviced(parseDate("servicedDate", reader, -1));
                    break;
                case "servicedPeriod":
                    builder.serviced(parsePeriod("servicedPeriod", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "enterer":
                    builder.enterer(parseReference("enterer", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "insurer":
                    builder.insurer(parseReference("insurer", reader, -1));
                    break;
                case "facility":
                    builder.facility(parseReference("facility", reader, -1));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseCoverageEligibilityRequestSupportingInfo("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "insurance":
                    builder.insurance(parseCoverageEligibilityRequestInsurance("insurance", reader, insuranceElementIndex++));
                    break;
                case "item":
                    builder.item(parseCoverageEligibilityRequestItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityRequest.Insurance parseCoverageEligibilityRequestInsurance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityRequest.Insurance.Builder builder = CoverageEligibilityRequest.Insurance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "focal":
                    builder.focal(parseBoolean("focal", reader, -1));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                case "businessArrangement":
                    builder.businessArrangement(parseString("businessArrangement", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityRequest.Item parseCoverageEligibilityRequestItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityRequest.Item.Builder builder = CoverageEligibilityRequest.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, supportingInfoSequenceElementIndex = 0, modifierElementIndex = 0, diagnosisElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "supportingInfoSequence":
                    builder.supportingInfoSequence((PositiveInt) parseInteger(PositiveInt.builder(), "supportingInfoSequence", reader, supportingInfoSequenceElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "facility":
                    builder.facility(parseReference("facility", reader, -1));
                    break;
                case "diagnosis":
                    builder.diagnosis(parseCoverageEligibilityRequestItemDiagnosis("diagnosis", reader, diagnosisElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseReference("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityRequest.Item.Diagnosis parseCoverageEligibilityRequestItemDiagnosis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityRequest.Item.Diagnosis.Builder builder = CoverageEligibilityRequest.Item.Diagnosis.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "diagnosisCodeableConcept":
                    builder.diagnosis(parseCodeableConcept("diagnosisCodeableConcept", reader, -1));
                    break;
                case "diagnosisReference":
                    builder.diagnosis(parseReference("diagnosisReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityRequest.SupportingInfo parseCoverageEligibilityRequestSupportingInfo(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityRequest.SupportingInfo.Builder builder = CoverageEligibilityRequest.SupportingInfo.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "information":
                    builder.information(parseReference("information", reader, -1));
                    break;
                case "appliesToAll":
                    builder.appliesToAll(parseBoolean("appliesToAll", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityResponse parseCoverageEligibilityResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityResponse.Builder builder = CoverageEligibilityResponse.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, purposeElementIndex = 0, insuranceElementIndex = 0, errorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EligibilityResponseStatus) parseString(EligibilityResponseStatus.builder(), "status", reader, -1));
                    break;
                case "purpose":
                    builder.purpose((EligibilityResponsePurpose) parseString(EligibilityResponsePurpose.builder(), "purpose", reader, purposeElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "servicedDate":
                    builder.serviced(parseDate("servicedDate", reader, -1));
                    break;
                case "servicedPeriod":
                    builder.serviced(parsePeriod("servicedPeriod", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "requestor":
                    builder.requestor(parseReference("requestor", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "outcome":
                    builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", reader, -1));
                    break;
                case "disposition":
                    builder.disposition(parseString("disposition", reader, -1));
                    break;
                case "insurer":
                    builder.insurer(parseReference("insurer", reader, -1));
                    break;
                case "insurance":
                    builder.insurance(parseCoverageEligibilityResponseInsurance("insurance", reader, insuranceElementIndex++));
                    break;
                case "preAuthRef":
                    builder.preAuthRef(parseString("preAuthRef", reader, -1));
                    break;
                case "form":
                    builder.form(parseCodeableConcept("form", reader, -1));
                    break;
                case "error":
                    builder.error(parseCoverageEligibilityResponseError("error", reader, errorElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityResponse.Error parseCoverageEligibilityResponseError(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityResponse.Error.Builder builder = CoverageEligibilityResponse.Error.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityResponse.Insurance parseCoverageEligibilityResponseInsurance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityResponse.Insurance.Builder builder = CoverageEligibilityResponse.Insurance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                case "inforce":
                    builder.inforce(parseBoolean("inforce", reader, -1));
                    break;
                case "benefitPeriod":
                    builder.benefitPeriod(parsePeriod("benefitPeriod", reader, -1));
                    break;
                case "item":
                    builder.item(parseCoverageEligibilityResponseInsuranceItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityResponse.Insurance.Item parseCoverageEligibilityResponseInsuranceItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityResponse.Insurance.Item.Builder builder = CoverageEligibilityResponse.Insurance.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, benefitElementIndex = 0, authorizationSupportingElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "excluded":
                    builder.excluded(parseBoolean("excluded", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "network":
                    builder.network(parseCodeableConcept("network", reader, -1));
                    break;
                case "unit":
                    builder.unit(parseCodeableConcept("unit", reader, -1));
                    break;
                case "term":
                    builder.term(parseCodeableConcept("term", reader, -1));
                    break;
                case "benefit":
                    builder.benefit(parseCoverageEligibilityResponseInsuranceItemBenefit("benefit", reader, benefitElementIndex++));
                    break;
                case "authorizationRequired":
                    builder.authorizationRequired(parseBoolean("authorizationRequired", reader, -1));
                    break;
                case "authorizationSupporting":
                    builder.authorizationSupporting(parseCodeableConcept("authorizationSupporting", reader, authorizationSupportingElementIndex++));
                    break;
                case "authorizationUrl":
                    builder.authorizationUrl(parseUri("authorizationUrl", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private CoverageEligibilityResponse.Insurance.Item.Benefit parseCoverageEligibilityResponseInsuranceItemBenefit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        CoverageEligibilityResponse.Insurance.Item.Benefit.Builder builder = CoverageEligibilityResponse.Insurance.Item.Benefit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "allowedUnsignedInt":
                    builder.allowed((UnsignedInt) parseInteger(UnsignedInt.builder(), "allowedUnsignedInt", reader, -1));
                    break;
                case "allowedString":
                    builder.allowed(parseString("allowedString", reader, -1));
                    break;
                case "allowedMoney":
                    builder.allowed(parseMoney("allowedMoney", reader, -1));
                    break;
                case "usedUnsignedInt":
                    builder.used((UnsignedInt) parseInteger(UnsignedInt.builder(), "usedUnsignedInt", reader, -1));
                    break;
                case "usedString":
                    builder.used(parseString("usedString", reader, -1));
                    break;
                case "usedMoney":
                    builder.used(parseMoney("usedMoney", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DataRequirement parseDataRequirement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DataRequirement.Builder builder = DataRequirement.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, profileElementIndex = 0, mustSupportElementIndex = 0, codeFilterElementIndex = 0, dateFilterElementIndex = 0, sortElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "type":
                    builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, profileElementIndex++));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "mustSupport":
                    builder.mustSupport(parseString("mustSupport", reader, mustSupportElementIndex++));
                    break;
                case "codeFilter":
                    builder.codeFilter(parseDataRequirementCodeFilter("codeFilter", reader, codeFilterElementIndex++));
                    break;
                case "dateFilter":
                    builder.dateFilter(parseDataRequirementDateFilter("dateFilter", reader, dateFilterElementIndex++));
                    break;
                case "limit":
                    builder.limit((PositiveInt) parseInteger(PositiveInt.builder(), "limit", reader, -1));
                    break;
                case "sort":
                    builder.sort(parseDataRequirementSort("sort", reader, sortElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DataRequirement.CodeFilter parseDataRequirementCodeFilter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DataRequirement.CodeFilter.Builder builder = DataRequirement.CodeFilter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "searchParam":
                    builder.searchParam(parseString("searchParam", reader, -1));
                    break;
                case "valueSet":
                    builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", reader, -1));
                    break;
                case "code":
                    builder.code(parseCoding("code", reader, codeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DataRequirement.DateFilter parseDataRequirementDateFilter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DataRequirement.DateFilter.Builder builder = DataRequirement.DateFilter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "searchParam":
                    builder.searchParam(parseString("searchParam", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "valueDuration":
                    builder.value((Duration) parseQuantity(Duration.builder(), "valueDuration", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DataRequirement.Sort parseDataRequirementSort(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DataRequirement.Sort.Builder builder = DataRequirement.Sort.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "direction":
                    builder.direction((SortDirection) parseString(SortDirection.builder(), "direction", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Date parseDate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Date.Builder builder = Date.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DateTime parseDateTime(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DateTime.Builder builder = DateTime.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Decimal parseDecimal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Decimal.Builder builder = Decimal.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DetectedIssue parseDetectedIssue(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DetectedIssue.Builder builder = DetectedIssue.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, implicatedElementIndex = 0, evidenceElementIndex = 0, mitigationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((DetectedIssueStatus) parseString(DetectedIssueStatus.builder(), "status", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "severity":
                    builder.severity((DetectedIssueSeverity) parseString(DetectedIssueSeverity.builder(), "severity", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "identifiedDateTime":
                    builder.identified(parseDateTime("identifiedDateTime", reader, -1));
                    break;
                case "identifiedPeriod":
                    builder.identified(parsePeriod("identifiedPeriod", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "implicated":
                    builder.implicated(parseReference("implicated", reader, implicatedElementIndex++));
                    break;
                case "evidence":
                    builder.evidence(parseDetectedIssueEvidence("evidence", reader, evidenceElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseString("detail", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseUri("reference", reader, -1));
                    break;
                case "mitigation":
                    builder.mitigation(parseDetectedIssueMitigation("mitigation", reader, mitigationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DetectedIssue.Evidence parseDetectedIssueEvidence(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DetectedIssue.Evidence.Builder builder = DetectedIssue.Evidence.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseReference("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DetectedIssue.Mitigation parseDetectedIssueMitigation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DetectedIssue.Mitigation.Builder builder = DetectedIssue.Mitigation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "action":
                    builder.action(parseCodeableConcept("action", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Device parseDevice(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Device.Builder builder = Device.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, udiCarrierElementIndex = 0, statusReasonElementIndex = 0, deviceNameElementIndex = 0, specializationElementIndex = 0, versionElementIndex = 0, propertyElementIndex = 0, contactElementIndex = 0, noteElementIndex = 0, safetyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "definition":
                    builder.definition(parseReference("definition", reader, -1));
                    break;
                case "udiCarrier":
                    builder.udiCarrier(parseDeviceUdiCarrier("udiCarrier", reader, udiCarrierElementIndex++));
                    break;
                case "status":
                    builder.status((FHIRDeviceStatus) parseString(FHIRDeviceStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, statusReasonElementIndex++));
                    break;
                case "distinctIdentifier":
                    builder.distinctIdentifier(parseString("distinctIdentifier", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseString("manufacturer", reader, -1));
                    break;
                case "manufactureDate":
                    builder.manufactureDate(parseDateTime("manufactureDate", reader, -1));
                    break;
                case "expirationDate":
                    builder.expirationDate(parseDateTime("expirationDate", reader, -1));
                    break;
                case "lotNumber":
                    builder.lotNumber(parseString("lotNumber", reader, -1));
                    break;
                case "serialNumber":
                    builder.serialNumber(parseString("serialNumber", reader, -1));
                    break;
                case "deviceName":
                    builder.deviceName(parseDeviceDeviceName("deviceName", reader, deviceNameElementIndex++));
                    break;
                case "modelNumber":
                    builder.modelNumber(parseString("modelNumber", reader, -1));
                    break;
                case "partNumber":
                    builder.partNumber(parseString("partNumber", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "specialization":
                    builder.specialization(parseDeviceSpecialization("specialization", reader, specializationElementIndex++));
                    break;
                case "version":
                    builder.version(parseDeviceVersion("version", reader, versionElementIndex++));
                    break;
                case "property":
                    builder.property(parseDeviceProperty("property", reader, propertyElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "owner":
                    builder.owner(parseReference("owner", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactPoint("contact", reader, contactElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "safety":
                    builder.safety(parseCodeableConcept("safety", reader, safetyElementIndex++));
                    break;
                case "parent":
                    builder.parent(parseReference("parent", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Device.DeviceName parseDeviceDeviceName(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Device.DeviceName.Builder builder = Device.DeviceName.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "type":
                    builder.type((DeviceNameType) parseString(DeviceNameType.builder(), "type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Device.Property parseDeviceProperty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Device.Property.Builder builder = Device.Property.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, valueQuantityElementIndex = 0, valueCodeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "valueQuantity":
                    builder.valueQuantity(parseQuantity("valueQuantity", reader, valueQuantityElementIndex++));
                    break;
                case "valueCode":
                    builder.valueCode(parseCodeableConcept("valueCode", reader, valueCodeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Device.Specialization parseDeviceSpecialization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Device.Specialization.Builder builder = Device.Specialization.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "systemType":
                    builder.systemType(parseCodeableConcept("systemType", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Device.UdiCarrier parseDeviceUdiCarrier(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Device.UdiCarrier.Builder builder = Device.UdiCarrier.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "deviceIdentifier":
                    builder.deviceIdentifier(parseString("deviceIdentifier", reader, -1));
                    break;
                case "issuer":
                    builder.issuer(parseUri("issuer", reader, -1));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseUri("jurisdiction", reader, -1));
                    break;
                case "carrierAIDC":
                    builder.carrierAIDC(parseBase64Binary("carrierAIDC", reader, -1));
                    break;
                case "carrierHRF":
                    builder.carrierHRF(parseString("carrierHRF", reader, -1));
                    break;
                case "entryType":
                    builder.entryType((UDIEntryType) parseString(UDIEntryType.builder(), "entryType", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Device.Version parseDeviceVersion(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Device.Version.Builder builder = Device.Version.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "component":
                    builder.component(parseIdentifier("component", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition parseDeviceDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.Builder builder = DeviceDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, udiDeviceIdentifierElementIndex = 0, deviceNameElementIndex = 0, specializationElementIndex = 0, versionElementIndex = 0, safetyElementIndex = 0, shelfLifeStorageElementIndex = 0, languageCodeElementIndex = 0, capabilityElementIndex = 0, propertyElementIndex = 0, contactElementIndex = 0, noteElementIndex = 0, materialElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "udiDeviceIdentifier":
                    builder.udiDeviceIdentifier(parseDeviceDefinitionUdiDeviceIdentifier("udiDeviceIdentifier", reader, udiDeviceIdentifierElementIndex++));
                    break;
                case "manufacturerString":
                    builder.manufacturer(parseString("manufacturerString", reader, -1));
                    break;
                case "manufacturerReference":
                    builder.manufacturer(parseReference("manufacturerReference", reader, -1));
                    break;
                case "deviceName":
                    builder.deviceName(parseDeviceDefinitionDeviceName("deviceName", reader, deviceNameElementIndex++));
                    break;
                case "modelNumber":
                    builder.modelNumber(parseString("modelNumber", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "specialization":
                    builder.specialization(parseDeviceDefinitionSpecialization("specialization", reader, specializationElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, versionElementIndex++));
                    break;
                case "safety":
                    builder.safety(parseCodeableConcept("safety", reader, safetyElementIndex++));
                    break;
                case "shelfLifeStorage":
                    builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", reader, shelfLifeStorageElementIndex++));
                    break;
                case "physicalCharacteristics":
                    builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", reader, -1));
                    break;
                case "languageCode":
                    builder.languageCode(parseCodeableConcept("languageCode", reader, languageCodeElementIndex++));
                    break;
                case "capability":
                    builder.capability(parseDeviceDefinitionCapability("capability", reader, capabilityElementIndex++));
                    break;
                case "property":
                    builder.property(parseDeviceDefinitionProperty("property", reader, propertyElementIndex++));
                    break;
                case "owner":
                    builder.owner(parseReference("owner", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactPoint("contact", reader, contactElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "onlineInformation":
                    builder.onlineInformation(parseUri("onlineInformation", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "quantity":
                    builder.quantity(parseQuantity("quantity", reader, -1));
                    break;
                case "parentDevice":
                    builder.parentDevice(parseReference("parentDevice", reader, -1));
                    break;
                case "material":
                    builder.material(parseDeviceDefinitionMaterial("material", reader, materialElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition.Capability parseDeviceDefinitionCapability(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.Capability.Builder builder = DeviceDefinition.Capability.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, descriptionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "description":
                    builder.description(parseCodeableConcept("description", reader, descriptionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition.DeviceName parseDeviceDefinitionDeviceName(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.DeviceName.Builder builder = DeviceDefinition.DeviceName.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "type":
                    builder.type((DeviceNameType) parseString(DeviceNameType.builder(), "type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition.Material parseDeviceDefinitionMaterial(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.Material.Builder builder = DeviceDefinition.Material.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "substance":
                    builder.substance(parseCodeableConcept("substance", reader, -1));
                    break;
                case "alternate":
                    builder.alternate(parseBoolean("alternate", reader, -1));
                    break;
                case "allergenicIndicator":
                    builder.allergenicIndicator(parseBoolean("allergenicIndicator", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition.Property parseDeviceDefinitionProperty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.Property.Builder builder = DeviceDefinition.Property.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, valueQuantityElementIndex = 0, valueCodeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "valueQuantity":
                    builder.valueQuantity(parseQuantity("valueQuantity", reader, valueQuantityElementIndex++));
                    break;
                case "valueCode":
                    builder.valueCode(parseCodeableConcept("valueCode", reader, valueCodeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition.Specialization parseDeviceDefinitionSpecialization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.Specialization.Builder builder = DeviceDefinition.Specialization.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "systemType":
                    builder.systemType(parseString("systemType", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceDefinition.UdiDeviceIdentifier parseDeviceDefinitionUdiDeviceIdentifier(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceDefinition.UdiDeviceIdentifier.Builder builder = DeviceDefinition.UdiDeviceIdentifier.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "deviceIdentifier":
                    builder.deviceIdentifier(parseString("deviceIdentifier", reader, -1));
                    break;
                case "issuer":
                    builder.issuer(parseUri("issuer", reader, -1));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseUri("jurisdiction", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceMetric parseDeviceMetric(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceMetric.Builder builder = DeviceMetric.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, calibrationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "unit":
                    builder.unit(parseCodeableConcept("unit", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, -1));
                    break;
                case "parent":
                    builder.parent(parseReference("parent", reader, -1));
                    break;
                case "operationalStatus":
                    builder.operationalStatus((DeviceMetricOperationalStatus) parseString(DeviceMetricOperationalStatus.builder(), "operationalStatus", reader, -1));
                    break;
                case "color":
                    builder.color((DeviceMetricColor) parseString(DeviceMetricColor.builder(), "color", reader, -1));
                    break;
                case "category":
                    builder.category((DeviceMetricCategory) parseString(DeviceMetricCategory.builder(), "category", reader, -1));
                    break;
                case "measurementPeriod":
                    builder.measurementPeriod(parseTiming("measurementPeriod", reader, -1));
                    break;
                case "calibration":
                    builder.calibration(parseDeviceMetricCalibration("calibration", reader, calibrationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceMetric.Calibration parseDeviceMetricCalibration(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceMetric.Calibration.Builder builder = DeviceMetric.Calibration.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((DeviceMetricCalibrationType) parseString(DeviceMetricCalibrationType.builder(), "type", reader, -1));
                    break;
                case "state":
                    builder.state((DeviceMetricCalibrationState) parseString(DeviceMetricCalibrationState.builder(), "state", reader, -1));
                    break;
                case "time":
                    builder.time(parseInstant("time", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceRequest parseDeviceRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceRequest.Builder builder = DeviceRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, priorRequestElementIndex = 0, parameterElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, insuranceElementIndex = 0, supportingInfoElementIndex = 0, noteElementIndex = 0, relevantHistoryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "priorRequest":
                    builder.priorRequest(parseReference("priorRequest", reader, priorRequestElementIndex++));
                    break;
                case "groupIdentifier":
                    builder.groupIdentifier(parseIdentifier("groupIdentifier", reader, -1));
                    break;
                case "status":
                    builder.status((DeviceRequestStatus) parseString(DeviceRequestStatus.builder(), "status", reader, -1));
                    break;
                case "intent":
                    builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", reader, -1));
                    break;
                case "priority":
                    builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", reader, -1));
                    break;
                case "codeReference":
                    builder.code(parseReference("codeReference", reader, -1));
                    break;
                case "codeCodeableConcept":
                    builder.code(parseCodeableConcept("codeCodeableConcept", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseDeviceRequestParameter("parameter", reader, parameterElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "occurrenceTiming":
                    builder.occurrence(parseTiming("occurrenceTiming", reader, -1));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, -1));
                    break;
                case "performerType":
                    builder.performerType(parseCodeableConcept("performerType", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "insurance":
                    builder.insurance(parseReference("insurance", reader, insuranceElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseReference("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "relevantHistory":
                    builder.relevantHistory(parseReference("relevantHistory", reader, relevantHistoryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceRequest.Parameter parseDeviceRequestParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceRequest.Parameter.Builder builder = DeviceRequest.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DeviceUseStatement parseDeviceUseStatement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DeviceUseStatement.Builder builder = DeviceUseStatement.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, derivedFromElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "status":
                    builder.status((DeviceUseStatementStatus) parseString(DeviceUseStatementStatus.builder(), "status", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "derivedFrom":
                    builder.derivedFrom(parseReference("derivedFrom", reader, derivedFromElementIndex++));
                    break;
                case "timingTiming":
                    builder.timing(parseTiming("timingTiming", reader, -1));
                    break;
                case "timingPeriod":
                    builder.timing(parsePeriod("timingPeriod", reader, -1));
                    break;
                case "timingDateTime":
                    builder.timing(parseDateTime("timingDateTime", reader, -1));
                    break;
                case "recordedOn":
                    builder.recordedOn(parseDateTime("recordedOn", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, -1));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DiagnosticReport parseDiagnosticReport(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DiagnosticReport.Builder builder = DiagnosticReport.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, categoryElementIndex = 0, performerElementIndex = 0, resultsInterpreterElementIndex = 0, specimenElementIndex = 0, resultElementIndex = 0, imagingStudyElementIndex = 0, mediaElementIndex = 0, conclusionCodeElementIndex = 0, presentedFormElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "status":
                    builder.status((DiagnosticReportStatus) parseString(DiagnosticReportStatus.builder(), "status", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "effectiveDateTime":
                    builder.effective(parseDateTime("effectiveDateTime", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effective(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "issued":
                    builder.issued(parseInstant("issued", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, performerElementIndex++));
                    break;
                case "resultsInterpreter":
                    builder.resultsInterpreter(parseReference("resultsInterpreter", reader, resultsInterpreterElementIndex++));
                    break;
                case "specimen":
                    builder.specimen(parseReference("specimen", reader, specimenElementIndex++));
                    break;
                case "result":
                    builder.result(parseReference("result", reader, resultElementIndex++));
                    break;
                case "imagingStudy":
                    builder.imagingStudy(parseReference("imagingStudy", reader, imagingStudyElementIndex++));
                    break;
                case "media":
                    builder.media(parseDiagnosticReportMedia("media", reader, mediaElementIndex++));
                    break;
                case "conclusion":
                    builder.conclusion(parseString("conclusion", reader, -1));
                    break;
                case "conclusionCode":
                    builder.conclusionCode(parseCodeableConcept("conclusionCode", reader, conclusionCodeElementIndex++));
                    break;
                case "presentedForm":
                    builder.presentedForm(parseAttachment("presentedForm", reader, presentedFormElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DiagnosticReport.Media parseDiagnosticReportMedia(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DiagnosticReport.Media.Builder builder = DiagnosticReport.Media.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "link":
                    builder.link(parseReference("link", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DocumentManifest parseDocumentManifest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DocumentManifest.Builder builder = DocumentManifest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, authorElementIndex = 0, recipientElementIndex = 0, contentElementIndex = 0, relatedElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "masterIdentifier":
                    builder.masterIdentifier(parseIdentifier("masterIdentifier", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, authorElementIndex++));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, recipientElementIndex++));
                    break;
                case "source":
                    builder.source(parseUri("source", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "content":
                    builder.content(parseReference("content", reader, contentElementIndex++));
                    break;
                case "related":
                    builder.related(parseDocumentManifestRelated("related", reader, relatedElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DocumentManifest.Related parseDocumentManifestRelated(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DocumentManifest.Related.Builder builder = DocumentManifest.Related.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "ref":
                    builder.ref(parseReference("ref", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DocumentReference parseDocumentReference(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DocumentReference.Builder builder = DocumentReference.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, authorElementIndex = 0, relatesToElementIndex = 0, securityLabelElementIndex = 0, contentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "masterIdentifier":
                    builder.masterIdentifier(parseIdentifier("masterIdentifier", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((DocumentReferenceStatus) parseString(DocumentReferenceStatus.builder(), "status", reader, -1));
                    break;
                case "docStatus":
                    builder.docStatus((ReferredDocumentStatus) parseString(ReferredDocumentStatus.builder(), "docStatus", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "date":
                    builder.date(parseInstant("date", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, authorElementIndex++));
                    break;
                case "authenticator":
                    builder.authenticator(parseReference("authenticator", reader, -1));
                    break;
                case "custodian":
                    builder.custodian(parseReference("custodian", reader, -1));
                    break;
                case "relatesTo":
                    builder.relatesTo(parseDocumentReferenceRelatesTo("relatesTo", reader, relatesToElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "securityLabel":
                    builder.securityLabel(parseCodeableConcept("securityLabel", reader, securityLabelElementIndex++));
                    break;
                case "content":
                    builder.content(parseDocumentReferenceContent("content", reader, contentElementIndex++));
                    break;
                case "context":
                    builder.context(parseDocumentReferenceContext("context", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DocumentReference.Content parseDocumentReferenceContent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DocumentReference.Content.Builder builder = DocumentReference.Content.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "attachment":
                    builder.attachment(parseAttachment("attachment", reader, -1));
                    break;
                case "format":
                    builder.format(parseCoding("format", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DocumentReference.Context parseDocumentReferenceContext(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DocumentReference.Context.Builder builder = DocumentReference.Context.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, encounterElementIndex = 0, eventElementIndex = 0, relatedElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, encounterElementIndex++));
                    break;
                case "event":
                    builder.event(parseCodeableConcept("event", reader, eventElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "facilityType":
                    builder.facilityType(parseCodeableConcept("facilityType", reader, -1));
                    break;
                case "practiceSetting":
                    builder.practiceSetting(parseCodeableConcept("practiceSetting", reader, -1));
                    break;
                case "sourcePatientInfo":
                    builder.sourcePatientInfo(parseReference("sourcePatientInfo", reader, -1));
                    break;
                case "related":
                    builder.related(parseReference("related", reader, relatedElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private DocumentReference.RelatesTo parseDocumentReferenceRelatesTo(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        DocumentReference.RelatesTo.Builder builder = DocumentReference.RelatesTo.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((DocumentRelationshipType) parseString(DocumentRelationshipType.builder(), "code", reader, -1));
                    break;
                case "target":
                    builder.target(parseReference("target", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Dosage parseDosage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Dosage.Builder builder = Dosage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, additionalInstructionElementIndex = 0, doseAndRateElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence(parseInteger("sequence", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "additionalInstruction":
                    builder.additionalInstruction(parseCodeableConcept("additionalInstruction", reader, additionalInstructionElementIndex++));
                    break;
                case "patientInstruction":
                    builder.patientInstruction(parseString("patientInstruction", reader, -1));
                    break;
                case "timing":
                    builder.timing(parseTiming("timing", reader, -1));
                    break;
                case "asNeededBoolean":
                    builder.asNeeded(parseBoolean("asNeededBoolean", reader, -1));
                    break;
                case "asNeededCodeableConcept":
                    builder.asNeeded(parseCodeableConcept("asNeededCodeableConcept", reader, -1));
                    break;
                case "site":
                    builder.site(parseCodeableConcept("site", reader, -1));
                    break;
                case "route":
                    builder.route(parseCodeableConcept("route", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "doseAndRate":
                    builder.doseAndRate(parseDosageDoseAndRate("doseAndRate", reader, doseAndRateElementIndex++));
                    break;
                case "maxDosePerPeriod":
                    builder.maxDosePerPeriod(parseRatio("maxDosePerPeriod", reader, -1));
                    break;
                case "maxDosePerAdministration":
                    builder.maxDosePerAdministration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerAdministration", reader, -1));
                    break;
                case "maxDosePerLifetime":
                    builder.maxDosePerLifetime((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxDosePerLifetime", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Dosage.DoseAndRate parseDosageDoseAndRate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Dosage.DoseAndRate.Builder builder = Dosage.DoseAndRate.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "doseRange":
                    builder.dose(parseRange("doseRange", reader, -1));
                    break;
                case "doseSimpleQuantity":
                    builder.dose((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "doseSimpleQuantity", reader, -1));
                    break;
                case "rateRatio":
                    builder.rate(parseRatio("rateRatio", reader, -1));
                    break;
                case "rateRange":
                    builder.rate(parseRange("rateRange", reader, -1));
                    break;
                case "rateSimpleQuantity":
                    builder.rate((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "rateSimpleQuantity", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis parseEffectEvidenceSynthesis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.Builder builder = EffectEvidenceSynthesis.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, noteElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, resultsByExposureElementIndex = 0, effectEstimateElementIndex = 0, certaintyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "synthesisType":
                    builder.synthesisType(parseCodeableConcept("synthesisType", reader, -1));
                    break;
                case "studyType":
                    builder.studyType(parseCodeableConcept("studyType", reader, -1));
                    break;
                case "population":
                    builder.population(parseReference("population", reader, -1));
                    break;
                case "exposure":
                    builder.exposure(parseReference("exposure", reader, -1));
                    break;
                case "exposureAlternative":
                    builder.exposureAlternative(parseReference("exposureAlternative", reader, -1));
                    break;
                case "outcome":
                    builder.outcome(parseReference("outcome", reader, -1));
                    break;
                case "sampleSize":
                    builder.sampleSize(parseEffectEvidenceSynthesisSampleSize("sampleSize", reader, -1));
                    break;
                case "resultsByExposure":
                    builder.resultsByExposure(parseEffectEvidenceSynthesisResultsByExposure("resultsByExposure", reader, resultsByExposureElementIndex++));
                    break;
                case "effectEstimate":
                    builder.effectEstimate(parseEffectEvidenceSynthesisEffectEstimate("effectEstimate", reader, effectEstimateElementIndex++));
                    break;
                case "certainty":
                    builder.certainty(parseEffectEvidenceSynthesisCertainty("certainty", reader, certaintyElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis.Certainty parseEffectEvidenceSynthesisCertainty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.Certainty.Builder builder = EffectEvidenceSynthesis.Certainty.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, ratingElementIndex = 0, noteElementIndex = 0, certaintySubcomponentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "rating":
                    builder.rating(parseCodeableConcept("rating", reader, ratingElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "certaintySubcomponent":
                    builder.certaintySubcomponent(parseEffectEvidenceSynthesisCertaintyCertaintySubcomponent("certaintySubcomponent", reader, certaintySubcomponentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis.Certainty.CertaintySubcomponent parseEffectEvidenceSynthesisCertaintyCertaintySubcomponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.Builder builder = EffectEvidenceSynthesis.Certainty.CertaintySubcomponent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, ratingElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "rating":
                    builder.rating(parseCodeableConcept("rating", reader, ratingElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis.EffectEstimate parseEffectEvidenceSynthesisEffectEstimate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.EffectEstimate.Builder builder = EffectEvidenceSynthesis.EffectEstimate.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, precisionEstimateElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "variantState":
                    builder.variantState(parseCodeableConcept("variantState", reader, -1));
                    break;
                case "value":
                    builder.value(parseDecimal("value", reader, -1));
                    break;
                case "unitOfMeasure":
                    builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", reader, -1));
                    break;
                case "precisionEstimate":
                    builder.precisionEstimate(parseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate("precisionEstimate", reader, precisionEstimateElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate parseEffectEvidenceSynthesisEffectEstimatePrecisionEstimate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.Builder builder = EffectEvidenceSynthesis.EffectEstimate.PrecisionEstimate.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "level":
                    builder.level(parseDecimal("level", reader, -1));
                    break;
                case "from":
                    builder.from(parseDecimal("from", reader, -1));
                    break;
                case "to":
                    builder.to(parseDecimal("to", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis.ResultsByExposure parseEffectEvidenceSynthesisResultsByExposure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.ResultsByExposure.Builder builder = EffectEvidenceSynthesis.ResultsByExposure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "exposureState":
                    builder.exposureState((ExposureState) parseString(ExposureState.builder(), "exposureState", reader, -1));
                    break;
                case "variantState":
                    builder.variantState(parseCodeableConcept("variantState", reader, -1));
                    break;
                case "riskEvidenceSynthesis":
                    builder.riskEvidenceSynthesis(parseReference("riskEvidenceSynthesis", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EffectEvidenceSynthesis.SampleSize parseEffectEvidenceSynthesisSampleSize(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EffectEvidenceSynthesis.SampleSize.Builder builder = EffectEvidenceSynthesis.SampleSize.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "numberOfStudies":
                    builder.numberOfStudies(parseInteger("numberOfStudies", reader, -1));
                    break;
                case "numberOfParticipants":
                    builder.numberOfParticipants(parseInteger("numberOfParticipants", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition parseElementDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Builder builder = ElementDefinition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, representationElementIndex = 0, codeElementIndex = 0, aliasElementIndex = 0, typeElementIndex = 0, exampleElementIndex = 0, conditionElementIndex = 0, constraintElementIndex = 0, mappingElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "representation":
                    builder.representation((PropertyRepresentation) parseString(PropertyRepresentation.builder(), "representation", reader, representationElementIndex++));
                    break;
                case "sliceName":
                    builder.sliceName(parseString("sliceName", reader, -1));
                    break;
                case "sliceIsConstraining":
                    builder.sliceIsConstraining(parseBoolean("sliceIsConstraining", reader, -1));
                    break;
                case "label":
                    builder.label(parseString("label", reader, -1));
                    break;
                case "code":
                    builder.code(parseCoding("code", reader, codeElementIndex++));
                    break;
                case "slicing":
                    builder.slicing(parseElementDefinitionSlicing("slicing", reader, -1));
                    break;
                case "short":
                    builder._short(parseString("short", reader, -1));
                    break;
                case "definition":
                    builder.definition((Markdown) parseString(Markdown.builder(), "definition", reader, -1));
                    break;
                case "comment":
                    builder.comment((Markdown) parseString(Markdown.builder(), "comment", reader, -1));
                    break;
                case "requirements":
                    builder.requirements((Markdown) parseString(Markdown.builder(), "requirements", reader, -1));
                    break;
                case "alias":
                    builder.alias(parseString("alias", reader, aliasElementIndex++));
                    break;
                case "min":
                    builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                case "base":
                    builder.base(parseElementDefinitionBase("base", reader, -1));
                    break;
                case "contentReference":
                    builder.contentReference(parseUri("contentReference", reader, -1));
                    break;
                case "type":
                    builder.type(parseElementDefinitionType("type", reader, typeElementIndex++));
                    break;
                case "defaultValueBase64Binary":
                    builder.defaultValue(parseBase64Binary("defaultValueBase64Binary", reader, -1));
                    break;
                case "defaultValueBoolean":
                    builder.defaultValue(parseBoolean("defaultValueBoolean", reader, -1));
                    break;
                case "defaultValueCanonical":
                    builder.defaultValue((Canonical) parseUri(Canonical.builder(), "defaultValueCanonical", reader, -1));
                    break;
                case "defaultValueCode":
                    builder.defaultValue((Code) parseString(Code.builder(), "defaultValueCode", reader, -1));
                    break;
                case "defaultValueDate":
                    builder.defaultValue(parseDate("defaultValueDate", reader, -1));
                    break;
                case "defaultValueDateTime":
                    builder.defaultValue(parseDateTime("defaultValueDateTime", reader, -1));
                    break;
                case "defaultValueDecimal":
                    builder.defaultValue(parseDecimal("defaultValueDecimal", reader, -1));
                    break;
                case "defaultValueId":
                    builder.defaultValue((Id) parseString(Id.builder(), "defaultValueId", reader, -1));
                    break;
                case "defaultValueInstant":
                    builder.defaultValue(parseInstant("defaultValueInstant", reader, -1));
                    break;
                case "defaultValueInteger":
                    builder.defaultValue(parseInteger("defaultValueInteger", reader, -1));
                    break;
                case "defaultValueMarkdown":
                    builder.defaultValue((Markdown) parseString(Markdown.builder(), "defaultValueMarkdown", reader, -1));
                    break;
                case "defaultValueOid":
                    builder.defaultValue((Oid) parseUri(Oid.builder(), "defaultValueOid", reader, -1));
                    break;
                case "defaultValuePositiveInt":
                    builder.defaultValue((PositiveInt) parseInteger(PositiveInt.builder(), "defaultValuePositiveInt", reader, -1));
                    break;
                case "defaultValueString":
                    builder.defaultValue(parseString("defaultValueString", reader, -1));
                    break;
                case "defaultValueTime":
                    builder.defaultValue(parseTime("defaultValueTime", reader, -1));
                    break;
                case "defaultValueUnsignedInt":
                    builder.defaultValue((UnsignedInt) parseInteger(UnsignedInt.builder(), "defaultValueUnsignedInt", reader, -1));
                    break;
                case "defaultValueUri":
                    builder.defaultValue(parseUri("defaultValueUri", reader, -1));
                    break;
                case "defaultValueUrl":
                    builder.defaultValue((Url) parseUri(Url.builder(), "defaultValueUrl", reader, -1));
                    break;
                case "defaultValueUuid":
                    builder.defaultValue((Uuid) parseUri(Uuid.builder(), "defaultValueUuid", reader, -1));
                    break;
                case "defaultValueAddress":
                    builder.defaultValue(parseAddress("defaultValueAddress", reader, -1));
                    break;
                case "defaultValueAge":
                    builder.defaultValue((Age) parseQuantity(Age.builder(), "defaultValueAge", reader, -1));
                    break;
                case "defaultValueAnnotation":
                    builder.defaultValue(parseAnnotation("defaultValueAnnotation", reader, -1));
                    break;
                case "defaultValueAttachment":
                    builder.defaultValue(parseAttachment("defaultValueAttachment", reader, -1));
                    break;
                case "defaultValueCodeableConcept":
                    builder.defaultValue(parseCodeableConcept("defaultValueCodeableConcept", reader, -1));
                    break;
                case "defaultValueCoding":
                    builder.defaultValue(parseCoding("defaultValueCoding", reader, -1));
                    break;
                case "defaultValueContactPoint":
                    builder.defaultValue(parseContactPoint("defaultValueContactPoint", reader, -1));
                    break;
                case "defaultValueCount":
                    builder.defaultValue((Count) parseQuantity(Count.builder(), "defaultValueCount", reader, -1));
                    break;
                case "defaultValueDistance":
                    builder.defaultValue((Distance) parseQuantity(Distance.builder(), "defaultValueDistance", reader, -1));
                    break;
                case "defaultValueDuration":
                    builder.defaultValue((Duration) parseQuantity(Duration.builder(), "defaultValueDuration", reader, -1));
                    break;
                case "defaultValueHumanName":
                    builder.defaultValue(parseHumanName("defaultValueHumanName", reader, -1));
                    break;
                case "defaultValueIdentifier":
                    builder.defaultValue(parseIdentifier("defaultValueIdentifier", reader, -1));
                    break;
                case "defaultValueMoney":
                    builder.defaultValue(parseMoney("defaultValueMoney", reader, -1));
                    break;
                case "defaultValuePeriod":
                    builder.defaultValue(parsePeriod("defaultValuePeriod", reader, -1));
                    break;
                case "defaultValueQuantity":
                    builder.defaultValue(parseQuantity("defaultValueQuantity", reader, -1));
                    break;
                case "defaultValueRange":
                    builder.defaultValue(parseRange("defaultValueRange", reader, -1));
                    break;
                case "defaultValueRatio":
                    builder.defaultValue(parseRatio("defaultValueRatio", reader, -1));
                    break;
                case "defaultValueReference":
                    builder.defaultValue(parseReference("defaultValueReference", reader, -1));
                    break;
                case "defaultValueSampledData":
                    builder.defaultValue(parseSampledData("defaultValueSampledData", reader, -1));
                    break;
                case "defaultValueSignature":
                    builder.defaultValue(parseSignature("defaultValueSignature", reader, -1));
                    break;
                case "defaultValueTiming":
                    builder.defaultValue(parseTiming("defaultValueTiming", reader, -1));
                    break;
                case "defaultValueContactDetail":
                    builder.defaultValue(parseContactDetail("defaultValueContactDetail", reader, -1));
                    break;
                case "defaultValueContributor":
                    builder.defaultValue(parseContributor("defaultValueContributor", reader, -1));
                    break;
                case "defaultValueDataRequirement":
                    builder.defaultValue(parseDataRequirement("defaultValueDataRequirement", reader, -1));
                    break;
                case "defaultValueExpression":
                    builder.defaultValue(parseExpression("defaultValueExpression", reader, -1));
                    break;
                case "defaultValueParameterDefinition":
                    builder.defaultValue(parseParameterDefinition("defaultValueParameterDefinition", reader, -1));
                    break;
                case "defaultValueRelatedArtifact":
                    builder.defaultValue(parseRelatedArtifact("defaultValueRelatedArtifact", reader, -1));
                    break;
                case "defaultValueTriggerDefinition":
                    builder.defaultValue(parseTriggerDefinition("defaultValueTriggerDefinition", reader, -1));
                    break;
                case "defaultValueUsageContext":
                    builder.defaultValue(parseUsageContext("defaultValueUsageContext", reader, -1));
                    break;
                case "defaultValueDosage":
                    builder.defaultValue(parseDosage("defaultValueDosage", reader, -1));
                    break;
                case "meaningWhenMissing":
                    builder.meaningWhenMissing((Markdown) parseString(Markdown.builder(), "meaningWhenMissing", reader, -1));
                    break;
                case "orderMeaning":
                    builder.orderMeaning(parseString("orderMeaning", reader, -1));
                    break;
                case "fixedBase64Binary":
                    builder.fixed(parseBase64Binary("fixedBase64Binary", reader, -1));
                    break;
                case "fixedBoolean":
                    builder.fixed(parseBoolean("fixedBoolean", reader, -1));
                    break;
                case "fixedCanonical":
                    builder.fixed((Canonical) parseUri(Canonical.builder(), "fixedCanonical", reader, -1));
                    break;
                case "fixedCode":
                    builder.fixed((Code) parseString(Code.builder(), "fixedCode", reader, -1));
                    break;
                case "fixedDate":
                    builder.fixed(parseDate("fixedDate", reader, -1));
                    break;
                case "fixedDateTime":
                    builder.fixed(parseDateTime("fixedDateTime", reader, -1));
                    break;
                case "fixedDecimal":
                    builder.fixed(parseDecimal("fixedDecimal", reader, -1));
                    break;
                case "fixedId":
                    builder.fixed((Id) parseString(Id.builder(), "fixedId", reader, -1));
                    break;
                case "fixedInstant":
                    builder.fixed(parseInstant("fixedInstant", reader, -1));
                    break;
                case "fixedInteger":
                    builder.fixed(parseInteger("fixedInteger", reader, -1));
                    break;
                case "fixedMarkdown":
                    builder.fixed((Markdown) parseString(Markdown.builder(), "fixedMarkdown", reader, -1));
                    break;
                case "fixedOid":
                    builder.fixed((Oid) parseUri(Oid.builder(), "fixedOid", reader, -1));
                    break;
                case "fixedPositiveInt":
                    builder.fixed((PositiveInt) parseInteger(PositiveInt.builder(), "fixedPositiveInt", reader, -1));
                    break;
                case "fixedString":
                    builder.fixed(parseString("fixedString", reader, -1));
                    break;
                case "fixedTime":
                    builder.fixed(parseTime("fixedTime", reader, -1));
                    break;
                case "fixedUnsignedInt":
                    builder.fixed((UnsignedInt) parseInteger(UnsignedInt.builder(), "fixedUnsignedInt", reader, -1));
                    break;
                case "fixedUri":
                    builder.fixed(parseUri("fixedUri", reader, -1));
                    break;
                case "fixedUrl":
                    builder.fixed((Url) parseUri(Url.builder(), "fixedUrl", reader, -1));
                    break;
                case "fixedUuid":
                    builder.fixed((Uuid) parseUri(Uuid.builder(), "fixedUuid", reader, -1));
                    break;
                case "fixedAddress":
                    builder.fixed(parseAddress("fixedAddress", reader, -1));
                    break;
                case "fixedAge":
                    builder.fixed((Age) parseQuantity(Age.builder(), "fixedAge", reader, -1));
                    break;
                case "fixedAnnotation":
                    builder.fixed(parseAnnotation("fixedAnnotation", reader, -1));
                    break;
                case "fixedAttachment":
                    builder.fixed(parseAttachment("fixedAttachment", reader, -1));
                    break;
                case "fixedCodeableConcept":
                    builder.fixed(parseCodeableConcept("fixedCodeableConcept", reader, -1));
                    break;
                case "fixedCoding":
                    builder.fixed(parseCoding("fixedCoding", reader, -1));
                    break;
                case "fixedContactPoint":
                    builder.fixed(parseContactPoint("fixedContactPoint", reader, -1));
                    break;
                case "fixedCount":
                    builder.fixed((Count) parseQuantity(Count.builder(), "fixedCount", reader, -1));
                    break;
                case "fixedDistance":
                    builder.fixed((Distance) parseQuantity(Distance.builder(), "fixedDistance", reader, -1));
                    break;
                case "fixedDuration":
                    builder.fixed((Duration) parseQuantity(Duration.builder(), "fixedDuration", reader, -1));
                    break;
                case "fixedHumanName":
                    builder.fixed(parseHumanName("fixedHumanName", reader, -1));
                    break;
                case "fixedIdentifier":
                    builder.fixed(parseIdentifier("fixedIdentifier", reader, -1));
                    break;
                case "fixedMoney":
                    builder.fixed(parseMoney("fixedMoney", reader, -1));
                    break;
                case "fixedPeriod":
                    builder.fixed(parsePeriod("fixedPeriod", reader, -1));
                    break;
                case "fixedQuantity":
                    builder.fixed(parseQuantity("fixedQuantity", reader, -1));
                    break;
                case "fixedRange":
                    builder.fixed(parseRange("fixedRange", reader, -1));
                    break;
                case "fixedRatio":
                    builder.fixed(parseRatio("fixedRatio", reader, -1));
                    break;
                case "fixedReference":
                    builder.fixed(parseReference("fixedReference", reader, -1));
                    break;
                case "fixedSampledData":
                    builder.fixed(parseSampledData("fixedSampledData", reader, -1));
                    break;
                case "fixedSignature":
                    builder.fixed(parseSignature("fixedSignature", reader, -1));
                    break;
                case "fixedTiming":
                    builder.fixed(parseTiming("fixedTiming", reader, -1));
                    break;
                case "fixedContactDetail":
                    builder.fixed(parseContactDetail("fixedContactDetail", reader, -1));
                    break;
                case "fixedContributor":
                    builder.fixed(parseContributor("fixedContributor", reader, -1));
                    break;
                case "fixedDataRequirement":
                    builder.fixed(parseDataRequirement("fixedDataRequirement", reader, -1));
                    break;
                case "fixedExpression":
                    builder.fixed(parseExpression("fixedExpression", reader, -1));
                    break;
                case "fixedParameterDefinition":
                    builder.fixed(parseParameterDefinition("fixedParameterDefinition", reader, -1));
                    break;
                case "fixedRelatedArtifact":
                    builder.fixed(parseRelatedArtifact("fixedRelatedArtifact", reader, -1));
                    break;
                case "fixedTriggerDefinition":
                    builder.fixed(parseTriggerDefinition("fixedTriggerDefinition", reader, -1));
                    break;
                case "fixedUsageContext":
                    builder.fixed(parseUsageContext("fixedUsageContext", reader, -1));
                    break;
                case "fixedDosage":
                    builder.fixed(parseDosage("fixedDosage", reader, -1));
                    break;
                case "patternBase64Binary":
                    builder.pattern(parseBase64Binary("patternBase64Binary", reader, -1));
                    break;
                case "patternBoolean":
                    builder.pattern(parseBoolean("patternBoolean", reader, -1));
                    break;
                case "patternCanonical":
                    builder.pattern((Canonical) parseUri(Canonical.builder(), "patternCanonical", reader, -1));
                    break;
                case "patternCode":
                    builder.pattern((Code) parseString(Code.builder(), "patternCode", reader, -1));
                    break;
                case "patternDate":
                    builder.pattern(parseDate("patternDate", reader, -1));
                    break;
                case "patternDateTime":
                    builder.pattern(parseDateTime("patternDateTime", reader, -1));
                    break;
                case "patternDecimal":
                    builder.pattern(parseDecimal("patternDecimal", reader, -1));
                    break;
                case "patternId":
                    builder.pattern((Id) parseString(Id.builder(), "patternId", reader, -1));
                    break;
                case "patternInstant":
                    builder.pattern(parseInstant("patternInstant", reader, -1));
                    break;
                case "patternInteger":
                    builder.pattern(parseInteger("patternInteger", reader, -1));
                    break;
                case "patternMarkdown":
                    builder.pattern((Markdown) parseString(Markdown.builder(), "patternMarkdown", reader, -1));
                    break;
                case "patternOid":
                    builder.pattern((Oid) parseUri(Oid.builder(), "patternOid", reader, -1));
                    break;
                case "patternPositiveInt":
                    builder.pattern((PositiveInt) parseInteger(PositiveInt.builder(), "patternPositiveInt", reader, -1));
                    break;
                case "patternString":
                    builder.pattern(parseString("patternString", reader, -1));
                    break;
                case "patternTime":
                    builder.pattern(parseTime("patternTime", reader, -1));
                    break;
                case "patternUnsignedInt":
                    builder.pattern((UnsignedInt) parseInteger(UnsignedInt.builder(), "patternUnsignedInt", reader, -1));
                    break;
                case "patternUri":
                    builder.pattern(parseUri("patternUri", reader, -1));
                    break;
                case "patternUrl":
                    builder.pattern((Url) parseUri(Url.builder(), "patternUrl", reader, -1));
                    break;
                case "patternUuid":
                    builder.pattern((Uuid) parseUri(Uuid.builder(), "patternUuid", reader, -1));
                    break;
                case "patternAddress":
                    builder.pattern(parseAddress("patternAddress", reader, -1));
                    break;
                case "patternAge":
                    builder.pattern((Age) parseQuantity(Age.builder(), "patternAge", reader, -1));
                    break;
                case "patternAnnotation":
                    builder.pattern(parseAnnotation("patternAnnotation", reader, -1));
                    break;
                case "patternAttachment":
                    builder.pattern(parseAttachment("patternAttachment", reader, -1));
                    break;
                case "patternCodeableConcept":
                    builder.pattern(parseCodeableConcept("patternCodeableConcept", reader, -1));
                    break;
                case "patternCoding":
                    builder.pattern(parseCoding("patternCoding", reader, -1));
                    break;
                case "patternContactPoint":
                    builder.pattern(parseContactPoint("patternContactPoint", reader, -1));
                    break;
                case "patternCount":
                    builder.pattern((Count) parseQuantity(Count.builder(), "patternCount", reader, -1));
                    break;
                case "patternDistance":
                    builder.pattern((Distance) parseQuantity(Distance.builder(), "patternDistance", reader, -1));
                    break;
                case "patternDuration":
                    builder.pattern((Duration) parseQuantity(Duration.builder(), "patternDuration", reader, -1));
                    break;
                case "patternHumanName":
                    builder.pattern(parseHumanName("patternHumanName", reader, -1));
                    break;
                case "patternIdentifier":
                    builder.pattern(parseIdentifier("patternIdentifier", reader, -1));
                    break;
                case "patternMoney":
                    builder.pattern(parseMoney("patternMoney", reader, -1));
                    break;
                case "patternPeriod":
                    builder.pattern(parsePeriod("patternPeriod", reader, -1));
                    break;
                case "patternQuantity":
                    builder.pattern(parseQuantity("patternQuantity", reader, -1));
                    break;
                case "patternRange":
                    builder.pattern(parseRange("patternRange", reader, -1));
                    break;
                case "patternRatio":
                    builder.pattern(parseRatio("patternRatio", reader, -1));
                    break;
                case "patternReference":
                    builder.pattern(parseReference("patternReference", reader, -1));
                    break;
                case "patternSampledData":
                    builder.pattern(parseSampledData("patternSampledData", reader, -1));
                    break;
                case "patternSignature":
                    builder.pattern(parseSignature("patternSignature", reader, -1));
                    break;
                case "patternTiming":
                    builder.pattern(parseTiming("patternTiming", reader, -1));
                    break;
                case "patternContactDetail":
                    builder.pattern(parseContactDetail("patternContactDetail", reader, -1));
                    break;
                case "patternContributor":
                    builder.pattern(parseContributor("patternContributor", reader, -1));
                    break;
                case "patternDataRequirement":
                    builder.pattern(parseDataRequirement("patternDataRequirement", reader, -1));
                    break;
                case "patternExpression":
                    builder.pattern(parseExpression("patternExpression", reader, -1));
                    break;
                case "patternParameterDefinition":
                    builder.pattern(parseParameterDefinition("patternParameterDefinition", reader, -1));
                    break;
                case "patternRelatedArtifact":
                    builder.pattern(parseRelatedArtifact("patternRelatedArtifact", reader, -1));
                    break;
                case "patternTriggerDefinition":
                    builder.pattern(parseTriggerDefinition("patternTriggerDefinition", reader, -1));
                    break;
                case "patternUsageContext":
                    builder.pattern(parseUsageContext("patternUsageContext", reader, -1));
                    break;
                case "patternDosage":
                    builder.pattern(parseDosage("patternDosage", reader, -1));
                    break;
                case "example":
                    builder.example(parseElementDefinitionExample("example", reader, exampleElementIndex++));
                    break;
                case "minValueDate":
                    builder.minValue(parseDate("minValueDate", reader, -1));
                    break;
                case "minValueDateTime":
                    builder.minValue(parseDateTime("minValueDateTime", reader, -1));
                    break;
                case "minValueInstant":
                    builder.minValue(parseInstant("minValueInstant", reader, -1));
                    break;
                case "minValueTime":
                    builder.minValue(parseTime("minValueTime", reader, -1));
                    break;
                case "minValueDecimal":
                    builder.minValue(parseDecimal("minValueDecimal", reader, -1));
                    break;
                case "minValueInteger":
                    builder.minValue(parseInteger("minValueInteger", reader, -1));
                    break;
                case "minValuePositiveInt":
                    builder.minValue((PositiveInt) parseInteger(PositiveInt.builder(), "minValuePositiveInt", reader, -1));
                    break;
                case "minValueUnsignedInt":
                    builder.minValue((UnsignedInt) parseInteger(UnsignedInt.builder(), "minValueUnsignedInt", reader, -1));
                    break;
                case "minValueQuantity":
                    builder.minValue(parseQuantity("minValueQuantity", reader, -1));
                    break;
                case "maxValueDate":
                    builder.maxValue(parseDate("maxValueDate", reader, -1));
                    break;
                case "maxValueDateTime":
                    builder.maxValue(parseDateTime("maxValueDateTime", reader, -1));
                    break;
                case "maxValueInstant":
                    builder.maxValue(parseInstant("maxValueInstant", reader, -1));
                    break;
                case "maxValueTime":
                    builder.maxValue(parseTime("maxValueTime", reader, -1));
                    break;
                case "maxValueDecimal":
                    builder.maxValue(parseDecimal("maxValueDecimal", reader, -1));
                    break;
                case "maxValueInteger":
                    builder.maxValue(parseInteger("maxValueInteger", reader, -1));
                    break;
                case "maxValuePositiveInt":
                    builder.maxValue((PositiveInt) parseInteger(PositiveInt.builder(), "maxValuePositiveInt", reader, -1));
                    break;
                case "maxValueUnsignedInt":
                    builder.maxValue((UnsignedInt) parseInteger(UnsignedInt.builder(), "maxValueUnsignedInt", reader, -1));
                    break;
                case "maxValueQuantity":
                    builder.maxValue(parseQuantity("maxValueQuantity", reader, -1));
                    break;
                case "maxLength":
                    builder.maxLength(parseInteger("maxLength", reader, -1));
                    break;
                case "condition":
                    builder.condition((Id) parseString(Id.builder(), "condition", reader, conditionElementIndex++));
                    break;
                case "constraint":
                    builder.constraint(parseElementDefinitionConstraint("constraint", reader, constraintElementIndex++));
                    break;
                case "mustSupport":
                    builder.mustSupport(parseBoolean("mustSupport", reader, -1));
                    break;
                case "isModifier":
                    builder.isModifier(parseBoolean("isModifier", reader, -1));
                    break;
                case "isModifierReason":
                    builder.isModifierReason(parseString("isModifierReason", reader, -1));
                    break;
                case "isSummary":
                    builder.isSummary(parseBoolean("isSummary", reader, -1));
                    break;
                case "binding":
                    builder.binding(parseElementDefinitionBinding("binding", reader, -1));
                    break;
                case "mapping":
                    builder.mapping(parseElementDefinitionMapping("mapping", reader, mappingElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Base parseElementDefinitionBase(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Base.Builder builder = ElementDefinition.Base.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "min":
                    builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Binding parseElementDefinitionBinding(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Binding.Builder builder = ElementDefinition.Binding.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "strength":
                    builder.strength((BindingStrength) parseString(BindingStrength.builder(), "strength", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "valueSet":
                    builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Constraint parseElementDefinitionConstraint(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Constraint.Builder builder = ElementDefinition.Constraint.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "key":
                    builder.key((Id) parseString(Id.builder(), "key", reader, -1));
                    break;
                case "requirements":
                    builder.requirements(parseString("requirements", reader, -1));
                    break;
                case "severity":
                    builder.severity((ConstraintSeverity) parseString(ConstraintSeverity.builder(), "severity", reader, -1));
                    break;
                case "human":
                    builder.human(parseString("human", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                case "xpath":
                    builder.xpath(parseString("xpath", reader, -1));
                    break;
                case "source":
                    builder.source((Canonical) parseUri(Canonical.builder(), "source", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Example parseElementDefinitionExample(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Example.Builder builder = ElementDefinition.Example.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "label":
                    builder.label(parseString("label", reader, -1));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueCanonical":
                    builder.value((Canonical) parseUri(Canonical.builder(), "valueCanonical", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueId":
                    builder.value((Id) parseString(Id.builder(), "valueId", reader, -1));
                    break;
                case "valueInstant":
                    builder.value(parseInstant("valueInstant", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueMarkdown":
                    builder.value((Markdown) parseString(Markdown.builder(), "valueMarkdown", reader, -1));
                    break;
                case "valueOid":
                    builder.value((Oid) parseUri(Oid.builder(), "valueOid", reader, -1));
                    break;
                case "valuePositiveInt":
                    builder.value((PositiveInt) parseInteger(PositiveInt.builder(), "valuePositiveInt", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueUnsignedInt":
                    builder.value((UnsignedInt) parseInteger(UnsignedInt.builder(), "valueUnsignedInt", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueUrl":
                    builder.value((Url) parseUri(Url.builder(), "valueUrl", reader, -1));
                    break;
                case "valueUuid":
                    builder.value((Uuid) parseUri(Uuid.builder(), "valueUuid", reader, -1));
                    break;
                case "valueAddress":
                    builder.value(parseAddress("valueAddress", reader, -1));
                    break;
                case "valueAge":
                    builder.value((Age) parseQuantity(Age.builder(), "valueAge", reader, -1));
                    break;
                case "valueAnnotation":
                    builder.value(parseAnnotation("valueAnnotation", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueContactPoint":
                    builder.value(parseContactPoint("valueContactPoint", reader, -1));
                    break;
                case "valueCount":
                    builder.value((Count) parseQuantity(Count.builder(), "valueCount", reader, -1));
                    break;
                case "valueDistance":
                    builder.value((Distance) parseQuantity(Distance.builder(), "valueDistance", reader, -1));
                    break;
                case "valueDuration":
                    builder.value((Duration) parseQuantity(Duration.builder(), "valueDuration", reader, -1));
                    break;
                case "valueHumanName":
                    builder.value(parseHumanName("valueHumanName", reader, -1));
                    break;
                case "valueIdentifier":
                    builder.value(parseIdentifier("valueIdentifier", reader, -1));
                    break;
                case "valueMoney":
                    builder.value(parseMoney("valueMoney", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueSignature":
                    builder.value(parseSignature("valueSignature", reader, -1));
                    break;
                case "valueTiming":
                    builder.value(parseTiming("valueTiming", reader, -1));
                    break;
                case "valueContactDetail":
                    builder.value(parseContactDetail("valueContactDetail", reader, -1));
                    break;
                case "valueContributor":
                    builder.value(parseContributor("valueContributor", reader, -1));
                    break;
                case "valueDataRequirement":
                    builder.value(parseDataRequirement("valueDataRequirement", reader, -1));
                    break;
                case "valueExpression":
                    builder.value(parseExpression("valueExpression", reader, -1));
                    break;
                case "valueParameterDefinition":
                    builder.value(parseParameterDefinition("valueParameterDefinition", reader, -1));
                    break;
                case "valueRelatedArtifact":
                    builder.value(parseRelatedArtifact("valueRelatedArtifact", reader, -1));
                    break;
                case "valueTriggerDefinition":
                    builder.value(parseTriggerDefinition("valueTriggerDefinition", reader, -1));
                    break;
                case "valueUsageContext":
                    builder.value(parseUsageContext("valueUsageContext", reader, -1));
                    break;
                case "valueDosage":
                    builder.value(parseDosage("valueDosage", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Mapping parseElementDefinitionMapping(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Mapping.Builder builder = ElementDefinition.Mapping.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identity":
                    builder.identity((Id) parseString(Id.builder(), "identity", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "map":
                    builder.map(parseString("map", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Slicing parseElementDefinitionSlicing(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Slicing.Builder builder = ElementDefinition.Slicing.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, discriminatorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "discriminator":
                    builder.discriminator(parseElementDefinitionSlicingDiscriminator("discriminator", reader, discriminatorElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "ordered":
                    builder.ordered(parseBoolean("ordered", reader, -1));
                    break;
                case "rules":
                    builder.rules((SlicingRules) parseString(SlicingRules.builder(), "rules", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Slicing.Discriminator parseElementDefinitionSlicingDiscriminator(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Slicing.Discriminator.Builder builder = ElementDefinition.Slicing.Discriminator.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((DiscriminatorType) parseString(DiscriminatorType.builder(), "type", reader, -1));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ElementDefinition.Type parseElementDefinitionType(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ElementDefinition.Type.Builder builder = ElementDefinition.Type.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, profileElementIndex = 0, targetProfileElementIndex = 0, aggregationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseUri("code", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, profileElementIndex++));
                    break;
                case "targetProfile":
                    builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", reader, targetProfileElementIndex++));
                    break;
                case "aggregation":
                    builder.aggregation((AggregationMode) parseString(AggregationMode.builder(), "aggregation", reader, aggregationElementIndex++));
                    break;
                case "versioning":
                    builder.versioning((ReferenceVersionRules) parseString(ReferenceVersionRules.builder(), "versioning", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter parseEncounter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.Builder builder = Encounter.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, statusHistoryElementIndex = 0, classHistoryElementIndex = 0, typeElementIndex = 0, episodeOfCareElementIndex = 0, basedOnElementIndex = 0, participantElementIndex = 0, appointmentElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, diagnosisElementIndex = 0, accountElementIndex = 0, locationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EncounterStatus) parseString(EncounterStatus.builder(), "status", reader, -1));
                    break;
                case "statusHistory":
                    builder.statusHistory(parseEncounterStatusHistory("statusHistory", reader, statusHistoryElementIndex++));
                    break;
                case "class":
                    builder.clazz(parseCoding("class", reader, -1));
                    break;
                case "classHistory":
                    builder.classHistory(parseEncounterClassHistory("classHistory", reader, classHistoryElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "serviceType":
                    builder.serviceType(parseCodeableConcept("serviceType", reader, -1));
                    break;
                case "priority":
                    builder.priority(parseCodeableConcept("priority", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "episodeOfCare":
                    builder.episodeOfCare(parseReference("episodeOfCare", reader, episodeOfCareElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "participant":
                    builder.participant(parseEncounterParticipant("participant", reader, participantElementIndex++));
                    break;
                case "appointment":
                    builder.appointment(parseReference("appointment", reader, appointmentElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "length":
                    builder.length((Duration) parseQuantity(Duration.builder(), "length", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "diagnosis":
                    builder.diagnosis(parseEncounterDiagnosis("diagnosis", reader, diagnosisElementIndex++));
                    break;
                case "account":
                    builder.account(parseReference("account", reader, accountElementIndex++));
                    break;
                case "hospitalization":
                    builder.hospitalization(parseEncounterHospitalization("hospitalization", reader, -1));
                    break;
                case "location":
                    builder.location(parseEncounterLocation("location", reader, locationElementIndex++));
                    break;
                case "serviceProvider":
                    builder.serviceProvider(parseReference("serviceProvider", reader, -1));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter.ClassHistory parseEncounterClassHistory(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.ClassHistory.Builder builder = Encounter.ClassHistory.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "class":
                    builder.clazz(parseCoding("class", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter.Diagnosis parseEncounterDiagnosis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.Diagnosis.Builder builder = Encounter.Diagnosis.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseReference("condition", reader, -1));
                    break;
                case "use":
                    builder.use(parseCodeableConcept("use", reader, -1));
                    break;
                case "rank":
                    builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter.Hospitalization parseEncounterHospitalization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.Hospitalization.Builder builder = Encounter.Hospitalization.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, dietPreferenceElementIndex = 0, specialCourtesyElementIndex = 0, specialArrangementElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "preAdmissionIdentifier":
                    builder.preAdmissionIdentifier(parseIdentifier("preAdmissionIdentifier", reader, -1));
                    break;
                case "origin":
                    builder.origin(parseReference("origin", reader, -1));
                    break;
                case "admitSource":
                    builder.admitSource(parseCodeableConcept("admitSource", reader, -1));
                    break;
                case "reAdmission":
                    builder.reAdmission(parseCodeableConcept("reAdmission", reader, -1));
                    break;
                case "dietPreference":
                    builder.dietPreference(parseCodeableConcept("dietPreference", reader, dietPreferenceElementIndex++));
                    break;
                case "specialCourtesy":
                    builder.specialCourtesy(parseCodeableConcept("specialCourtesy", reader, specialCourtesyElementIndex++));
                    break;
                case "specialArrangement":
                    builder.specialArrangement(parseCodeableConcept("specialArrangement", reader, specialArrangementElementIndex++));
                    break;
                case "destination":
                    builder.destination(parseReference("destination", reader, -1));
                    break;
                case "dischargeDisposition":
                    builder.dischargeDisposition(parseCodeableConcept("dischargeDisposition", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter.Location parseEncounterLocation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.Location.Builder builder = Encounter.Location.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "status":
                    builder.status((EncounterLocationStatus) parseString(EncounterLocationStatus.builder(), "status", reader, -1));
                    break;
                case "physicalType":
                    builder.physicalType(parseCodeableConcept("physicalType", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter.Participant parseEncounterParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.Participant.Builder builder = Encounter.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "individual":
                    builder.individual(parseReference("individual", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Encounter.StatusHistory parseEncounterStatusHistory(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Encounter.StatusHistory.Builder builder = Encounter.StatusHistory.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "status":
                    builder.status((EncounterStatus) parseString(EncounterStatus.builder(), "status", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Endpoint parseEndpoint(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Endpoint.Builder builder = Endpoint.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, payloadTypeElementIndex = 0, payloadMimeTypeElementIndex = 0, headerElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EndpointStatus) parseString(EndpointStatus.builder(), "status", reader, -1));
                    break;
                case "connectionType":
                    builder.connectionType(parseCoding("connectionType", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "managingOrganization":
                    builder.managingOrganization(parseReference("managingOrganization", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactPoint("contact", reader, contactElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "payloadType":
                    builder.payloadType(parseCodeableConcept("payloadType", reader, payloadTypeElementIndex++));
                    break;
                case "payloadMimeType":
                    builder.payloadMimeType((Code) parseString(Code.builder(), "payloadMimeType", reader, payloadMimeTypeElementIndex++));
                    break;
                case "address":
                    builder.address((Url) parseUri(Url.builder(), "address", reader, -1));
                    break;
                case "header":
                    builder.header(parseString("header", reader, headerElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EnrollmentRequest parseEnrollmentRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EnrollmentRequest.Builder builder = EnrollmentRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EnrollmentRequestStatus) parseString(EnrollmentRequestStatus.builder(), "status", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "insurer":
                    builder.insurer(parseReference("insurer", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "candidate":
                    builder.candidate(parseReference("candidate", reader, -1));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EnrollmentResponse parseEnrollmentResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EnrollmentResponse.Builder builder = EnrollmentResponse.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EnrollmentResponseStatus) parseString(EnrollmentResponseStatus.builder(), "status", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "outcome":
                    builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", reader, -1));
                    break;
                case "disposition":
                    builder.disposition(parseString("disposition", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "organization":
                    builder.organization(parseReference("organization", reader, -1));
                    break;
                case "requestProvider":
                    builder.requestProvider(parseReference("requestProvider", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EpisodeOfCare parseEpisodeOfCare(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EpisodeOfCare.Builder builder = EpisodeOfCare.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, statusHistoryElementIndex = 0, typeElementIndex = 0, diagnosisElementIndex = 0, referralRequestElementIndex = 0, teamElementIndex = 0, accountElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", reader, -1));
                    break;
                case "statusHistory":
                    builder.statusHistory(parseEpisodeOfCareStatusHistory("statusHistory", reader, statusHistoryElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "diagnosis":
                    builder.diagnosis(parseEpisodeOfCareDiagnosis("diagnosis", reader, diagnosisElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "managingOrganization":
                    builder.managingOrganization(parseReference("managingOrganization", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "referralRequest":
                    builder.referralRequest(parseReference("referralRequest", reader, referralRequestElementIndex++));
                    break;
                case "careManager":
                    builder.careManager(parseReference("careManager", reader, -1));
                    break;
                case "team":
                    builder.team(parseReference("team", reader, teamElementIndex++));
                    break;
                case "account":
                    builder.account(parseReference("account", reader, accountElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EpisodeOfCare.Diagnosis parseEpisodeOfCareDiagnosis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EpisodeOfCare.Diagnosis.Builder builder = EpisodeOfCare.Diagnosis.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseReference("condition", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "rank":
                    builder.rank((PositiveInt) parseInteger(PositiveInt.builder(), "rank", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EpisodeOfCare.StatusHistory parseEpisodeOfCareStatusHistory(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EpisodeOfCare.StatusHistory.Builder builder = EpisodeOfCare.StatusHistory.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "status":
                    builder.status((EpisodeOfCareStatus) parseString(EpisodeOfCareStatus.builder(), "status", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EventDefinition parseEventDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EventDefinition.Builder builder = EventDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, triggerElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "trigger":
                    builder.trigger(parseTriggerDefinition("trigger", reader, triggerElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Evidence parseEvidence(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Evidence.Builder builder = Evidence.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, noteElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, exposureVariantElementIndex = 0, outcomeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "shortTitle":
                    builder.shortTitle(parseString("shortTitle", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "exposureBackground":
                    builder.exposureBackground(parseReference("exposureBackground", reader, -1));
                    break;
                case "exposureVariant":
                    builder.exposureVariant(parseReference("exposureVariant", reader, exposureVariantElementIndex++));
                    break;
                case "outcome":
                    builder.outcome(parseReference("outcome", reader, outcomeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EvidenceVariable parseEvidenceVariable(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EvidenceVariable.Builder builder = EvidenceVariable.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, noteElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, characteristicElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "shortTitle":
                    builder.shortTitle(parseString("shortTitle", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "type":
                    builder.type((EvidenceVariableType) parseString(EvidenceVariableType.builder(), "type", reader, -1));
                    break;
                case "characteristic":
                    builder.characteristic(parseEvidenceVariableCharacteristic("characteristic", reader, characteristicElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private EvidenceVariable.Characteristic parseEvidenceVariableCharacteristic(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        EvidenceVariable.Characteristic.Builder builder = EvidenceVariable.Characteristic.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, usageContextElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "definitionReference":
                    builder.definition(parseReference("definitionReference", reader, -1));
                    break;
                case "definitionCanonical":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definitionCanonical", reader, -1));
                    break;
                case "definitionCodeableConcept":
                    builder.definition(parseCodeableConcept("definitionCodeableConcept", reader, -1));
                    break;
                case "definitionExpression":
                    builder.definition(parseExpression("definitionExpression", reader, -1));
                    break;
                case "definitionDataRequirement":
                    builder.definition(parseDataRequirement("definitionDataRequirement", reader, -1));
                    break;
                case "definitionTriggerDefinition":
                    builder.definition(parseTriggerDefinition("definitionTriggerDefinition", reader, -1));
                    break;
                case "usageContext":
                    builder.usageContext(parseUsageContext("usageContext", reader, usageContextElementIndex++));
                    break;
                case "exclude":
                    builder.exclude(parseBoolean("exclude", reader, -1));
                    break;
                case "participantEffectiveDateTime":
                    builder.participantEffective(parseDateTime("participantEffectiveDateTime", reader, -1));
                    break;
                case "participantEffectivePeriod":
                    builder.participantEffective(parsePeriod("participantEffectivePeriod", reader, -1));
                    break;
                case "participantEffectiveDuration":
                    builder.participantEffective((Duration) parseQuantity(Duration.builder(), "participantEffectiveDuration", reader, -1));
                    break;
                case "participantEffectiveTiming":
                    builder.participantEffective(parseTiming("participantEffectiveTiming", reader, -1));
                    break;
                case "timeFromStart":
                    builder.timeFromStart((Duration) parseQuantity(Duration.builder(), "timeFromStart", reader, -1));
                    break;
                case "groupMeasure":
                    builder.groupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "groupMeasure", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario parseExampleScenario(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Builder builder = ExampleScenario.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, actorElementIndex = 0, instanceElementIndex = 0, processElementIndex = 0, workflowElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseExampleScenarioActor("actor", reader, actorElementIndex++));
                    break;
                case "instance":
                    builder.instance(parseExampleScenarioInstance("instance", reader, instanceElementIndex++));
                    break;
                case "process":
                    builder.process(parseExampleScenarioProcess("process", reader, processElementIndex++));
                    break;
                case "workflow":
                    builder.workflow((Canonical) parseUri(Canonical.builder(), "workflow", reader, workflowElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Actor parseExampleScenarioActor(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Actor.Builder builder = ExampleScenario.Actor.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "actorId":
                    builder.actorId(parseString("actorId", reader, -1));
                    break;
                case "type":
                    builder.type((ExampleScenarioActorType) parseString(ExampleScenarioActorType.builder(), "type", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Instance parseExampleScenarioInstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Instance.Builder builder = ExampleScenario.Instance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, versionElementIndex = 0, containedInstanceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "resourceId":
                    builder.resourceId(parseString("resourceId", reader, -1));
                    break;
                case "resourceType":
                    builder.resourceType((FHIRResourceType) parseString(FHIRResourceType.builder(), "resourceType", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "version":
                    builder.version(parseExampleScenarioInstanceVersion("version", reader, versionElementIndex++));
                    break;
                case "containedInstance":
                    builder.containedInstance(parseExampleScenarioInstanceContainedInstance("containedInstance", reader, containedInstanceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Instance.ContainedInstance parseExampleScenarioInstanceContainedInstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Instance.ContainedInstance.Builder builder = ExampleScenario.Instance.ContainedInstance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "resourceId":
                    builder.resourceId(parseString("resourceId", reader, -1));
                    break;
                case "versionId":
                    builder.versionId(parseString("versionId", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Instance.Version parseExampleScenarioInstanceVersion(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Instance.Version.Builder builder = ExampleScenario.Instance.Version.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "versionId":
                    builder.versionId(parseString("versionId", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Process parseExampleScenarioProcess(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Process.Builder builder = ExampleScenario.Process.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, stepElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "preConditions":
                    builder.preConditions((Markdown) parseString(Markdown.builder(), "preConditions", reader, -1));
                    break;
                case "postConditions":
                    builder.postConditions((Markdown) parseString(Markdown.builder(), "postConditions", reader, -1));
                    break;
                case "step":
                    builder.step(parseExampleScenarioProcessStep("step", reader, stepElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Process.Step parseExampleScenarioProcessStep(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Process.Step.Builder builder = ExampleScenario.Process.Step.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, processElementIndex = 0, alternativeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "process":
                    builder.process(parseExampleScenarioProcess("process", reader, processElementIndex++));
                    break;
                case "pause":
                    builder.pause(parseBoolean("pause", reader, -1));
                    break;
                case "operation":
                    builder.operation(parseExampleScenarioProcessStepOperation("operation", reader, -1));
                    break;
                case "alternative":
                    builder.alternative(parseExampleScenarioProcessStepAlternative("alternative", reader, alternativeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Process.Step.Alternative parseExampleScenarioProcessStepAlternative(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Process.Step.Alternative.Builder builder = ExampleScenario.Process.Step.Alternative.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, stepElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "step":
                    builder.step(parseExampleScenarioProcessStep("step", reader, stepElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExampleScenario.Process.Step.Operation parseExampleScenarioProcessStepOperation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExampleScenario.Process.Step.Operation.Builder builder = ExampleScenario.Process.Step.Operation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "number":
                    builder.number(parseString("number", reader, -1));
                    break;
                case "type":
                    builder.type(parseString("type", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "initiator":
                    builder.initiator(parseString("initiator", reader, -1));
                    break;
                case "receiver":
                    builder.receiver(parseString("receiver", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "initiatorActive":
                    builder.initiatorActive(parseBoolean("initiatorActive", reader, -1));
                    break;
                case "receiverActive":
                    builder.receiverActive(parseBoolean("receiverActive", reader, -1));
                    break;
                case "request":
                    builder.request(parseExampleScenarioInstanceContainedInstance("request", reader, -1));
                    break;
                case "response":
                    builder.response(parseExampleScenarioInstanceContainedInstance("response", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit parseExplanationOfBenefit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Builder builder = ExplanationOfBenefit.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, relatedElementIndex = 0, preAuthRefElementIndex = 0, preAuthRefPeriodElementIndex = 0, careTeamElementIndex = 0, supportingInfoElementIndex = 0, diagnosisElementIndex = 0, procedureElementIndex = 0, insuranceElementIndex = 0, itemElementIndex = 0, addItemElementIndex = 0, adjudicationElementIndex = 0, totalElementIndex = 0, processNoteElementIndex = 0, benefitBalanceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ExplanationOfBenefitStatus) parseString(ExplanationOfBenefitStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subType":
                    builder.subType(parseCodeableConcept("subType", reader, -1));
                    break;
                case "use":
                    builder.use((Use) parseString(Use.builder(), "use", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "billablePeriod":
                    builder.billablePeriod(parsePeriod("billablePeriod", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "enterer":
                    builder.enterer(parseReference("enterer", reader, -1));
                    break;
                case "insurer":
                    builder.insurer(parseReference("insurer", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "priority":
                    builder.priority(parseCodeableConcept("priority", reader, -1));
                    break;
                case "fundsReserveRequested":
                    builder.fundsReserveRequested(parseCodeableConcept("fundsReserveRequested", reader, -1));
                    break;
                case "fundsReserve":
                    builder.fundsReserve(parseCodeableConcept("fundsReserve", reader, -1));
                    break;
                case "related":
                    builder.related(parseExplanationOfBenefitRelated("related", reader, relatedElementIndex++));
                    break;
                case "prescription":
                    builder.prescription(parseReference("prescription", reader, -1));
                    break;
                case "originalPrescription":
                    builder.originalPrescription(parseReference("originalPrescription", reader, -1));
                    break;
                case "payee":
                    builder.payee(parseExplanationOfBenefitPayee("payee", reader, -1));
                    break;
                case "referral":
                    builder.referral(parseReference("referral", reader, -1));
                    break;
                case "facility":
                    builder.facility(parseReference("facility", reader, -1));
                    break;
                case "claim":
                    builder.claim(parseReference("claim", reader, -1));
                    break;
                case "claimResponse":
                    builder.claimResponse(parseReference("claimResponse", reader, -1));
                    break;
                case "outcome":
                    builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", reader, -1));
                    break;
                case "disposition":
                    builder.disposition(parseString("disposition", reader, -1));
                    break;
                case "preAuthRef":
                    builder.preAuthRef(parseString("preAuthRef", reader, preAuthRefElementIndex++));
                    break;
                case "preAuthRefPeriod":
                    builder.preAuthRefPeriod(parsePeriod("preAuthRefPeriod", reader, preAuthRefPeriodElementIndex++));
                    break;
                case "careTeam":
                    builder.careTeam(parseExplanationOfBenefitCareTeam("careTeam", reader, careTeamElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseExplanationOfBenefitSupportingInfo("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "diagnosis":
                    builder.diagnosis(parseExplanationOfBenefitDiagnosis("diagnosis", reader, diagnosisElementIndex++));
                    break;
                case "procedure":
                    builder.procedure(parseExplanationOfBenefitProcedure("procedure", reader, procedureElementIndex++));
                    break;
                case "precedence":
                    builder.precedence((PositiveInt) parseInteger(PositiveInt.builder(), "precedence", reader, -1));
                    break;
                case "insurance":
                    builder.insurance(parseExplanationOfBenefitInsurance("insurance", reader, insuranceElementIndex++));
                    break;
                case "accident":
                    builder.accident(parseExplanationOfBenefitAccident("accident", reader, -1));
                    break;
                case "item":
                    builder.item(parseExplanationOfBenefitItem("item", reader, itemElementIndex++));
                    break;
                case "addItem":
                    builder.addItem(parseExplanationOfBenefitAddItem("addItem", reader, addItemElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "total":
                    builder.total(parseExplanationOfBenefitTotal("total", reader, totalElementIndex++));
                    break;
                case "payment":
                    builder.payment(parseExplanationOfBenefitPayment("payment", reader, -1));
                    break;
                case "formCode":
                    builder.formCode(parseCodeableConcept("formCode", reader, -1));
                    break;
                case "form":
                    builder.form(parseAttachment("form", reader, -1));
                    break;
                case "processNote":
                    builder.processNote(parseExplanationOfBenefitProcessNote("processNote", reader, processNoteElementIndex++));
                    break;
                case "benefitPeriod":
                    builder.benefitPeriod(parsePeriod("benefitPeriod", reader, -1));
                    break;
                case "benefitBalance":
                    builder.benefitBalance(parseExplanationOfBenefitBenefitBalance("benefitBalance", reader, benefitBalanceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Accident parseExplanationOfBenefitAccident(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Accident.Builder builder = ExplanationOfBenefit.Accident.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "date":
                    builder.date(parseDate("date", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "locationAddress":
                    builder.location(parseAddress("locationAddress", reader, -1));
                    break;
                case "locationReference":
                    builder.location(parseReference("locationReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.AddItem parseExplanationOfBenefitAddItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.AddItem.Builder builder = ExplanationOfBenefit.AddItem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, itemSequenceElementIndex = 0, detailSequenceElementIndex = 0, subDetailSequenceElementIndex = 0, providerElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, subSiteElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemSequence":
                    builder.itemSequence((PositiveInt) parseInteger(PositiveInt.builder(), "itemSequence", reader, itemSequenceElementIndex++));
                    break;
                case "detailSequence":
                    builder.detailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "detailSequence", reader, detailSequenceElementIndex++));
                    break;
                case "subDetailSequence":
                    builder.subDetailSequence((PositiveInt) parseInteger(PositiveInt.builder(), "subDetailSequence", reader, subDetailSequenceElementIndex++));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, providerElementIndex++));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "servicedDate":
                    builder.serviced(parseDate("servicedDate", reader, -1));
                    break;
                case "servicedPeriod":
                    builder.serviced(parsePeriod("servicedPeriod", reader, -1));
                    break;
                case "locationCodeableConcept":
                    builder.location(parseCodeableConcept("locationCodeableConcept", reader, -1));
                    break;
                case "locationAddress":
                    builder.location(parseAddress("locationAddress", reader, -1));
                    break;
                case "locationReference":
                    builder.location(parseReference("locationReference", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "subSite":
                    builder.subSite(parseCodeableConcept("subSite", reader, subSiteElementIndex++));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseExplanationOfBenefitAddItemDetail("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.AddItem.Detail parseExplanationOfBenefitAddItemDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.AddItem.Detail.Builder builder = ExplanationOfBenefit.AddItem.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, subDetailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "subDetail":
                    builder.subDetail(parseExplanationOfBenefitAddItemDetailSubDetail("subDetail", reader, subDetailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.AddItem.Detail.SubDetail parseExplanationOfBenefitAddItemDetailSubDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.AddItem.Detail.SubDetail.Builder builder = ExplanationOfBenefit.AddItem.Detail.SubDetail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.BenefitBalance parseExplanationOfBenefitBenefitBalance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.BenefitBalance.Builder builder = ExplanationOfBenefit.BenefitBalance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, financialElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "excluded":
                    builder.excluded(parseBoolean("excluded", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "network":
                    builder.network(parseCodeableConcept("network", reader, -1));
                    break;
                case "unit":
                    builder.unit(parseCodeableConcept("unit", reader, -1));
                    break;
                case "term":
                    builder.term(parseCodeableConcept("term", reader, -1));
                    break;
                case "financial":
                    builder.financial(parseExplanationOfBenefitBenefitBalanceFinancial("financial", reader, financialElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.BenefitBalance.Financial parseExplanationOfBenefitBenefitBalanceFinancial(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.BenefitBalance.Financial.Builder builder = ExplanationOfBenefit.BenefitBalance.Financial.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "allowedUnsignedInt":
                    builder.allowed((UnsignedInt) parseInteger(UnsignedInt.builder(), "allowedUnsignedInt", reader, -1));
                    break;
                case "allowedString":
                    builder.allowed(parseString("allowedString", reader, -1));
                    break;
                case "allowedMoney":
                    builder.allowed(parseMoney("allowedMoney", reader, -1));
                    break;
                case "usedUnsignedInt":
                    builder.used((UnsignedInt) parseInteger(UnsignedInt.builder(), "usedUnsignedInt", reader, -1));
                    break;
                case "usedMoney":
                    builder.used(parseMoney("usedMoney", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.CareTeam parseExplanationOfBenefitCareTeam(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.CareTeam.Builder builder = ExplanationOfBenefit.CareTeam.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "responsible":
                    builder.responsible(parseBoolean("responsible", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "qualification":
                    builder.qualification(parseCodeableConcept("qualification", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Diagnosis parseExplanationOfBenefitDiagnosis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Diagnosis.Builder builder = ExplanationOfBenefit.Diagnosis.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "diagnosisCodeableConcept":
                    builder.diagnosis(parseCodeableConcept("diagnosisCodeableConcept", reader, -1));
                    break;
                case "diagnosisReference":
                    builder.diagnosis(parseReference("diagnosisReference", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "onAdmission":
                    builder.onAdmission(parseCodeableConcept("onAdmission", reader, -1));
                    break;
                case "packageCode":
                    builder.packageCode(parseCodeableConcept("packageCode", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Insurance parseExplanationOfBenefitInsurance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Insurance.Builder builder = ExplanationOfBenefit.Insurance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, preAuthRefElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "focal":
                    builder.focal(parseBoolean("focal", reader, -1));
                    break;
                case "coverage":
                    builder.coverage(parseReference("coverage", reader, -1));
                    break;
                case "preAuthRef":
                    builder.preAuthRef(parseString("preAuthRef", reader, preAuthRefElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Item parseExplanationOfBenefitItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Item.Builder builder = ExplanationOfBenefit.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, careTeamSequenceElementIndex = 0, diagnosisSequenceElementIndex = 0, procedureSequenceElementIndex = 0, informationSequenceElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, udiElementIndex = 0, subSiteElementIndex = 0, encounterElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, detailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "careTeamSequence":
                    builder.careTeamSequence((PositiveInt) parseInteger(PositiveInt.builder(), "careTeamSequence", reader, careTeamSequenceElementIndex++));
                    break;
                case "diagnosisSequence":
                    builder.diagnosisSequence((PositiveInt) parseInteger(PositiveInt.builder(), "diagnosisSequence", reader, diagnosisSequenceElementIndex++));
                    break;
                case "procedureSequence":
                    builder.procedureSequence((PositiveInt) parseInteger(PositiveInt.builder(), "procedureSequence", reader, procedureSequenceElementIndex++));
                    break;
                case "informationSequence":
                    builder.informationSequence((PositiveInt) parseInteger(PositiveInt.builder(), "informationSequence", reader, informationSequenceElementIndex++));
                    break;
                case "revenue":
                    builder.revenue(parseCodeableConcept("revenue", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "servicedDate":
                    builder.serviced(parseDate("servicedDate", reader, -1));
                    break;
                case "servicedPeriod":
                    builder.serviced(parsePeriod("servicedPeriod", reader, -1));
                    break;
                case "locationCodeableConcept":
                    builder.location(parseCodeableConcept("locationCodeableConcept", reader, -1));
                    break;
                case "locationAddress":
                    builder.location(parseAddress("locationAddress", reader, -1));
                    break;
                case "locationReference":
                    builder.location(parseReference("locationReference", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "subSite":
                    builder.subSite(parseCodeableConcept("subSite", reader, subSiteElementIndex++));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, encounterElementIndex++));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "detail":
                    builder.detail(parseExplanationOfBenefitItemDetail("detail", reader, detailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Item.Adjudication parseExplanationOfBenefitItemAdjudication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Item.Adjudication.Builder builder = ExplanationOfBenefit.Item.Adjudication.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                case "value":
                    builder.value(parseDecimal("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Item.Detail parseExplanationOfBenefitItemDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Item.Detail.Builder builder = ExplanationOfBenefit.Item.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, udiElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0, subDetailElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "revenue":
                    builder.revenue(parseCodeableConcept("revenue", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                case "subDetail":
                    builder.subDetail(parseExplanationOfBenefitItemDetailSubDetail("subDetail", reader, subDetailElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Item.Detail.SubDetail parseExplanationOfBenefitItemDetailSubDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Item.Detail.SubDetail.Builder builder = ExplanationOfBenefit.Item.Detail.SubDetail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, modifierElementIndex = 0, programCodeElementIndex = 0, udiElementIndex = 0, noteNumberElementIndex = 0, adjudicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "revenue":
                    builder.revenue(parseCodeableConcept("revenue", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "productOrService":
                    builder.productOrService(parseCodeableConcept("productOrService", reader, -1));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, modifierElementIndex++));
                    break;
                case "programCode":
                    builder.programCode(parseCodeableConcept("programCode", reader, programCodeElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "unitPrice":
                    builder.unitPrice(parseMoney("unitPrice", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "net":
                    builder.net(parseMoney("net", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                case "noteNumber":
                    builder.noteNumber((PositiveInt) parseInteger(PositiveInt.builder(), "noteNumber", reader, noteNumberElementIndex++));
                    break;
                case "adjudication":
                    builder.adjudication(parseExplanationOfBenefitItemAdjudication("adjudication", reader, adjudicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Payee parseExplanationOfBenefitPayee(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Payee.Builder builder = ExplanationOfBenefit.Payee.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "party":
                    builder.party(parseReference("party", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Payment parseExplanationOfBenefitPayment(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Payment.Builder builder = ExplanationOfBenefit.Payment.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "adjustment":
                    builder.adjustment(parseMoney("adjustment", reader, -1));
                    break;
                case "adjustmentReason":
                    builder.adjustmentReason(parseCodeableConcept("adjustmentReason", reader, -1));
                    break;
                case "date":
                    builder.date(parseDate("date", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Procedure parseExplanationOfBenefitProcedure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Procedure.Builder builder = ExplanationOfBenefit.Procedure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0, udiElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "procedureCodeableConcept":
                    builder.procedure(parseCodeableConcept("procedureCodeableConcept", reader, -1));
                    break;
                case "procedureReference":
                    builder.procedure(parseReference("procedureReference", reader, -1));
                    break;
                case "udi":
                    builder.udi(parseReference("udi", reader, udiElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.ProcessNote parseExplanationOfBenefitProcessNote(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.ProcessNote.Builder builder = ExplanationOfBenefit.ProcessNote.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "number":
                    builder.number((PositiveInt) parseInteger(PositiveInt.builder(), "number", reader, -1));
                    break;
                case "type":
                    builder.type((NoteType) parseString(NoteType.builder(), "type", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "language":
                    builder.language(parseCodeableConcept("language", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Related parseExplanationOfBenefitRelated(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Related.Builder builder = ExplanationOfBenefit.Related.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "claim":
                    builder.claim(parseReference("claim", reader, -1));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseIdentifier("reference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.SupportingInfo parseExplanationOfBenefitSupportingInfo(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.SupportingInfo.Builder builder = ExplanationOfBenefit.SupportingInfo.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "timingDate":
                    builder.timing(parseDate("timingDate", reader, -1));
                    break;
                case "timingPeriod":
                    builder.timing(parsePeriod("timingPeriod", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCoding("reason", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ExplanationOfBenefit.Total parseExplanationOfBenefitTotal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ExplanationOfBenefit.Total.Builder builder = ExplanationOfBenefit.Total.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Expression parseExpression(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Expression.Builder builder = Expression.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "name":
                    builder.name((Id) parseString(Id.builder(), "name", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseUri("reference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Extension parseExtension(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Extension.Builder builder = Extension.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String url = reader.getAttributeValue(null, "url");
        if (url != null) {
            builder.url(url);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueCanonical":
                    builder.value((Canonical) parseUri(Canonical.builder(), "valueCanonical", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueId":
                    builder.value((Id) parseString(Id.builder(), "valueId", reader, -1));
                    break;
                case "valueInstant":
                    builder.value(parseInstant("valueInstant", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueMarkdown":
                    builder.value((Markdown) parseString(Markdown.builder(), "valueMarkdown", reader, -1));
                    break;
                case "valueOid":
                    builder.value((Oid) parseUri(Oid.builder(), "valueOid", reader, -1));
                    break;
                case "valuePositiveInt":
                    builder.value((PositiveInt) parseInteger(PositiveInt.builder(), "valuePositiveInt", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueUnsignedInt":
                    builder.value((UnsignedInt) parseInteger(UnsignedInt.builder(), "valueUnsignedInt", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueUrl":
                    builder.value((Url) parseUri(Url.builder(), "valueUrl", reader, -1));
                    break;
                case "valueUuid":
                    builder.value((Uuid) parseUri(Uuid.builder(), "valueUuid", reader, -1));
                    break;
                case "valueAddress":
                    builder.value(parseAddress("valueAddress", reader, -1));
                    break;
                case "valueAge":
                    builder.value((Age) parseQuantity(Age.builder(), "valueAge", reader, -1));
                    break;
                case "valueAnnotation":
                    builder.value(parseAnnotation("valueAnnotation", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueContactPoint":
                    builder.value(parseContactPoint("valueContactPoint", reader, -1));
                    break;
                case "valueCount":
                    builder.value((Count) parseQuantity(Count.builder(), "valueCount", reader, -1));
                    break;
                case "valueDistance":
                    builder.value((Distance) parseQuantity(Distance.builder(), "valueDistance", reader, -1));
                    break;
                case "valueDuration":
                    builder.value((Duration) parseQuantity(Duration.builder(), "valueDuration", reader, -1));
                    break;
                case "valueHumanName":
                    builder.value(parseHumanName("valueHumanName", reader, -1));
                    break;
                case "valueIdentifier":
                    builder.value(parseIdentifier("valueIdentifier", reader, -1));
                    break;
                case "valueMoney":
                    builder.value(parseMoney("valueMoney", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueSignature":
                    builder.value(parseSignature("valueSignature", reader, -1));
                    break;
                case "valueTiming":
                    builder.value(parseTiming("valueTiming", reader, -1));
                    break;
                case "valueContactDetail":
                    builder.value(parseContactDetail("valueContactDetail", reader, -1));
                    break;
                case "valueContributor":
                    builder.value(parseContributor("valueContributor", reader, -1));
                    break;
                case "valueDataRequirement":
                    builder.value(parseDataRequirement("valueDataRequirement", reader, -1));
                    break;
                case "valueExpression":
                    builder.value(parseExpression("valueExpression", reader, -1));
                    break;
                case "valueParameterDefinition":
                    builder.value(parseParameterDefinition("valueParameterDefinition", reader, -1));
                    break;
                case "valueRelatedArtifact":
                    builder.value(parseRelatedArtifact("valueRelatedArtifact", reader, -1));
                    break;
                case "valueTriggerDefinition":
                    builder.value(parseTriggerDefinition("valueTriggerDefinition", reader, -1));
                    break;
                case "valueUsageContext":
                    builder.value(parseUsageContext("valueUsageContext", reader, -1));
                    break;
                case "valueDosage":
                    builder.value(parseDosage("valueDosage", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private FamilyMemberHistory parseFamilyMemberHistory(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        FamilyMemberHistory.Builder builder = FamilyMemberHistory.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0, conditionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "status":
                    builder.status((FamilyHistoryStatus) parseString(FamilyHistoryStatus.builder(), "status", reader, -1));
                    break;
                case "dataAbsentReason":
                    builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, -1));
                    break;
                case "sex":
                    builder.sex(parseCodeableConcept("sex", reader, -1));
                    break;
                case "bornPeriod":
                    builder.born(parsePeriod("bornPeriod", reader, -1));
                    break;
                case "bornDate":
                    builder.born(parseDate("bornDate", reader, -1));
                    break;
                case "bornString":
                    builder.born(parseString("bornString", reader, -1));
                    break;
                case "ageAge":
                    builder.age((Age) parseQuantity(Age.builder(), "ageAge", reader, -1));
                    break;
                case "ageRange":
                    builder.age(parseRange("ageRange", reader, -1));
                    break;
                case "ageString":
                    builder.age(parseString("ageString", reader, -1));
                    break;
                case "estimatedAge":
                    builder.estimatedAge(parseBoolean("estimatedAge", reader, -1));
                    break;
                case "deceasedBoolean":
                    builder.deceased(parseBoolean("deceasedBoolean", reader, -1));
                    break;
                case "deceasedAge":
                    builder.deceased((Age) parseQuantity(Age.builder(), "deceasedAge", reader, -1));
                    break;
                case "deceasedRange":
                    builder.deceased(parseRange("deceasedRange", reader, -1));
                    break;
                case "deceasedDate":
                    builder.deceased(parseDate("deceasedDate", reader, -1));
                    break;
                case "deceasedString":
                    builder.deceased(parseString("deceasedString", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseFamilyMemberHistoryCondition("condition", reader, conditionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private FamilyMemberHistory.Condition parseFamilyMemberHistoryCondition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        FamilyMemberHistory.Condition.Builder builder = FamilyMemberHistory.Condition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "outcome":
                    builder.outcome(parseCodeableConcept("outcome", reader, -1));
                    break;
                case "contributedToDeath":
                    builder.contributedToDeath(parseBoolean("contributedToDeath", reader, -1));
                    break;
                case "onsetAge":
                    builder.onset((Age) parseQuantity(Age.builder(), "onsetAge", reader, -1));
                    break;
                case "onsetRange":
                    builder.onset(parseRange("onsetRange", reader, -1));
                    break;
                case "onsetPeriod":
                    builder.onset(parsePeriod("onsetPeriod", reader, -1));
                    break;
                case "onsetString":
                    builder.onset(parseString("onsetString", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Flag parseFlag(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Flag.Builder builder = Flag.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((FlagStatus) parseString(FlagStatus.builder(), "status", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Goal parseGoal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Goal.Builder builder = Goal.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, targetElementIndex = 0, addressesElementIndex = 0, noteElementIndex = 0, outcomeCodeElementIndex = 0, outcomeReferenceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "lifecycleStatus":
                    builder.lifecycleStatus((GoalLifecycleStatus) parseString(GoalLifecycleStatus.builder(), "lifecycleStatus", reader, -1));
                    break;
                case "achievementStatus":
                    builder.achievementStatus(parseCodeableConcept("achievementStatus", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "priority":
                    builder.priority(parseCodeableConcept("priority", reader, -1));
                    break;
                case "description":
                    builder.description(parseCodeableConcept("description", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "startDate":
                    builder.start(parseDate("startDate", reader, -1));
                    break;
                case "startCodeableConcept":
                    builder.start(parseCodeableConcept("startCodeableConcept", reader, -1));
                    break;
                case "target":
                    builder.target(parseGoalTarget("target", reader, targetElementIndex++));
                    break;
                case "statusDate":
                    builder.statusDate(parseDate("statusDate", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseString("statusReason", reader, -1));
                    break;
                case "expressedBy":
                    builder.expressedBy(parseReference("expressedBy", reader, -1));
                    break;
                case "addresses":
                    builder.addresses(parseReference("addresses", reader, addressesElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "outcomeCode":
                    builder.outcomeCode(parseCodeableConcept("outcomeCode", reader, outcomeCodeElementIndex++));
                    break;
                case "outcomeReference":
                    builder.outcomeReference(parseReference("outcomeReference", reader, outcomeReferenceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Goal.Target parseGoalTarget(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Goal.Target.Builder builder = Goal.Target.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "measure":
                    builder.measure(parseCodeableConcept("measure", reader, -1));
                    break;
                case "detailQuantity":
                    builder.detail(parseQuantity("detailQuantity", reader, -1));
                    break;
                case "detailRange":
                    builder.detail(parseRange("detailRange", reader, -1));
                    break;
                case "detailCodeableConcept":
                    builder.detail(parseCodeableConcept("detailCodeableConcept", reader, -1));
                    break;
                case "detailString":
                    builder.detail(parseString("detailString", reader, -1));
                    break;
                case "detailBoolean":
                    builder.detail(parseBoolean("detailBoolean", reader, -1));
                    break;
                case "detailInteger":
                    builder.detail(parseInteger("detailInteger", reader, -1));
                    break;
                case "detailRatio":
                    builder.detail(parseRatio("detailRatio", reader, -1));
                    break;
                case "dueDate":
                    builder.due(parseDate("dueDate", reader, -1));
                    break;
                case "dueDuration":
                    builder.due((Duration) parseQuantity(Duration.builder(), "dueDuration", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private GraphDefinition parseGraphDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        GraphDefinition.Builder builder = GraphDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, linkElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "start":
                    builder.start((ResourceType) parseString(ResourceType.builder(), "start", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                case "link":
                    builder.link(parseGraphDefinitionLink("link", reader, linkElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private GraphDefinition.Link parseGraphDefinitionLink(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        GraphDefinition.Link.Builder builder = GraphDefinition.Link.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "sliceName":
                    builder.sliceName(parseString("sliceName", reader, -1));
                    break;
                case "min":
                    builder.min(parseInteger("min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "target":
                    builder.target(parseGraphDefinitionLinkTarget("target", reader, targetElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private GraphDefinition.Link.Target parseGraphDefinitionLinkTarget(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        GraphDefinition.Link.Target.Builder builder = GraphDefinition.Link.Target.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, compartmentElementIndex = 0, linkElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ResourceType) parseString(ResourceType.builder(), "type", reader, -1));
                    break;
                case "params":
                    builder.params(parseString("params", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                case "compartment":
                    builder.compartment(parseGraphDefinitionLinkTargetCompartment("compartment", reader, compartmentElementIndex++));
                    break;
                case "link":
                    builder.link(parseGraphDefinitionLink("link", reader, linkElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private GraphDefinition.Link.Target.Compartment parseGraphDefinitionLinkTargetCompartment(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        GraphDefinition.Link.Target.Compartment.Builder builder = GraphDefinition.Link.Target.Compartment.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "use":
                    builder.use((GraphCompartmentUse) parseString(GraphCompartmentUse.builder(), "use", reader, -1));
                    break;
                case "code":
                    builder.code((CompartmentCode) parseString(CompartmentCode.builder(), "code", reader, -1));
                    break;
                case "rule":
                    builder.rule((GraphCompartmentRule) parseString(GraphCompartmentRule.builder(), "rule", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Group parseGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Group.Builder builder = Group.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, characteristicElementIndex = 0, memberElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "type":
                    builder.type((GroupType) parseString(GroupType.builder(), "type", reader, -1));
                    break;
                case "actual":
                    builder.actual(parseBoolean("actual", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((UnsignedInt) parseInteger(UnsignedInt.builder(), "quantity", reader, -1));
                    break;
                case "managingEntity":
                    builder.managingEntity(parseReference("managingEntity", reader, -1));
                    break;
                case "characteristic":
                    builder.characteristic(parseGroupCharacteristic("characteristic", reader, characteristicElementIndex++));
                    break;
                case "member":
                    builder.member(parseGroupMember("member", reader, memberElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Group.Characteristic parseGroupCharacteristic(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Group.Characteristic.Builder builder = Group.Characteristic.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "exclude":
                    builder.exclude(parseBoolean("exclude", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Group.Member parseGroupMember(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Group.Member.Builder builder = Group.Member.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "entity":
                    builder.entity(parseReference("entity", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "inactive":
                    builder.inactive(parseBoolean("inactive", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private GuidanceResponse parseGuidanceResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        GuidanceResponse.Builder builder = GuidanceResponse.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0, evaluationMessageElementIndex = 0, dataRequirementElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "requestIdentifier":
                    builder.requestIdentifier(parseIdentifier("requestIdentifier", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "moduleUri":
                    builder.module(parseUri("moduleUri", reader, -1));
                    break;
                case "moduleCanonical":
                    builder.module((Canonical) parseUri(Canonical.builder(), "moduleCanonical", reader, -1));
                    break;
                case "moduleCodeableConcept":
                    builder.module(parseCodeableConcept("moduleCodeableConcept", reader, -1));
                    break;
                case "status":
                    builder.status((GuidanceResponseStatus) parseString(GuidanceResponseStatus.builder(), "status", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrenceDateTime(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "evaluationMessage":
                    builder.evaluationMessage(parseReference("evaluationMessage", reader, evaluationMessageElementIndex++));
                    break;
                case "outputParameters":
                    builder.outputParameters(parseReference("outputParameters", reader, -1));
                    break;
                case "result":
                    builder.result(parseReference("result", reader, -1));
                    break;
                case "dataRequirement":
                    builder.dataRequirement(parseDataRequirement("dataRequirement", reader, dataRequirementElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private HealthcareService parseHealthcareService(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        HealthcareService.Builder builder = HealthcareService.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, typeElementIndex = 0, specialtyElementIndex = 0, locationElementIndex = 0, telecomElementIndex = 0, coverageAreaElementIndex = 0, serviceProvisionCodeElementIndex = 0, eligibilityElementIndex = 0, programElementIndex = 0, characteristicElementIndex = 0, communicationElementIndex = 0, referralMethodElementIndex = 0, availableTimeElementIndex = 0, notAvailableElementIndex = 0, endpointElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "providedBy":
                    builder.providedBy(parseReference("providedBy", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "specialty":
                    builder.specialty(parseCodeableConcept("specialty", reader, specialtyElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, locationElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "extraDetails":
                    builder.extraDetails((Markdown) parseString(Markdown.builder(), "extraDetails", reader, -1));
                    break;
                case "photo":
                    builder.photo(parseAttachment("photo", reader, -1));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "coverageArea":
                    builder.coverageArea(parseReference("coverageArea", reader, coverageAreaElementIndex++));
                    break;
                case "serviceProvisionCode":
                    builder.serviceProvisionCode(parseCodeableConcept("serviceProvisionCode", reader, serviceProvisionCodeElementIndex++));
                    break;
                case "eligibility":
                    builder.eligibility(parseHealthcareServiceEligibility("eligibility", reader, eligibilityElementIndex++));
                    break;
                case "program":
                    builder.program(parseCodeableConcept("program", reader, programElementIndex++));
                    break;
                case "characteristic":
                    builder.characteristic(parseCodeableConcept("characteristic", reader, characteristicElementIndex++));
                    break;
                case "communication":
                    builder.communication(parseCodeableConcept("communication", reader, communicationElementIndex++));
                    break;
                case "referralMethod":
                    builder.referralMethod(parseCodeableConcept("referralMethod", reader, referralMethodElementIndex++));
                    break;
                case "appointmentRequired":
                    builder.appointmentRequired(parseBoolean("appointmentRequired", reader, -1));
                    break;
                case "availableTime":
                    builder.availableTime(parseHealthcareServiceAvailableTime("availableTime", reader, availableTimeElementIndex++));
                    break;
                case "notAvailable":
                    builder.notAvailable(parseHealthcareServiceNotAvailable("notAvailable", reader, notAvailableElementIndex++));
                    break;
                case "availabilityExceptions":
                    builder.availabilityExceptions(parseString("availabilityExceptions", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private HealthcareService.AvailableTime parseHealthcareServiceAvailableTime(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        HealthcareService.AvailableTime.Builder builder = HealthcareService.AvailableTime.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, daysOfWeekElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "daysOfWeek":
                    builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", reader, daysOfWeekElementIndex++));
                    break;
                case "allDay":
                    builder.allDay(parseBoolean("allDay", reader, -1));
                    break;
                case "availableStartTime":
                    builder.availableStartTime(parseTime("availableStartTime", reader, -1));
                    break;
                case "availableEndTime":
                    builder.availableEndTime(parseTime("availableEndTime", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private HealthcareService.Eligibility parseHealthcareServiceEligibility(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        HealthcareService.Eligibility.Builder builder = HealthcareService.Eligibility.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "comment":
                    builder.comment((Markdown) parseString(Markdown.builder(), "comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private HealthcareService.NotAvailable parseHealthcareServiceNotAvailable(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        HealthcareService.NotAvailable.Builder builder = HealthcareService.NotAvailable.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "during":
                    builder.during(parsePeriod("during", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private HumanName parseHumanName(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        HumanName.Builder builder = HumanName.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, givenElementIndex = 0, prefixElementIndex = 0, suffixElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "use":
                    builder.use((NameUse) parseString(NameUse.builder(), "use", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "family":
                    builder.family(parseString("family", reader, -1));
                    break;
                case "given":
                    builder.given(parseString("given", reader, givenElementIndex++));
                    break;
                case "prefix":
                    builder.prefix(parseString("prefix", reader, prefixElementIndex++));
                    break;
                case "suffix":
                    builder.suffix(parseString("suffix", reader, suffixElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Identifier parseIdentifier(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Identifier.Builder builder = Identifier.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "use":
                    builder.use((IdentifierUse) parseString(IdentifierUse.builder(), "use", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "system":
                    builder.system(parseUri("system", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "assigner":
                    builder.assigner(parseReference("assigner", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImagingStudy parseImagingStudy(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImagingStudy.Builder builder = ImagingStudy.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, modalityElementIndex = 0, basedOnElementIndex = 0, interpreterElementIndex = 0, endpointElementIndex = 0, procedureCodeElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0, seriesElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ImagingStudyStatus) parseString(ImagingStudyStatus.builder(), "status", reader, -1));
                    break;
                case "modality":
                    builder.modality(parseCoding("modality", reader, modalityElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "started":
                    builder.started(parseDateTime("started", reader, -1));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "referrer":
                    builder.referrer(parseReference("referrer", reader, -1));
                    break;
                case "interpreter":
                    builder.interpreter(parseReference("interpreter", reader, interpreterElementIndex++));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                case "numberOfSeries":
                    builder.numberOfSeries((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfSeries", reader, -1));
                    break;
                case "numberOfInstances":
                    builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", reader, -1));
                    break;
                case "procedureReference":
                    builder.procedureReference(parseReference("procedureReference", reader, -1));
                    break;
                case "procedureCode":
                    builder.procedureCode(parseCodeableConcept("procedureCode", reader, procedureCodeElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "series":
                    builder.series(parseImagingStudySeries("series", reader, seriesElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImagingStudy.Series parseImagingStudySeries(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImagingStudy.Series.Builder builder = ImagingStudy.Series.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, endpointElementIndex = 0, specimenElementIndex = 0, performerElementIndex = 0, instanceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "uid":
                    builder.uid((Id) parseString(Id.builder(), "uid", reader, -1));
                    break;
                case "number":
                    builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", reader, -1));
                    break;
                case "modality":
                    builder.modality(parseCoding("modality", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "numberOfInstances":
                    builder.numberOfInstances((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfInstances", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCoding("bodySite", reader, -1));
                    break;
                case "laterality":
                    builder.laterality(parseCoding("laterality", reader, -1));
                    break;
                case "specimen":
                    builder.specimen(parseReference("specimen", reader, specimenElementIndex++));
                    break;
                case "started":
                    builder.started(parseDateTime("started", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseImagingStudySeriesPerformer("performer", reader, performerElementIndex++));
                    break;
                case "instance":
                    builder.instance(parseImagingStudySeriesInstance("instance", reader, instanceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImagingStudy.Series.Instance parseImagingStudySeriesInstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImagingStudy.Series.Instance.Builder builder = ImagingStudy.Series.Instance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "uid":
                    builder.uid((Id) parseString(Id.builder(), "uid", reader, -1));
                    break;
                case "sopClass":
                    builder.sopClass(parseCoding("sopClass", reader, -1));
                    break;
                case "number":
                    builder.number((UnsignedInt) parseInteger(UnsignedInt.builder(), "number", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImagingStudy.Series.Performer parseImagingStudySeriesPerformer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImagingStudy.Series.Performer.Builder builder = ImagingStudy.Series.Performer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "function":
                    builder.function(parseCodeableConcept("function", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Immunization parseImmunization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Immunization.Builder builder = Immunization.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, performerElementIndex = 0, noteElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, subpotentReasonElementIndex = 0, educationElementIndex = 0, programEligibilityElementIndex = 0, reactionElementIndex = 0, protocolAppliedElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ImmunizationStatus) parseString(ImmunizationStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "vaccineCode":
                    builder.vaccineCode(parseCodeableConcept("vaccineCode", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrenceString":
                    builder.occurrence(parseString("occurrenceString", reader, -1));
                    break;
                case "recorded":
                    builder.recorded(parseDateTime("recorded", reader, -1));
                    break;
                case "primarySource":
                    builder.primarySource(parseBoolean("primarySource", reader, -1));
                    break;
                case "reportOrigin":
                    builder.reportOrigin(parseCodeableConcept("reportOrigin", reader, -1));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, -1));
                    break;
                case "lotNumber":
                    builder.lotNumber(parseString("lotNumber", reader, -1));
                    break;
                case "expirationDate":
                    builder.expirationDate(parseDate("expirationDate", reader, -1));
                    break;
                case "site":
                    builder.site(parseCodeableConcept("site", reader, -1));
                    break;
                case "route":
                    builder.route(parseCodeableConcept("route", reader, -1));
                    break;
                case "doseQuantity":
                    builder.doseQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "doseQuantity", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseImmunizationPerformer("performer", reader, performerElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "isSubpotent":
                    builder.isSubpotent(parseBoolean("isSubpotent", reader, -1));
                    break;
                case "subpotentReason":
                    builder.subpotentReason(parseCodeableConcept("subpotentReason", reader, subpotentReasonElementIndex++));
                    break;
                case "education":
                    builder.education(parseImmunizationEducation("education", reader, educationElementIndex++));
                    break;
                case "programEligibility":
                    builder.programEligibility(parseCodeableConcept("programEligibility", reader, programEligibilityElementIndex++));
                    break;
                case "fundingSource":
                    builder.fundingSource(parseCodeableConcept("fundingSource", reader, -1));
                    break;
                case "reaction":
                    builder.reaction(parseImmunizationReaction("reaction", reader, reactionElementIndex++));
                    break;
                case "protocolApplied":
                    builder.protocolApplied(parseImmunizationProtocolApplied("protocolApplied", reader, protocolAppliedElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Immunization.Education parseImmunizationEducation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Immunization.Education.Builder builder = Immunization.Education.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "documentType":
                    builder.documentType(parseString("documentType", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseUri("reference", reader, -1));
                    break;
                case "publicationDate":
                    builder.publicationDate(parseDateTime("publicationDate", reader, -1));
                    break;
                case "presentationDate":
                    builder.presentationDate(parseDateTime("presentationDate", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Immunization.Performer parseImmunizationPerformer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Immunization.Performer.Builder builder = Immunization.Performer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "function":
                    builder.function(parseCodeableConcept("function", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Immunization.ProtocolApplied parseImmunizationProtocolApplied(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Immunization.ProtocolApplied.Builder builder = Immunization.ProtocolApplied.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetDiseaseElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "series":
                    builder.series(parseString("series", reader, -1));
                    break;
                case "authority":
                    builder.authority(parseReference("authority", reader, -1));
                    break;
                case "targetDisease":
                    builder.targetDisease(parseCodeableConcept("targetDisease", reader, targetDiseaseElementIndex++));
                    break;
                case "doseNumberPositiveInt":
                    builder.doseNumber((PositiveInt) parseInteger(PositiveInt.builder(), "doseNumberPositiveInt", reader, -1));
                    break;
                case "doseNumberString":
                    builder.doseNumber(parseString("doseNumberString", reader, -1));
                    break;
                case "seriesDosesPositiveInt":
                    builder.seriesDoses((PositiveInt) parseInteger(PositiveInt.builder(), "seriesDosesPositiveInt", reader, -1));
                    break;
                case "seriesDosesString":
                    builder.seriesDoses(parseString("seriesDosesString", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Immunization.Reaction parseImmunizationReaction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Immunization.Reaction.Builder builder = Immunization.Reaction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "detail":
                    builder.detail(parseReference("detail", reader, -1));
                    break;
                case "reported":
                    builder.reported(parseBoolean("reported", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImmunizationEvaluation parseImmunizationEvaluation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImmunizationEvaluation.Builder builder = ImmunizationEvaluation.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, doseStatusReasonElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ImmunizationEvaluationStatus) parseString(ImmunizationEvaluationStatus.builder(), "status", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "authority":
                    builder.authority(parseReference("authority", reader, -1));
                    break;
                case "targetDisease":
                    builder.targetDisease(parseCodeableConcept("targetDisease", reader, -1));
                    break;
                case "immunizationEvent":
                    builder.immunizationEvent(parseReference("immunizationEvent", reader, -1));
                    break;
                case "doseStatus":
                    builder.doseStatus(parseCodeableConcept("doseStatus", reader, -1));
                    break;
                case "doseStatusReason":
                    builder.doseStatusReason(parseCodeableConcept("doseStatusReason", reader, doseStatusReasonElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "series":
                    builder.series(parseString("series", reader, -1));
                    break;
                case "doseNumberPositiveInt":
                    builder.doseNumber((PositiveInt) parseInteger(PositiveInt.builder(), "doseNumberPositiveInt", reader, -1));
                    break;
                case "doseNumberString":
                    builder.doseNumber(parseString("doseNumberString", reader, -1));
                    break;
                case "seriesDosesPositiveInt":
                    builder.seriesDoses((PositiveInt) parseInteger(PositiveInt.builder(), "seriesDosesPositiveInt", reader, -1));
                    break;
                case "seriesDosesString":
                    builder.seriesDoses(parseString("seriesDosesString", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImmunizationRecommendation parseImmunizationRecommendation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImmunizationRecommendation.Builder builder = ImmunizationRecommendation.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, recommendationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "authority":
                    builder.authority(parseReference("authority", reader, -1));
                    break;
                case "recommendation":
                    builder.recommendation(parseImmunizationRecommendationRecommendation("recommendation", reader, recommendationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImmunizationRecommendation.Recommendation parseImmunizationRecommendationRecommendation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImmunizationRecommendation.Recommendation.Builder builder = ImmunizationRecommendation.Recommendation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, vaccineCodeElementIndex = 0, contraindicatedVaccineCodeElementIndex = 0, forecastReasonElementIndex = 0, dateCriterionElementIndex = 0, supportingImmunizationElementIndex = 0, supportingPatientInformationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "vaccineCode":
                    builder.vaccineCode(parseCodeableConcept("vaccineCode", reader, vaccineCodeElementIndex++));
                    break;
                case "targetDisease":
                    builder.targetDisease(parseCodeableConcept("targetDisease", reader, -1));
                    break;
                case "contraindicatedVaccineCode":
                    builder.contraindicatedVaccineCode(parseCodeableConcept("contraindicatedVaccineCode", reader, contraindicatedVaccineCodeElementIndex++));
                    break;
                case "forecastStatus":
                    builder.forecastStatus(parseCodeableConcept("forecastStatus", reader, -1));
                    break;
                case "forecastReason":
                    builder.forecastReason(parseCodeableConcept("forecastReason", reader, forecastReasonElementIndex++));
                    break;
                case "dateCriterion":
                    builder.dateCriterion(parseImmunizationRecommendationRecommendationDateCriterion("dateCriterion", reader, dateCriterionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "series":
                    builder.series(parseString("series", reader, -1));
                    break;
                case "doseNumberPositiveInt":
                    builder.doseNumber((PositiveInt) parseInteger(PositiveInt.builder(), "doseNumberPositiveInt", reader, -1));
                    break;
                case "doseNumberString":
                    builder.doseNumber(parseString("doseNumberString", reader, -1));
                    break;
                case "seriesDosesPositiveInt":
                    builder.seriesDoses((PositiveInt) parseInteger(PositiveInt.builder(), "seriesDosesPositiveInt", reader, -1));
                    break;
                case "seriesDosesString":
                    builder.seriesDoses(parseString("seriesDosesString", reader, -1));
                    break;
                case "supportingImmunization":
                    builder.supportingImmunization(parseReference("supportingImmunization", reader, supportingImmunizationElementIndex++));
                    break;
                case "supportingPatientInformation":
                    builder.supportingPatientInformation(parseReference("supportingPatientInformation", reader, supportingPatientInformationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImmunizationRecommendation.Recommendation.DateCriterion parseImmunizationRecommendationRecommendationDateCriterion(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImmunizationRecommendation.Recommendation.DateCriterion.Builder builder = ImmunizationRecommendation.Recommendation.DateCriterion.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "value":
                    builder.value(parseDateTime("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide parseImplementationGuide(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Builder builder = ImplementationGuide.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, fhirVersionElementIndex = 0, dependsOnElementIndex = 0, globalElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "packageId":
                    builder.packageId((Id) parseString(Id.builder(), "packageId", reader, -1));
                    break;
                case "license":
                    builder.license((SPDXLicense) parseString(SPDXLicense.builder(), "license", reader, -1));
                    break;
                case "fhirVersion":
                    builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", reader, fhirVersionElementIndex++));
                    break;
                case "dependsOn":
                    builder.dependsOn(parseImplementationGuideDependsOn("dependsOn", reader, dependsOnElementIndex++));
                    break;
                case "global":
                    builder.global(parseImplementationGuideGlobal("global", reader, globalElementIndex++));
                    break;
                case "definition":
                    builder.definition(parseImplementationGuideDefinition("definition", reader, -1));
                    break;
                case "manifest":
                    builder.manifest(parseImplementationGuideManifest("manifest", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Definition parseImplementationGuideDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Definition.Builder builder = ImplementationGuide.Definition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, groupingElementIndex = 0, resourceElementIndex = 0, parameterElementIndex = 0, templateElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "grouping":
                    builder.grouping(parseImplementationGuideDefinitionGrouping("grouping", reader, groupingElementIndex++));
                    break;
                case "resource":
                    builder.resource(parseImplementationGuideDefinitionResource("resource", reader, resourceElementIndex++));
                    break;
                case "page":
                    builder.page(parseImplementationGuideDefinitionPage("page", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseImplementationGuideDefinitionParameter("parameter", reader, parameterElementIndex++));
                    break;
                case "template":
                    builder.template(parseImplementationGuideDefinitionTemplate("template", reader, templateElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Definition.Grouping parseImplementationGuideDefinitionGrouping(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Definition.Grouping.Builder builder = ImplementationGuide.Definition.Grouping.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Definition.Page parseImplementationGuideDefinitionPage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Definition.Page.Builder builder = ImplementationGuide.Definition.Page.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, pageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "nameUrl":
                    builder.name((Url) parseUri(Url.builder(), "nameUrl", reader, -1));
                    break;
                case "nameReference":
                    builder.name(parseReference("nameReference", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "generation":
                    builder.generation((GuidePageGeneration) parseString(GuidePageGeneration.builder(), "generation", reader, -1));
                    break;
                case "page":
                    builder.page(parseImplementationGuideDefinitionPage("page", reader, pageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Definition.Parameter parseImplementationGuideDefinitionParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Definition.Parameter.Builder builder = ImplementationGuide.Definition.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((GuideParameterCode) parseString(GuideParameterCode.builder(), "code", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Definition.Resource parseImplementationGuideDefinitionResource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Definition.Resource.Builder builder = ImplementationGuide.Definition.Resource.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, fhirVersionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, -1));
                    break;
                case "fhirVersion":
                    builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", reader, fhirVersionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "exampleBoolean":
                    builder.example(parseBoolean("exampleBoolean", reader, -1));
                    break;
                case "exampleCanonical":
                    builder.example((Canonical) parseUri(Canonical.builder(), "exampleCanonical", reader, -1));
                    break;
                case "groupingId":
                    builder.groupingId((Id) parseString(Id.builder(), "groupingId", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Definition.Template parseImplementationGuideDefinitionTemplate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Definition.Template.Builder builder = ImplementationGuide.Definition.Template.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "source":
                    builder.source(parseString("source", reader, -1));
                    break;
                case "scope":
                    builder.scope(parseString("scope", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.DependsOn parseImplementationGuideDependsOn(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.DependsOn.Builder builder = ImplementationGuide.DependsOn.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "uri":
                    builder.uri((Canonical) parseUri(Canonical.builder(), "uri", reader, -1));
                    break;
                case "packageId":
                    builder.packageId((Id) parseString(Id.builder(), "packageId", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Global parseImplementationGuideGlobal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Global.Builder builder = ImplementationGuide.Global.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ResourceType) parseString(ResourceType.builder(), "type", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Manifest parseImplementationGuideManifest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Manifest.Builder builder = ImplementationGuide.Manifest.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, resourceElementIndex = 0, pageElementIndex = 0, imageElementIndex = 0, otherElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "rendering":
                    builder.rendering((Url) parseUri(Url.builder(), "rendering", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseImplementationGuideManifestResource("resource", reader, resourceElementIndex++));
                    break;
                case "page":
                    builder.page(parseImplementationGuideManifestPage("page", reader, pageElementIndex++));
                    break;
                case "image":
                    builder.image(parseString("image", reader, imageElementIndex++));
                    break;
                case "other":
                    builder.other(parseString("other", reader, otherElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Manifest.Page parseImplementationGuideManifestPage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Manifest.Page.Builder builder = ImplementationGuide.Manifest.Page.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, anchorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "anchor":
                    builder.anchor(parseString("anchor", reader, anchorElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ImplementationGuide.Manifest.Resource parseImplementationGuideManifestResource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ImplementationGuide.Manifest.Resource.Builder builder = ImplementationGuide.Manifest.Resource.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, -1));
                    break;
                case "exampleBoolean":
                    builder.example(parseBoolean("exampleBoolean", reader, -1));
                    break;
                case "exampleCanonical":
                    builder.example((Canonical) parseUri(Canonical.builder(), "exampleCanonical", reader, -1));
                    break;
                case "relativePath":
                    builder.relativePath((Url) parseUri(Url.builder(), "relativePath", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Instant parseInstant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Instant.Builder builder = Instant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan parseInsurancePlan(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Builder builder = InsurancePlan.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, typeElementIndex = 0, aliasElementIndex = 0, coverageAreaElementIndex = 0, contactElementIndex = 0, endpointElementIndex = 0, networkElementIndex = 0, coverageElementIndex = 0, planElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "alias":
                    builder.alias(parseString("alias", reader, aliasElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "ownedBy":
                    builder.ownedBy(parseReference("ownedBy", reader, -1));
                    break;
                case "administeredBy":
                    builder.administeredBy(parseReference("administeredBy", reader, -1));
                    break;
                case "coverageArea":
                    builder.coverageArea(parseReference("coverageArea", reader, coverageAreaElementIndex++));
                    break;
                case "contact":
                    builder.contact(parseInsurancePlanContact("contact", reader, contactElementIndex++));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                case "network":
                    builder.network(parseReference("network", reader, networkElementIndex++));
                    break;
                case "coverage":
                    builder.coverage(parseInsurancePlanCoverage("coverage", reader, coverageElementIndex++));
                    break;
                case "plan":
                    builder.plan(parseInsurancePlanPlan("plan", reader, planElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Contact parseInsurancePlanContact(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Contact.Builder builder = InsurancePlan.Contact.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, telecomElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose(parseCodeableConcept("purpose", reader, -1));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, -1));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Coverage parseInsurancePlanCoverage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Coverage.Builder builder = InsurancePlan.Coverage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, networkElementIndex = 0, benefitElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "network":
                    builder.network(parseReference("network", reader, networkElementIndex++));
                    break;
                case "benefit":
                    builder.benefit(parseInsurancePlanCoverageBenefit("benefit", reader, benefitElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Coverage.Benefit parseInsurancePlanCoverageBenefit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Coverage.Benefit.Builder builder = InsurancePlan.Coverage.Benefit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, limitElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "requirement":
                    builder.requirement(parseString("requirement", reader, -1));
                    break;
                case "limit":
                    builder.limit(parseInsurancePlanCoverageBenefitLimit("limit", reader, limitElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Coverage.Benefit.Limit parseInsurancePlanCoverageBenefitLimit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Coverage.Benefit.Limit.Builder builder = InsurancePlan.Coverage.Benefit.Limit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "value":
                    builder.value(parseQuantity("value", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Plan parseInsurancePlanPlan(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Plan.Builder builder = InsurancePlan.Plan.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, coverageAreaElementIndex = 0, networkElementIndex = 0, generalCostElementIndex = 0, specificCostElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "coverageArea":
                    builder.coverageArea(parseReference("coverageArea", reader, coverageAreaElementIndex++));
                    break;
                case "network":
                    builder.network(parseReference("network", reader, networkElementIndex++));
                    break;
                case "generalCost":
                    builder.generalCost(parseInsurancePlanPlanGeneralCost("generalCost", reader, generalCostElementIndex++));
                    break;
                case "specificCost":
                    builder.specificCost(parseInsurancePlanPlanSpecificCost("specificCost", reader, specificCostElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Plan.GeneralCost parseInsurancePlanPlanGeneralCost(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Plan.GeneralCost.Builder builder = InsurancePlan.Plan.GeneralCost.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "groupSize":
                    builder.groupSize((PositiveInt) parseInteger(PositiveInt.builder(), "groupSize", reader, -1));
                    break;
                case "cost":
                    builder.cost(parseMoney("cost", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Plan.SpecificCost parseInsurancePlanPlanSpecificCost(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Plan.SpecificCost.Builder builder = InsurancePlan.Plan.SpecificCost.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, benefitElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "benefit":
                    builder.benefit(parseInsurancePlanPlanSpecificCostBenefit("benefit", reader, benefitElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Plan.SpecificCost.Benefit parseInsurancePlanPlanSpecificCostBenefit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Plan.SpecificCost.Benefit.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, costElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "cost":
                    builder.cost(parseInsurancePlanPlanSpecificCostBenefitCost("cost", reader, costElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private InsurancePlan.Plan.SpecificCost.Benefit.Cost parseInsurancePlanPlanSpecificCostBenefitCost(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        InsurancePlan.Plan.SpecificCost.Benefit.Cost.Builder builder = InsurancePlan.Plan.SpecificCost.Benefit.Cost.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, qualifiersElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "applicability":
                    builder.applicability(parseCodeableConcept("applicability", reader, -1));
                    break;
                case "qualifiers":
                    builder.qualifiers(parseCodeableConcept("qualifiers", reader, qualifiersElementIndex++));
                    break;
                case "value":
                    builder.value(parseQuantity("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Integer parseInteger(Integer.Builder builder, java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Integer parseInteger(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        return parseInteger(Integer.builder(), elementName, reader, elementIndex);
    }

    private Invoice parseInvoice(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Invoice.Builder builder = Invoice.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, participantElementIndex = 0, lineItemElementIndex = 0, totalPriceComponentElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((InvoiceStatus) parseString(InvoiceStatus.builder(), "status", reader, -1));
                    break;
                case "cancelledReason":
                    builder.cancelledReason(parseString("cancelledReason", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "participant":
                    builder.participant(parseInvoiceParticipant("participant", reader, participantElementIndex++));
                    break;
                case "issuer":
                    builder.issuer(parseReference("issuer", reader, -1));
                    break;
                case "account":
                    builder.account(parseReference("account", reader, -1));
                    break;
                case "lineItem":
                    builder.lineItem(parseInvoiceLineItem("lineItem", reader, lineItemElementIndex++));
                    break;
                case "totalPriceComponent":
                    builder.totalPriceComponent(parseInvoiceLineItemPriceComponent("totalPriceComponent", reader, totalPriceComponentElementIndex++));
                    break;
                case "totalNet":
                    builder.totalNet(parseMoney("totalNet", reader, -1));
                    break;
                case "totalGross":
                    builder.totalGross(parseMoney("totalGross", reader, -1));
                    break;
                case "paymentTerms":
                    builder.paymentTerms((Markdown) parseString(Markdown.builder(), "paymentTerms", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Invoice.LineItem parseInvoiceLineItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Invoice.LineItem.Builder builder = Invoice.LineItem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, priceComponentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequence":
                    builder.sequence((PositiveInt) parseInteger(PositiveInt.builder(), "sequence", reader, -1));
                    break;
                case "chargeItemReference":
                    builder.chargeItem(parseReference("chargeItemReference", reader, -1));
                    break;
                case "chargeItemCodeableConcept":
                    builder.chargeItem(parseCodeableConcept("chargeItemCodeableConcept", reader, -1));
                    break;
                case "priceComponent":
                    builder.priceComponent(parseInvoiceLineItemPriceComponent("priceComponent", reader, priceComponentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Invoice.LineItem.PriceComponent parseInvoiceLineItemPriceComponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Invoice.LineItem.PriceComponent.Builder builder = Invoice.LineItem.PriceComponent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((InvoicePriceComponentType) parseString(InvoicePriceComponentType.builder(), "type", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Invoice.Participant parseInvoiceParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Invoice.Participant.Builder builder = Invoice.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Library parseLibrary(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Library.Builder builder = Library.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, parameterElementIndex = 0, dataRequirementElementIndex = 0, contentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "parameter":
                    builder.parameter(parseParameterDefinition("parameter", reader, parameterElementIndex++));
                    break;
                case "dataRequirement":
                    builder.dataRequirement(parseDataRequirement("dataRequirement", reader, dataRequirementElementIndex++));
                    break;
                case "content":
                    builder.content(parseAttachment("content", reader, contentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Linkage parseLinkage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Linkage.Builder builder = Linkage.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "item":
                    builder.item(parseLinkageItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Linkage.Item parseLinkageItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Linkage.Item.Builder builder = Linkage.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((LinkageType) parseString(LinkageType.builder(), "type", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseReference("resource", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private List parseList(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        List.Builder builder = List.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, noteElementIndex = 0, entryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ListStatus) parseString(ListStatus.builder(), "status", reader, -1));
                    break;
                case "mode":
                    builder.mode((ListMode) parseString(ListMode.builder(), "mode", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, -1));
                    break;
                case "orderedBy":
                    builder.orderedBy(parseCodeableConcept("orderedBy", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "entry":
                    builder.entry(parseListEntry("entry", reader, entryElementIndex++));
                    break;
                case "emptyReason":
                    builder.emptyReason(parseCodeableConcept("emptyReason", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private List.Entry parseListEntry(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        List.Entry.Builder builder = List.Entry.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "flag":
                    builder.flag(parseCodeableConcept("flag", reader, -1));
                    break;
                case "deleted":
                    builder.deleted(parseBoolean("deleted", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "item":
                    builder.item(parseReference("item", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Location parseLocation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Location.Builder builder = Location.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, aliasElementIndex = 0, typeElementIndex = 0, telecomElementIndex = 0, hoursOfOperationElementIndex = 0, endpointElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((LocationStatus) parseString(LocationStatus.builder(), "status", reader, -1));
                    break;
                case "operationalStatus":
                    builder.operationalStatus(parseCoding("operationalStatus", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "alias":
                    builder.alias(parseString("alias", reader, aliasElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "mode":
                    builder.mode((LocationMode) parseString(LocationMode.builder(), "mode", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, -1));
                    break;
                case "physicalType":
                    builder.physicalType(parseCodeableConcept("physicalType", reader, -1));
                    break;
                case "position":
                    builder.position(parseLocationPosition("position", reader, -1));
                    break;
                case "managingOrganization":
                    builder.managingOrganization(parseReference("managingOrganization", reader, -1));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, -1));
                    break;
                case "hoursOfOperation":
                    builder.hoursOfOperation(parseLocationHoursOfOperation("hoursOfOperation", reader, hoursOfOperationElementIndex++));
                    break;
                case "availabilityExceptions":
                    builder.availabilityExceptions(parseString("availabilityExceptions", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Location.HoursOfOperation parseLocationHoursOfOperation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Location.HoursOfOperation.Builder builder = Location.HoursOfOperation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, daysOfWeekElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "daysOfWeek":
                    builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", reader, daysOfWeekElementIndex++));
                    break;
                case "allDay":
                    builder.allDay(parseBoolean("allDay", reader, -1));
                    break;
                case "openingTime":
                    builder.openingTime(parseTime("openingTime", reader, -1));
                    break;
                case "closingTime":
                    builder.closingTime(parseTime("closingTime", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Location.Position parseLocationPosition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Location.Position.Builder builder = Location.Position.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "longitude":
                    builder.longitude(parseDecimal("longitude", reader, -1));
                    break;
                case "latitude":
                    builder.latitude(parseDecimal("latitude", reader, -1));
                    break;
                case "altitude":
                    builder.altitude(parseDecimal("altitude", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MarketingStatus parseMarketingStatus(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MarketingStatus.Builder builder = MarketingStatus.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "country":
                    builder.country(parseCodeableConcept("country", reader, -1));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "dateRange":
                    builder.dateRange(parsePeriod("dateRange", reader, -1));
                    break;
                case "restoreDate":
                    builder.restoreDate(parseDateTime("restoreDate", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Measure parseMeasure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Measure.Builder builder = Measure.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, libraryElementIndex = 0, typeElementIndex = 0, definitionElementIndex = 0, groupElementIndex = 0, supplementalDataElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "library":
                    builder.library((Canonical) parseUri(Canonical.builder(), "library", reader, libraryElementIndex++));
                    break;
                case "disclaimer":
                    builder.disclaimer((Markdown) parseString(Markdown.builder(), "disclaimer", reader, -1));
                    break;
                case "scoring":
                    builder.scoring(parseCodeableConcept("scoring", reader, -1));
                    break;
                case "compositeScoring":
                    builder.compositeScoring(parseCodeableConcept("compositeScoring", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "riskAdjustment":
                    builder.riskAdjustment(parseString("riskAdjustment", reader, -1));
                    break;
                case "rateAggregation":
                    builder.rateAggregation(parseString("rateAggregation", reader, -1));
                    break;
                case "rationale":
                    builder.rationale((Markdown) parseString(Markdown.builder(), "rationale", reader, -1));
                    break;
                case "clinicalRecommendationStatement":
                    builder.clinicalRecommendationStatement((Markdown) parseString(Markdown.builder(), "clinicalRecommendationStatement", reader, -1));
                    break;
                case "improvementNotation":
                    builder.improvementNotation(parseCodeableConcept("improvementNotation", reader, -1));
                    break;
                case "definition":
                    builder.definition((Markdown) parseString(Markdown.builder(), "definition", reader, definitionElementIndex++));
                    break;
                case "guidance":
                    builder.guidance((Markdown) parseString(Markdown.builder(), "guidance", reader, -1));
                    break;
                case "group":
                    builder.group(parseMeasureGroup("group", reader, groupElementIndex++));
                    break;
                case "supplementalData":
                    builder.supplementalData(parseMeasureSupplementalData("supplementalData", reader, supplementalDataElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Measure.Group parseMeasureGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Measure.Group.Builder builder = Measure.Group.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, populationElementIndex = 0, stratifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "population":
                    builder.population(parseMeasureGroupPopulation("population", reader, populationElementIndex++));
                    break;
                case "stratifier":
                    builder.stratifier(parseMeasureGroupStratifier("stratifier", reader, stratifierElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Measure.Group.Population parseMeasureGroupPopulation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Measure.Group.Population.Builder builder = Measure.Group.Population.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "criteria":
                    builder.criteria(parseExpression("criteria", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Measure.Group.Stratifier parseMeasureGroupStratifier(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Measure.Group.Stratifier.Builder builder = Measure.Group.Stratifier.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, componentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "criteria":
                    builder.criteria(parseExpression("criteria", reader, -1));
                    break;
                case "component":
                    builder.component(parseMeasureGroupStratifierComponent("component", reader, componentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Measure.Group.Stratifier.Component parseMeasureGroupStratifierComponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Measure.Group.Stratifier.Component.Builder builder = Measure.Group.Stratifier.Component.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "criteria":
                    builder.criteria(parseExpression("criteria", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Measure.SupplementalData parseMeasureSupplementalData(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Measure.SupplementalData.Builder builder = Measure.SupplementalData.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, usageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseCodeableConcept("usage", reader, usageElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "criteria":
                    builder.criteria(parseExpression("criteria", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport parseMeasureReport(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Builder builder = MeasureReport.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, groupElementIndex = 0, evaluatedResourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((MeasureReportStatus) parseString(MeasureReportStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type((MeasureReportType) parseString(MeasureReportType.builder(), "type", reader, -1));
                    break;
                case "measure":
                    builder.measure((Canonical) parseUri(Canonical.builder(), "measure", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "reporter":
                    builder.reporter(parseReference("reporter", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "improvementNotation":
                    builder.improvementNotation(parseCodeableConcept("improvementNotation", reader, -1));
                    break;
                case "group":
                    builder.group(parseMeasureReportGroup("group", reader, groupElementIndex++));
                    break;
                case "evaluatedResource":
                    builder.evaluatedResource(parseReference("evaluatedResource", reader, evaluatedResourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport.Group parseMeasureReportGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Group.Builder builder = MeasureReport.Group.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, populationElementIndex = 0, stratifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "population":
                    builder.population(parseMeasureReportGroupPopulation("population", reader, populationElementIndex++));
                    break;
                case "measureScore":
                    builder.measureScore(parseQuantity("measureScore", reader, -1));
                    break;
                case "stratifier":
                    builder.stratifier(parseMeasureReportGroupStratifier("stratifier", reader, stratifierElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport.Group.Population parseMeasureReportGroupPopulation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Group.Population.Builder builder = MeasureReport.Group.Population.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "count":
                    builder.count(parseInteger("count", reader, -1));
                    break;
                case "subjectResults":
                    builder.subjectResults(parseReference("subjectResults", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport.Group.Stratifier parseMeasureReportGroupStratifier(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Group.Stratifier.Builder builder = MeasureReport.Group.Stratifier.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, stratumElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "stratum":
                    builder.stratum(parseMeasureReportGroupStratifierStratum("stratum", reader, stratumElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport.Group.Stratifier.Stratum parseMeasureReportGroupStratifierStratum(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Group.Stratifier.Stratum.Builder builder = MeasureReport.Group.Stratifier.Stratum.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, componentElementIndex = 0, populationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "value":
                    builder.value(parseCodeableConcept("value", reader, -1));
                    break;
                case "component":
                    builder.component(parseMeasureReportGroupStratifierStratumComponent("component", reader, componentElementIndex++));
                    break;
                case "population":
                    builder.population(parseMeasureReportGroupStratifierStratumPopulation("population", reader, populationElementIndex++));
                    break;
                case "measureScore":
                    builder.measureScore(parseQuantity("measureScore", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport.Group.Stratifier.Stratum.Component parseMeasureReportGroupStratifierStratumComponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Group.Stratifier.Stratum.Component.Builder builder = MeasureReport.Group.Stratifier.Stratum.Component.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "value":
                    builder.value(parseCodeableConcept("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MeasureReport.Group.Stratifier.Stratum.Population parseMeasureReportGroupStratifierStratumPopulation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MeasureReport.Group.Stratifier.Stratum.Population.Builder builder = MeasureReport.Group.Stratifier.Stratum.Population.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "count":
                    builder.count(parseInteger("count", reader, -1));
                    break;
                case "subjectResults":
                    builder.subjectResults(parseReference("subjectResults", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Media parseMedia(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Media.Builder builder = Media.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, reasonCodeElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((MediaStatus) parseString(MediaStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "modality":
                    builder.modality(parseCodeableConcept("modality", reader, -1));
                    break;
                case "view":
                    builder.view(parseCodeableConcept("view", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "createdDateTime":
                    builder.created(parseDateTime("createdDateTime", reader, -1));
                    break;
                case "createdPeriod":
                    builder.created(parsePeriod("createdPeriod", reader, -1));
                    break;
                case "issued":
                    builder.issued(parseInstant("issued", reader, -1));
                    break;
                case "operator":
                    builder.operator(parseReference("operator", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "deviceName":
                    builder.deviceName(parseString("deviceName", reader, -1));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, -1));
                    break;
                case "height":
                    builder.height((PositiveInt) parseInteger(PositiveInt.builder(), "height", reader, -1));
                    break;
                case "width":
                    builder.width((PositiveInt) parseInteger(PositiveInt.builder(), "width", reader, -1));
                    break;
                case "frames":
                    builder.frames((PositiveInt) parseInteger(PositiveInt.builder(), "frames", reader, -1));
                    break;
                case "duration":
                    builder.duration(parseDecimal("duration", reader, -1));
                    break;
                case "content":
                    builder.content(parseAttachment("content", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Medication parseMedication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Medication.Builder builder = Medication.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, ingredientElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "status":
                    builder.status((MedicationStatus) parseString(MedicationStatus.builder(), "status", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, -1));
                    break;
                case "form":
                    builder.form(parseCodeableConcept("form", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseRatio("amount", reader, -1));
                    break;
                case "ingredient":
                    builder.ingredient(parseMedicationIngredient("ingredient", reader, ingredientElementIndex++));
                    break;
                case "batch":
                    builder.batch(parseMedicationBatch("batch", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Medication.Batch parseMedicationBatch(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Medication.Batch.Builder builder = Medication.Batch.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "lotNumber":
                    builder.lotNumber(parseString("lotNumber", reader, -1));
                    break;
                case "expirationDate":
                    builder.expirationDate(parseDateTime("expirationDate", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Medication.Ingredient parseMedicationIngredient(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Medication.Ingredient.Builder builder = Medication.Ingredient.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemCodeableConcept":
                    builder.item(parseCodeableConcept("itemCodeableConcept", reader, -1));
                    break;
                case "itemReference":
                    builder.item(parseReference("itemReference", reader, -1));
                    break;
                case "isActive":
                    builder.isActive(parseBoolean("isActive", reader, -1));
                    break;
                case "strength":
                    builder.strength(parseRatio("strength", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationAdministration parseMedicationAdministration(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationAdministration.Builder builder = MedicationAdministration.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesElementIndex = 0, partOfElementIndex = 0, statusReasonElementIndex = 0, supportingInformationElementIndex = 0, performerElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, deviceElementIndex = 0, noteElementIndex = 0, eventHistoryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiates":
                    builder.instantiates(parseUri("instantiates", reader, instantiatesElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((MedicationAdministrationStatus) parseString(MedicationAdministrationStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, statusReasonElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "medicationCodeableConcept":
                    builder.medication(parseCodeableConcept("medicationCodeableConcept", reader, -1));
                    break;
                case "medicationReference":
                    builder.medication(parseReference("medicationReference", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "context":
                    builder.context(parseReference("context", reader, -1));
                    break;
                case "supportingInformation":
                    builder.supportingInformation(parseReference("supportingInformation", reader, supportingInformationElementIndex++));
                    break;
                case "effectiveDateTime":
                    builder.effective(parseDateTime("effectiveDateTime", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effective(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseMedicationAdministrationPerformer("performer", reader, performerElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, deviceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "dosage":
                    builder.dosage(parseMedicationAdministrationDosage("dosage", reader, -1));
                    break;
                case "eventHistory":
                    builder.eventHistory(parseReference("eventHistory", reader, eventHistoryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationAdministration.Dosage parseMedicationAdministrationDosage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationAdministration.Dosage.Builder builder = MedicationAdministration.Dosage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "site":
                    builder.site(parseCodeableConcept("site", reader, -1));
                    break;
                case "route":
                    builder.route(parseCodeableConcept("route", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "dose":
                    builder.dose((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "dose", reader, -1));
                    break;
                case "rateRatio":
                    builder.rate(parseRatio("rateRatio", reader, -1));
                    break;
                case "rateSimpleQuantity":
                    builder.rate((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "rateSimpleQuantity", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationAdministration.Performer parseMedicationAdministrationPerformer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationAdministration.Performer.Builder builder = MedicationAdministration.Performer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "function":
                    builder.function(parseCodeableConcept("function", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationDispense parseMedicationDispense(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationDispense.Builder builder = MedicationDispense.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, partOfElementIndex = 0, supportingInformationElementIndex = 0, performerElementIndex = 0, authorizingPrescriptionElementIndex = 0, receiverElementIndex = 0, noteElementIndex = 0, dosageInstructionElementIndex = 0, detectedIssueElementIndex = 0, eventHistoryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((MedicationDispenseStatus) parseString(MedicationDispenseStatus.builder(), "status", reader, -1));
                    break;
                case "statusReasonCodeableConcept":
                    builder.statusReason(parseCodeableConcept("statusReasonCodeableConcept", reader, -1));
                    break;
                case "statusReasonReference":
                    builder.statusReason(parseReference("statusReasonReference", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "medicationCodeableConcept":
                    builder.medication(parseCodeableConcept("medicationCodeableConcept", reader, -1));
                    break;
                case "medicationReference":
                    builder.medication(parseReference("medicationReference", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "context":
                    builder.context(parseReference("context", reader, -1));
                    break;
                case "supportingInformation":
                    builder.supportingInformation(parseReference("supportingInformation", reader, supportingInformationElementIndex++));
                    break;
                case "performer":
                    builder.performer(parseMedicationDispensePerformer("performer", reader, performerElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "authorizingPrescription":
                    builder.authorizingPrescription(parseReference("authorizingPrescription", reader, authorizingPrescriptionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "daysSupply":
                    builder.daysSupply((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "daysSupply", reader, -1));
                    break;
                case "whenPrepared":
                    builder.whenPrepared(parseDateTime("whenPrepared", reader, -1));
                    break;
                case "whenHandedOver":
                    builder.whenHandedOver(parseDateTime("whenHandedOver", reader, -1));
                    break;
                case "destination":
                    builder.destination(parseReference("destination", reader, -1));
                    break;
                case "receiver":
                    builder.receiver(parseReference("receiver", reader, receiverElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "dosageInstruction":
                    builder.dosageInstruction(parseDosage("dosageInstruction", reader, dosageInstructionElementIndex++));
                    break;
                case "substitution":
                    builder.substitution(parseMedicationDispenseSubstitution("substitution", reader, -1));
                    break;
                case "detectedIssue":
                    builder.detectedIssue(parseReference("detectedIssue", reader, detectedIssueElementIndex++));
                    break;
                case "eventHistory":
                    builder.eventHistory(parseReference("eventHistory", reader, eventHistoryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationDispense.Performer parseMedicationDispensePerformer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationDispense.Performer.Builder builder = MedicationDispense.Performer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "function":
                    builder.function(parseCodeableConcept("function", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationDispense.Substitution parseMedicationDispenseSubstitution(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationDispense.Substitution.Builder builder = MedicationDispense.Substitution.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, reasonElementIndex = 0, responsiblePartyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "wasSubstituted":
                    builder.wasSubstituted(parseBoolean("wasSubstituted", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, reasonElementIndex++));
                    break;
                case "responsibleParty":
                    builder.responsibleParty(parseReference("responsibleParty", reader, responsiblePartyElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge parseMedicationKnowledge(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Builder builder = MedicationKnowledge.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, synonymElementIndex = 0, relatedMedicationKnowledgeElementIndex = 0, associatedMedicationElementIndex = 0, productTypeElementIndex = 0, monographElementIndex = 0, ingredientElementIndex = 0, intendedRouteElementIndex = 0, costElementIndex = 0, monitoringProgramElementIndex = 0, administrationGuidelinesElementIndex = 0, medicineClassificationElementIndex = 0, drugCharacteristicElementIndex = 0, contraindicationElementIndex = 0, regulatoryElementIndex = 0, kineticsElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "status":
                    builder.status((MedicationKnowledgeStatus) parseString(MedicationKnowledgeStatus.builder(), "status", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, -1));
                    break;
                case "doseForm":
                    builder.doseForm(parseCodeableConcept("doseForm", reader, -1));
                    break;
                case "amount":
                    builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", reader, -1));
                    break;
                case "synonym":
                    builder.synonym(parseString("synonym", reader, synonymElementIndex++));
                    break;
                case "relatedMedicationKnowledge":
                    builder.relatedMedicationKnowledge(parseMedicationKnowledgeRelatedMedicationKnowledge("relatedMedicationKnowledge", reader, relatedMedicationKnowledgeElementIndex++));
                    break;
                case "associatedMedication":
                    builder.associatedMedication(parseReference("associatedMedication", reader, associatedMedicationElementIndex++));
                    break;
                case "productType":
                    builder.productType(parseCodeableConcept("productType", reader, productTypeElementIndex++));
                    break;
                case "monograph":
                    builder.monograph(parseMedicationKnowledgeMonograph("monograph", reader, monographElementIndex++));
                    break;
                case "ingredient":
                    builder.ingredient(parseMedicationKnowledgeIngredient("ingredient", reader, ingredientElementIndex++));
                    break;
                case "preparationInstruction":
                    builder.preparationInstruction((Markdown) parseString(Markdown.builder(), "preparationInstruction", reader, -1));
                    break;
                case "intendedRoute":
                    builder.intendedRoute(parseCodeableConcept("intendedRoute", reader, intendedRouteElementIndex++));
                    break;
                case "cost":
                    builder.cost(parseMedicationKnowledgeCost("cost", reader, costElementIndex++));
                    break;
                case "monitoringProgram":
                    builder.monitoringProgram(parseMedicationKnowledgeMonitoringProgram("monitoringProgram", reader, monitoringProgramElementIndex++));
                    break;
                case "administrationGuidelines":
                    builder.administrationGuidelines(parseMedicationKnowledgeAdministrationGuidelines("administrationGuidelines", reader, administrationGuidelinesElementIndex++));
                    break;
                case "medicineClassification":
                    builder.medicineClassification(parseMedicationKnowledgeMedicineClassification("medicineClassification", reader, medicineClassificationElementIndex++));
                    break;
                case "packaging":
                    builder.packaging(parseMedicationKnowledgePackaging("packaging", reader, -1));
                    break;
                case "drugCharacteristic":
                    builder.drugCharacteristic(parseMedicationKnowledgeDrugCharacteristic("drugCharacteristic", reader, drugCharacteristicElementIndex++));
                    break;
                case "contraindication":
                    builder.contraindication(parseReference("contraindication", reader, contraindicationElementIndex++));
                    break;
                case "regulatory":
                    builder.regulatory(parseMedicationKnowledgeRegulatory("regulatory", reader, regulatoryElementIndex++));
                    break;
                case "kinetics":
                    builder.kinetics(parseMedicationKnowledgeKinetics("kinetics", reader, kineticsElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.AdministrationGuidelines parseMedicationKnowledgeAdministrationGuidelines(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.AdministrationGuidelines.Builder builder = MedicationKnowledge.AdministrationGuidelines.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, dosageElementIndex = 0, patientCharacteristicsElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "dosage":
                    builder.dosage(parseMedicationKnowledgeAdministrationGuidelinesDosage("dosage", reader, dosageElementIndex++));
                    break;
                case "indicationCodeableConcept":
                    builder.indication(parseCodeableConcept("indicationCodeableConcept", reader, -1));
                    break;
                case "indicationReference":
                    builder.indication(parseReference("indicationReference", reader, -1));
                    break;
                case "patientCharacteristics":
                    builder.patientCharacteristics(parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics("patientCharacteristics", reader, patientCharacteristicsElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.AdministrationGuidelines.Dosage parseMedicationKnowledgeAdministrationGuidelinesDosage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.AdministrationGuidelines.Dosage.Builder builder = MedicationKnowledge.AdministrationGuidelines.Dosage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, dosageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "dosage":
                    builder.dosage(parseDosage("dosage", reader, dosageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics parseMedicationKnowledgeAdministrationGuidelinesPatientCharacteristics(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.Builder builder = MedicationKnowledge.AdministrationGuidelines.PatientCharacteristics.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, valueElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "characteristicCodeableConcept":
                    builder.characteristic(parseCodeableConcept("characteristicCodeableConcept", reader, -1));
                    break;
                case "characteristicSimpleQuantity":
                    builder.characteristic((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "characteristicSimpleQuantity", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, valueElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Cost parseMedicationKnowledgeCost(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Cost.Builder builder = MedicationKnowledge.Cost.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "source":
                    builder.source(parseString("source", reader, -1));
                    break;
                case "cost":
                    builder.cost(parseMoney("cost", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.DrugCharacteristic parseMedicationKnowledgeDrugCharacteristic(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.DrugCharacteristic.Builder builder = MedicationKnowledge.DrugCharacteristic.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueSimpleQuantity":
                    builder.value((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "valueSimpleQuantity", reader, -1));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Ingredient parseMedicationKnowledgeIngredient(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Ingredient.Builder builder = MedicationKnowledge.Ingredient.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemCodeableConcept":
                    builder.item(parseCodeableConcept("itemCodeableConcept", reader, -1));
                    break;
                case "itemReference":
                    builder.item(parseReference("itemReference", reader, -1));
                    break;
                case "isActive":
                    builder.isActive(parseBoolean("isActive", reader, -1));
                    break;
                case "strength":
                    builder.strength(parseRatio("strength", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Kinetics parseMedicationKnowledgeKinetics(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Kinetics.Builder builder = MedicationKnowledge.Kinetics.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, areaUnderCurveElementIndex = 0, lethalDose50ElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "areaUnderCurve":
                    builder.areaUnderCurve((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "areaUnderCurve", reader, areaUnderCurveElementIndex++));
                    break;
                case "lethalDose50":
                    builder.lethalDose50((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "lethalDose50", reader, lethalDose50ElementIndex++));
                    break;
                case "halfLifePeriod":
                    builder.halfLifePeriod((Duration) parseQuantity(Duration.builder(), "halfLifePeriod", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.MedicineClassification parseMedicationKnowledgeMedicineClassification(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.MedicineClassification.Builder builder = MedicationKnowledge.MedicineClassification.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, classificationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "classification":
                    builder.classification(parseCodeableConcept("classification", reader, classificationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.MonitoringProgram parseMedicationKnowledgeMonitoringProgram(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.MonitoringProgram.Builder builder = MedicationKnowledge.MonitoringProgram.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Monograph parseMedicationKnowledgeMonograph(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Monograph.Builder builder = MedicationKnowledge.Monograph.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Packaging parseMedicationKnowledgePackaging(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Packaging.Builder builder = MedicationKnowledge.Packaging.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Regulatory parseMedicationKnowledgeRegulatory(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Regulatory.Builder builder = MedicationKnowledge.Regulatory.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, substitutionElementIndex = 0, scheduleElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "regulatoryAuthority":
                    builder.regulatoryAuthority(parseReference("regulatoryAuthority", reader, -1));
                    break;
                case "substitution":
                    builder.substitution(parseMedicationKnowledgeRegulatorySubstitution("substitution", reader, substitutionElementIndex++));
                    break;
                case "schedule":
                    builder.schedule(parseMedicationKnowledgeRegulatorySchedule("schedule", reader, scheduleElementIndex++));
                    break;
                case "maxDispense":
                    builder.maxDispense(parseMedicationKnowledgeRegulatoryMaxDispense("maxDispense", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Regulatory.MaxDispense parseMedicationKnowledgeRegulatoryMaxDispense(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Regulatory.MaxDispense.Builder builder = MedicationKnowledge.Regulatory.MaxDispense.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "period":
                    builder.period((Duration) parseQuantity(Duration.builder(), "period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Regulatory.Schedule parseMedicationKnowledgeRegulatorySchedule(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Regulatory.Schedule.Builder builder = MedicationKnowledge.Regulatory.Schedule.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "schedule":
                    builder.schedule(parseCodeableConcept("schedule", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.Regulatory.Substitution parseMedicationKnowledgeRegulatorySubstitution(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.Regulatory.Substitution.Builder builder = MedicationKnowledge.Regulatory.Substitution.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "allowed":
                    builder.allowed(parseBoolean("allowed", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationKnowledge.RelatedMedicationKnowledge parseMedicationKnowledgeRelatedMedicationKnowledge(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationKnowledge.RelatedMedicationKnowledge.Builder builder = MedicationKnowledge.RelatedMedicationKnowledge.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, referenceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "reference":
                    builder.reference(parseReference("reference", reader, referenceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationRequest parseMedicationRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationRequest.Builder builder = MedicationRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, supportingInformationElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, insuranceElementIndex = 0, noteElementIndex = 0, dosageInstructionElementIndex = 0, detectedIssueElementIndex = 0, eventHistoryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((MedicationRequestStatus) parseString(MedicationRequestStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "intent":
                    builder.intent((MedicationRequestIntent) parseString(MedicationRequestIntent.builder(), "intent", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "priority":
                    builder.priority((MedicationRequestPriority) parseString(MedicationRequestPriority.builder(), "priority", reader, -1));
                    break;
                case "doNotPerform":
                    builder.doNotPerform(parseBoolean("doNotPerform", reader, -1));
                    break;
                case "reportedBoolean":
                    builder.reported(parseBoolean("reportedBoolean", reader, -1));
                    break;
                case "reportedReference":
                    builder.reported(parseReference("reportedReference", reader, -1));
                    break;
                case "medicationCodeableConcept":
                    builder.medication(parseCodeableConcept("medicationCodeableConcept", reader, -1));
                    break;
                case "medicationReference":
                    builder.medication(parseReference("medicationReference", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "supportingInformation":
                    builder.supportingInformation(parseReference("supportingInformation", reader, supportingInformationElementIndex++));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                case "performerType":
                    builder.performerType(parseCodeableConcept("performerType", reader, -1));
                    break;
                case "recorder":
                    builder.recorder(parseReference("recorder", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "groupIdentifier":
                    builder.groupIdentifier(parseIdentifier("groupIdentifier", reader, -1));
                    break;
                case "courseOfTherapyType":
                    builder.courseOfTherapyType(parseCodeableConcept("courseOfTherapyType", reader, -1));
                    break;
                case "insurance":
                    builder.insurance(parseReference("insurance", reader, insuranceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "dosageInstruction":
                    builder.dosageInstruction(parseDosage("dosageInstruction", reader, dosageInstructionElementIndex++));
                    break;
                case "dispenseRequest":
                    builder.dispenseRequest(parseMedicationRequestDispenseRequest("dispenseRequest", reader, -1));
                    break;
                case "substitution":
                    builder.substitution(parseMedicationRequestSubstitution("substitution", reader, -1));
                    break;
                case "priorPrescription":
                    builder.priorPrescription(parseReference("priorPrescription", reader, -1));
                    break;
                case "detectedIssue":
                    builder.detectedIssue(parseReference("detectedIssue", reader, detectedIssueElementIndex++));
                    break;
                case "eventHistory":
                    builder.eventHistory(parseReference("eventHistory", reader, eventHistoryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationRequest.DispenseRequest parseMedicationRequestDispenseRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationRequest.DispenseRequest.Builder builder = MedicationRequest.DispenseRequest.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "initialFill":
                    builder.initialFill(parseMedicationRequestDispenseRequestInitialFill("initialFill", reader, -1));
                    break;
                case "dispenseInterval":
                    builder.dispenseInterval((Duration) parseQuantity(Duration.builder(), "dispenseInterval", reader, -1));
                    break;
                case "validityPeriod":
                    builder.validityPeriod(parsePeriod("validityPeriod", reader, -1));
                    break;
                case "numberOfRepeatsAllowed":
                    builder.numberOfRepeatsAllowed((UnsignedInt) parseInteger(UnsignedInt.builder(), "numberOfRepeatsAllowed", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "expectedSupplyDuration":
                    builder.expectedSupplyDuration((Duration) parseQuantity(Duration.builder(), "expectedSupplyDuration", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationRequest.DispenseRequest.InitialFill parseMedicationRequestDispenseRequestInitialFill(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationRequest.DispenseRequest.InitialFill.Builder builder = MedicationRequest.DispenseRequest.InitialFill.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "duration":
                    builder.duration((Duration) parseQuantity(Duration.builder(), "duration", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationRequest.Substitution parseMedicationRequestSubstitution(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationRequest.Substitution.Builder builder = MedicationRequest.Substitution.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "allowedBoolean":
                    builder.allowed(parseBoolean("allowedBoolean", reader, -1));
                    break;
                case "allowedCodeableConcept":
                    builder.allowed(parseCodeableConcept("allowedCodeableConcept", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicationStatement parseMedicationStatement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicationStatement.Builder builder = MedicationStatement.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, statusReasonElementIndex = 0, derivedFromElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0, dosageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((MedicationStatementStatus) parseString(MedicationStatementStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, statusReasonElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "medicationCodeableConcept":
                    builder.medication(parseCodeableConcept("medicationCodeableConcept", reader, -1));
                    break;
                case "medicationReference":
                    builder.medication(parseReference("medicationReference", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "context":
                    builder.context(parseReference("context", reader, -1));
                    break;
                case "effectiveDateTime":
                    builder.effective(parseDateTime("effectiveDateTime", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effective(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "dateAsserted":
                    builder.dateAsserted(parseDateTime("dateAsserted", reader, -1));
                    break;
                case "informationSource":
                    builder.informationSource(parseReference("informationSource", reader, -1));
                    break;
                case "derivedFrom":
                    builder.derivedFrom(parseReference("derivedFrom", reader, derivedFromElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "dosage":
                    builder.dosage(parseDosage("dosage", reader, dosageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProduct parseMedicinalProduct(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProduct.Builder builder = MedicinalProduct.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, specialMeasuresElementIndex = 0, productClassificationElementIndex = 0, marketingStatusElementIndex = 0, pharmaceuticalProductElementIndex = 0, packagedMedicinalProductElementIndex = 0, attachedDocumentElementIndex = 0, masterFileElementIndex = 0, contactElementIndex = 0, clinicalTrialElementIndex = 0, nameElementIndex = 0, crossReferenceElementIndex = 0, manufacturingBusinessOperationElementIndex = 0, specialDesignationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "domain":
                    builder.domain(parseCoding("domain", reader, -1));
                    break;
                case "combinedPharmaceuticalDoseForm":
                    builder.combinedPharmaceuticalDoseForm(parseCodeableConcept("combinedPharmaceuticalDoseForm", reader, -1));
                    break;
                case "legalStatusOfSupply":
                    builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", reader, -1));
                    break;
                case "additionalMonitoringIndicator":
                    builder.additionalMonitoringIndicator(parseCodeableConcept("additionalMonitoringIndicator", reader, -1));
                    break;
                case "specialMeasures":
                    builder.specialMeasures(parseString("specialMeasures", reader, specialMeasuresElementIndex++));
                    break;
                case "paediatricUseIndicator":
                    builder.paediatricUseIndicator(parseCodeableConcept("paediatricUseIndicator", reader, -1));
                    break;
                case "productClassification":
                    builder.productClassification(parseCodeableConcept("productClassification", reader, productClassificationElementIndex++));
                    break;
                case "marketingStatus":
                    builder.marketingStatus(parseMarketingStatus("marketingStatus", reader, marketingStatusElementIndex++));
                    break;
                case "pharmaceuticalProduct":
                    builder.pharmaceuticalProduct(parseReference("pharmaceuticalProduct", reader, pharmaceuticalProductElementIndex++));
                    break;
                case "packagedMedicinalProduct":
                    builder.packagedMedicinalProduct(parseReference("packagedMedicinalProduct", reader, packagedMedicinalProductElementIndex++));
                    break;
                case "attachedDocument":
                    builder.attachedDocument(parseReference("attachedDocument", reader, attachedDocumentElementIndex++));
                    break;
                case "masterFile":
                    builder.masterFile(parseReference("masterFile", reader, masterFileElementIndex++));
                    break;
                case "contact":
                    builder.contact(parseReference("contact", reader, contactElementIndex++));
                    break;
                case "clinicalTrial":
                    builder.clinicalTrial(parseReference("clinicalTrial", reader, clinicalTrialElementIndex++));
                    break;
                case "name":
                    builder.name(parseMedicinalProductName("name", reader, nameElementIndex++));
                    break;
                case "crossReference":
                    builder.crossReference(parseIdentifier("crossReference", reader, crossReferenceElementIndex++));
                    break;
                case "manufacturingBusinessOperation":
                    builder.manufacturingBusinessOperation(parseMedicinalProductManufacturingBusinessOperation("manufacturingBusinessOperation", reader, manufacturingBusinessOperationElementIndex++));
                    break;
                case "specialDesignation":
                    builder.specialDesignation(parseMedicinalProductSpecialDesignation("specialDesignation", reader, specialDesignationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProduct.ManufacturingBusinessOperation parseMedicinalProductManufacturingBusinessOperation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProduct.ManufacturingBusinessOperation.Builder builder = MedicinalProduct.ManufacturingBusinessOperation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, manufacturerElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operationType":
                    builder.operationType(parseCodeableConcept("operationType", reader, -1));
                    break;
                case "authorisationReferenceNumber":
                    builder.authorisationReferenceNumber(parseIdentifier("authorisationReferenceNumber", reader, -1));
                    break;
                case "effectiveDate":
                    builder.effectiveDate(parseDateTime("effectiveDate", reader, -1));
                    break;
                case "confidentialityIndicator":
                    builder.confidentialityIndicator(parseCodeableConcept("confidentialityIndicator", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, manufacturerElementIndex++));
                    break;
                case "regulator":
                    builder.regulator(parseReference("regulator", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProduct.Name parseMedicinalProductName(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProduct.Name.Builder builder = MedicinalProduct.Name.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, namePartElementIndex = 0, countryLanguageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "productName":
                    builder.productName(parseString("productName", reader, -1));
                    break;
                case "namePart":
                    builder.namePart(parseMedicinalProductNameNamePart("namePart", reader, namePartElementIndex++));
                    break;
                case "countryLanguage":
                    builder.countryLanguage(parseMedicinalProductNameCountryLanguage("countryLanguage", reader, countryLanguageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProduct.Name.CountryLanguage parseMedicinalProductNameCountryLanguage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProduct.Name.CountryLanguage.Builder builder = MedicinalProduct.Name.CountryLanguage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "country":
                    builder.country(parseCodeableConcept("country", reader, -1));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, -1));
                    break;
                case "language":
                    builder.language(parseCodeableConcept("language", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProduct.Name.NamePart parseMedicinalProductNameNamePart(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProduct.Name.NamePart.Builder builder = MedicinalProduct.Name.NamePart.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "part":
                    builder.part(parseString("part", reader, -1));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProduct.SpecialDesignation parseMedicinalProductSpecialDesignation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProduct.SpecialDesignation.Builder builder = MedicinalProduct.SpecialDesignation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "intendedUse":
                    builder.intendedUse(parseCodeableConcept("intendedUse", reader, -1));
                    break;
                case "indicationCodeableConcept":
                    builder.indication(parseCodeableConcept("indicationCodeableConcept", reader, -1));
                    break;
                case "indicationReference":
                    builder.indication(parseReference("indicationReference", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "species":
                    builder.species(parseCodeableConcept("species", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductAuthorization parseMedicinalProductAuthorization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductAuthorization.Builder builder = MedicinalProductAuthorization.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, countryElementIndex = 0, jurisdictionElementIndex = 0, jurisdictionalAuthorizationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "country":
                    builder.country(parseCodeableConcept("country", reader, countryElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "statusDate":
                    builder.statusDate(parseDateTime("statusDate", reader, -1));
                    break;
                case "restoreDate":
                    builder.restoreDate(parseDateTime("restoreDate", reader, -1));
                    break;
                case "validityPeriod":
                    builder.validityPeriod(parsePeriod("validityPeriod", reader, -1));
                    break;
                case "dataExclusivityPeriod":
                    builder.dataExclusivityPeriod(parsePeriod("dataExclusivityPeriod", reader, -1));
                    break;
                case "dateOfFirstAuthorization":
                    builder.dateOfFirstAuthorization(parseDateTime("dateOfFirstAuthorization", reader, -1));
                    break;
                case "internationalBirthDate":
                    builder.internationalBirthDate(parseDateTime("internationalBirthDate", reader, -1));
                    break;
                case "legalBasis":
                    builder.legalBasis(parseCodeableConcept("legalBasis", reader, -1));
                    break;
                case "jurisdictionalAuthorization":
                    builder.jurisdictionalAuthorization(parseMedicinalProductAuthorizationJurisdictionalAuthorization("jurisdictionalAuthorization", reader, jurisdictionalAuthorizationElementIndex++));
                    break;
                case "holder":
                    builder.holder(parseReference("holder", reader, -1));
                    break;
                case "regulator":
                    builder.regulator(parseReference("regulator", reader, -1));
                    break;
                case "procedure":
                    builder.procedure(parseMedicinalProductAuthorizationProcedure("procedure", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductAuthorization.JurisdictionalAuthorization parseMedicinalProductAuthorizationJurisdictionalAuthorization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductAuthorization.JurisdictionalAuthorization.Builder builder = MedicinalProductAuthorization.JurisdictionalAuthorization.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, jurisdictionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "country":
                    builder.country(parseCodeableConcept("country", reader, -1));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "legalStatusOfSupply":
                    builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", reader, -1));
                    break;
                case "validityPeriod":
                    builder.validityPeriod(parsePeriod("validityPeriod", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductAuthorization.Procedure parseMedicinalProductAuthorizationProcedure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductAuthorization.Procedure.Builder builder = MedicinalProductAuthorization.Procedure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, applicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "datePeriod":
                    builder.date(parsePeriod("datePeriod", reader, -1));
                    break;
                case "dateDateTime":
                    builder.date(parseDateTime("dateDateTime", reader, -1));
                    break;
                case "application":
                    builder.application(parseMedicinalProductAuthorizationProcedure("application", reader, applicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductContraindication parseMedicinalProductContraindication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductContraindication.Builder builder = MedicinalProductContraindication.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, subjectElementIndex = 0, comorbidityElementIndex = 0, therapeuticIndicationElementIndex = 0, otherTherapyElementIndex = 0, populationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "disease":
                    builder.disease(parseCodeableConcept("disease", reader, -1));
                    break;
                case "diseaseStatus":
                    builder.diseaseStatus(parseCodeableConcept("diseaseStatus", reader, -1));
                    break;
                case "comorbidity":
                    builder.comorbidity(parseCodeableConcept("comorbidity", reader, comorbidityElementIndex++));
                    break;
                case "therapeuticIndication":
                    builder.therapeuticIndication(parseReference("therapeuticIndication", reader, therapeuticIndicationElementIndex++));
                    break;
                case "otherTherapy":
                    builder.otherTherapy(parseMedicinalProductContraindicationOtherTherapy("otherTherapy", reader, otherTherapyElementIndex++));
                    break;
                case "population":
                    builder.population(parsePopulation("population", reader, populationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductContraindication.OtherTherapy parseMedicinalProductContraindicationOtherTherapy(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductContraindication.OtherTherapy.Builder builder = MedicinalProductContraindication.OtherTherapy.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "therapyRelationshipType":
                    builder.therapyRelationshipType(parseCodeableConcept("therapyRelationshipType", reader, -1));
                    break;
                case "medicationCodeableConcept":
                    builder.medication(parseCodeableConcept("medicationCodeableConcept", reader, -1));
                    break;
                case "medicationReference":
                    builder.medication(parseReference("medicationReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIndication parseMedicinalProductIndication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIndication.Builder builder = MedicinalProductIndication.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, subjectElementIndex = 0, comorbidityElementIndex = 0, otherTherapyElementIndex = 0, undesirableEffectElementIndex = 0, populationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "diseaseSymptomProcedure":
                    builder.diseaseSymptomProcedure(parseCodeableConcept("diseaseSymptomProcedure", reader, -1));
                    break;
                case "diseaseStatus":
                    builder.diseaseStatus(parseCodeableConcept("diseaseStatus", reader, -1));
                    break;
                case "comorbidity":
                    builder.comorbidity(parseCodeableConcept("comorbidity", reader, comorbidityElementIndex++));
                    break;
                case "intendedEffect":
                    builder.intendedEffect(parseCodeableConcept("intendedEffect", reader, -1));
                    break;
                case "duration":
                    builder.duration(parseQuantity("duration", reader, -1));
                    break;
                case "otherTherapy":
                    builder.otherTherapy(parseMedicinalProductIndicationOtherTherapy("otherTherapy", reader, otherTherapyElementIndex++));
                    break;
                case "undesirableEffect":
                    builder.undesirableEffect(parseReference("undesirableEffect", reader, undesirableEffectElementIndex++));
                    break;
                case "population":
                    builder.population(parsePopulation("population", reader, populationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIndication.OtherTherapy parseMedicinalProductIndicationOtherTherapy(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIndication.OtherTherapy.Builder builder = MedicinalProductIndication.OtherTherapy.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "therapyRelationshipType":
                    builder.therapyRelationshipType(parseCodeableConcept("therapyRelationshipType", reader, -1));
                    break;
                case "medicationCodeableConcept":
                    builder.medication(parseCodeableConcept("medicationCodeableConcept", reader, -1));
                    break;
                case "medicationReference":
                    builder.medication(parseReference("medicationReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIngredient parseMedicinalProductIngredient(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIngredient.Builder builder = MedicinalProductIngredient.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, manufacturerElementIndex = 0, specifiedSubstanceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "allergenicIndicator":
                    builder.allergenicIndicator(parseBoolean("allergenicIndicator", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, manufacturerElementIndex++));
                    break;
                case "specifiedSubstance":
                    builder.specifiedSubstance(parseMedicinalProductIngredientSpecifiedSubstance("specifiedSubstance", reader, specifiedSubstanceElementIndex++));
                    break;
                case "substance":
                    builder.substance(parseMedicinalProductIngredientSubstance("substance", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIngredient.SpecifiedSubstance parseMedicinalProductIngredientSpecifiedSubstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIngredient.SpecifiedSubstance.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, strengthElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "group":
                    builder.group(parseCodeableConcept("group", reader, -1));
                    break;
                case "confidentiality":
                    builder.confidentiality(parseCodeableConcept("confidentiality", reader, -1));
                    break;
                case "strength":
                    builder.strength(parseMedicinalProductIngredientSpecifiedSubstanceStrength("strength", reader, strengthElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIngredient.SpecifiedSubstance.Strength parseMedicinalProductIngredientSpecifiedSubstanceStrength(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIngredient.SpecifiedSubstance.Strength.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.Strength.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, countryElementIndex = 0, referenceStrengthElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "presentation":
                    builder.presentation(parseRatio("presentation", reader, -1));
                    break;
                case "presentationLowLimit":
                    builder.presentationLowLimit(parseRatio("presentationLowLimit", reader, -1));
                    break;
                case "concentration":
                    builder.concentration(parseRatio("concentration", reader, -1));
                    break;
                case "concentrationLowLimit":
                    builder.concentrationLowLimit(parseRatio("concentrationLowLimit", reader, -1));
                    break;
                case "measurementPoint":
                    builder.measurementPoint(parseString("measurementPoint", reader, -1));
                    break;
                case "country":
                    builder.country(parseCodeableConcept("country", reader, countryElementIndex++));
                    break;
                case "referenceStrength":
                    builder.referenceStrength(parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength("referenceStrength", reader, referenceStrengthElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength parseMedicinalProductIngredientSpecifiedSubstanceStrengthReferenceStrength(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.Builder builder = MedicinalProductIngredient.SpecifiedSubstance.Strength.ReferenceStrength.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, countryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "substance":
                    builder.substance(parseCodeableConcept("substance", reader, -1));
                    break;
                case "strength":
                    builder.strength(parseRatio("strength", reader, -1));
                    break;
                case "strengthLowLimit":
                    builder.strengthLowLimit(parseRatio("strengthLowLimit", reader, -1));
                    break;
                case "measurementPoint":
                    builder.measurementPoint(parseString("measurementPoint", reader, -1));
                    break;
                case "country":
                    builder.country(parseCodeableConcept("country", reader, countryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductIngredient.Substance parseMedicinalProductIngredientSubstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductIngredient.Substance.Builder builder = MedicinalProductIngredient.Substance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, strengthElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "strength":
                    builder.strength(parseMedicinalProductIngredientSpecifiedSubstanceStrength("strength", reader, strengthElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductInteraction parseMedicinalProductInteraction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductInteraction.Builder builder = MedicinalProductInteraction.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, subjectElementIndex = 0, interactantElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "interactant":
                    builder.interactant(parseMedicinalProductInteractionInteractant("interactant", reader, interactantElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "effect":
                    builder.effect(parseCodeableConcept("effect", reader, -1));
                    break;
                case "incidence":
                    builder.incidence(parseCodeableConcept("incidence", reader, -1));
                    break;
                case "management":
                    builder.management(parseCodeableConcept("management", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductInteraction.Interactant parseMedicinalProductInteractionInteractant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductInteraction.Interactant.Builder builder = MedicinalProductInteraction.Interactant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "itemReference":
                    builder.item(parseReference("itemReference", reader, -1));
                    break;
                case "itemCodeableConcept":
                    builder.item(parseCodeableConcept("itemCodeableConcept", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductManufactured parseMedicinalProductManufactured(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductManufactured.Builder builder = MedicinalProductManufactured.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, manufacturerElementIndex = 0, ingredientElementIndex = 0, otherCharacteristicsElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "manufacturedDoseForm":
                    builder.manufacturedDoseForm(parseCodeableConcept("manufacturedDoseForm", reader, -1));
                    break;
                case "unitOfPresentation":
                    builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", reader, -1));
                    break;
                case "quantity":
                    builder.quantity(parseQuantity("quantity", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, manufacturerElementIndex++));
                    break;
                case "ingredient":
                    builder.ingredient(parseReference("ingredient", reader, ingredientElementIndex++));
                    break;
                case "physicalCharacteristics":
                    builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", reader, -1));
                    break;
                case "otherCharacteristics":
                    builder.otherCharacteristics(parseCodeableConcept("otherCharacteristics", reader, otherCharacteristicsElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPackaged parseMedicinalProductPackaged(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPackaged.Builder builder = MedicinalProductPackaged.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, subjectElementIndex = 0, marketingStatusElementIndex = 0, manufacturerElementIndex = 0, batchIdentifierElementIndex = 0, packageItemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "legalStatusOfSupply":
                    builder.legalStatusOfSupply(parseCodeableConcept("legalStatusOfSupply", reader, -1));
                    break;
                case "marketingStatus":
                    builder.marketingStatus(parseMarketingStatus("marketingStatus", reader, marketingStatusElementIndex++));
                    break;
                case "marketingAuthorization":
                    builder.marketingAuthorization(parseReference("marketingAuthorization", reader, -1));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, manufacturerElementIndex++));
                    break;
                case "batchIdentifier":
                    builder.batchIdentifier(parseMedicinalProductPackagedBatchIdentifier("batchIdentifier", reader, batchIdentifierElementIndex++));
                    break;
                case "packageItem":
                    builder.packageItem(parseMedicinalProductPackagedPackageItem("packageItem", reader, packageItemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPackaged.BatchIdentifier parseMedicinalProductPackagedBatchIdentifier(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPackaged.BatchIdentifier.Builder builder = MedicinalProductPackaged.BatchIdentifier.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "outerPackaging":
                    builder.outerPackaging(parseIdentifier("outerPackaging", reader, -1));
                    break;
                case "immediatePackaging":
                    builder.immediatePackaging(parseIdentifier("immediatePackaging", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPackaged.PackageItem parseMedicinalProductPackagedPackageItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPackaged.PackageItem.Builder builder = MedicinalProductPackaged.PackageItem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, materialElementIndex = 0, alternateMaterialElementIndex = 0, deviceElementIndex = 0, manufacturedItemElementIndex = 0, packageItemElementIndex = 0, otherCharacteristicsElementIndex = 0, shelfLifeStorageElementIndex = 0, manufacturerElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "quantity":
                    builder.quantity(parseQuantity("quantity", reader, -1));
                    break;
                case "material":
                    builder.material(parseCodeableConcept("material", reader, materialElementIndex++));
                    break;
                case "alternateMaterial":
                    builder.alternateMaterial(parseCodeableConcept("alternateMaterial", reader, alternateMaterialElementIndex++));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, deviceElementIndex++));
                    break;
                case "manufacturedItem":
                    builder.manufacturedItem(parseReference("manufacturedItem", reader, manufacturedItemElementIndex++));
                    break;
                case "packageItem":
                    builder.packageItem(parseMedicinalProductPackagedPackageItem("packageItem", reader, packageItemElementIndex++));
                    break;
                case "physicalCharacteristics":
                    builder.physicalCharacteristics(parseProdCharacteristic("physicalCharacteristics", reader, -1));
                    break;
                case "otherCharacteristics":
                    builder.otherCharacteristics(parseCodeableConcept("otherCharacteristics", reader, otherCharacteristicsElementIndex++));
                    break;
                case "shelfLifeStorage":
                    builder.shelfLifeStorage(parseProductShelfLife("shelfLifeStorage", reader, shelfLifeStorageElementIndex++));
                    break;
                case "manufacturer":
                    builder.manufacturer(parseReference("manufacturer", reader, manufacturerElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPharmaceutical parseMedicinalProductPharmaceutical(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPharmaceutical.Builder builder = MedicinalProductPharmaceutical.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, ingredientElementIndex = 0, deviceElementIndex = 0, characteristicsElementIndex = 0, routeOfAdministrationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "administrableDoseForm":
                    builder.administrableDoseForm(parseCodeableConcept("administrableDoseForm", reader, -1));
                    break;
                case "unitOfPresentation":
                    builder.unitOfPresentation(parseCodeableConcept("unitOfPresentation", reader, -1));
                    break;
                case "ingredient":
                    builder.ingredient(parseReference("ingredient", reader, ingredientElementIndex++));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, deviceElementIndex++));
                    break;
                case "characteristics":
                    builder.characteristics(parseMedicinalProductPharmaceuticalCharacteristics("characteristics", reader, characteristicsElementIndex++));
                    break;
                case "routeOfAdministration":
                    builder.routeOfAdministration(parseMedicinalProductPharmaceuticalRouteOfAdministration("routeOfAdministration", reader, routeOfAdministrationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPharmaceutical.Characteristics parseMedicinalProductPharmaceuticalCharacteristics(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPharmaceutical.Characteristics.Builder builder = MedicinalProductPharmaceutical.Characteristics.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPharmaceutical.RouteOfAdministration parseMedicinalProductPharmaceuticalRouteOfAdministration(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPharmaceutical.RouteOfAdministration.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetSpeciesElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "firstDose":
                    builder.firstDose(parseQuantity("firstDose", reader, -1));
                    break;
                case "maxSingleDose":
                    builder.maxSingleDose(parseQuantity("maxSingleDose", reader, -1));
                    break;
                case "maxDosePerDay":
                    builder.maxDosePerDay(parseQuantity("maxDosePerDay", reader, -1));
                    break;
                case "maxDosePerTreatmentPeriod":
                    builder.maxDosePerTreatmentPeriod(parseRatio("maxDosePerTreatmentPeriod", reader, -1));
                    break;
                case "maxTreatmentPeriod":
                    builder.maxTreatmentPeriod((Duration) parseQuantity(Duration.builder(), "maxTreatmentPeriod", reader, -1));
                    break;
                case "targetSpecies":
                    builder.targetSpecies(parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies("targetSpecies", reader, targetSpeciesElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpecies(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, withdrawalPeriodElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "withdrawalPeriod":
                    builder.withdrawalPeriod(parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod("withdrawalPeriod", reader, withdrawalPeriodElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod parseMedicinalProductPharmaceuticalRouteOfAdministrationTargetSpeciesWithdrawalPeriod(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.Builder builder = MedicinalProductPharmaceutical.RouteOfAdministration.TargetSpecies.WithdrawalPeriod.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "tissue":
                    builder.tissue(parseCodeableConcept("tissue", reader, -1));
                    break;
                case "value":
                    builder.value(parseQuantity("value", reader, -1));
                    break;
                case "supportingInformation":
                    builder.supportingInformation(parseString("supportingInformation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MedicinalProductUndesirableEffect parseMedicinalProductUndesirableEffect(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MedicinalProductUndesirableEffect.Builder builder = MedicinalProductUndesirableEffect.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, subjectElementIndex = 0, populationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, subjectElementIndex++));
                    break;
                case "symptomConditionEffect":
                    builder.symptomConditionEffect(parseCodeableConcept("symptomConditionEffect", reader, -1));
                    break;
                case "classification":
                    builder.classification(parseCodeableConcept("classification", reader, -1));
                    break;
                case "frequencyOfOccurrence":
                    builder.frequencyOfOccurrence(parseCodeableConcept("frequencyOfOccurrence", reader, -1));
                    break;
                case "population":
                    builder.population(parsePopulation("population", reader, populationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageDefinition parseMessageDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageDefinition.Builder builder = MessageDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, replacesElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, parentElementIndex = 0, focusElementIndex = 0, allowedResponseElementIndex = 0, graphElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "replaces":
                    builder.replaces((Canonical) parseUri(Canonical.builder(), "replaces", reader, replacesElementIndex++));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "base":
                    builder.base((Canonical) parseUri(Canonical.builder(), "base", reader, -1));
                    break;
                case "parent":
                    builder.parent((Canonical) parseUri(Canonical.builder(), "parent", reader, parentElementIndex++));
                    break;
                case "eventCoding":
                    builder.event(parseCoding("eventCoding", reader, -1));
                    break;
                case "eventUri":
                    builder.event(parseUri("eventUri", reader, -1));
                    break;
                case "category":
                    builder.category((MessageSignificanceCategory) parseString(MessageSignificanceCategory.builder(), "category", reader, -1));
                    break;
                case "focus":
                    builder.focus(parseMessageDefinitionFocus("focus", reader, focusElementIndex++));
                    break;
                case "responseRequired":
                    builder.responseRequired((MessageHeaderResponseRequest) parseString(MessageHeaderResponseRequest.builder(), "responseRequired", reader, -1));
                    break;
                case "allowedResponse":
                    builder.allowedResponse(parseMessageDefinitionAllowedResponse("allowedResponse", reader, allowedResponseElementIndex++));
                    break;
                case "graph":
                    builder.graph((Canonical) parseUri(Canonical.builder(), "graph", reader, graphElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageDefinition.AllowedResponse parseMessageDefinitionAllowedResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageDefinition.AllowedResponse.Builder builder = MessageDefinition.AllowedResponse.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "message":
                    builder.message((Canonical) parseUri(Canonical.builder(), "message", reader, -1));
                    break;
                case "situation":
                    builder.situation((Markdown) parseString(Markdown.builder(), "situation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageDefinition.Focus parseMessageDefinitionFocus(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageDefinition.Focus.Builder builder = MessageDefinition.Focus.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((ResourceType) parseString(ResourceType.builder(), "code", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                case "min":
                    builder.min((UnsignedInt) parseInteger(UnsignedInt.builder(), "min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageHeader parseMessageHeader(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageHeader.Builder builder = MessageHeader.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, destinationElementIndex = 0, focusElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "eventCoding":
                    builder.event(parseCoding("eventCoding", reader, -1));
                    break;
                case "eventUri":
                    builder.event(parseUri("eventUri", reader, -1));
                    break;
                case "destination":
                    builder.destination(parseMessageHeaderDestination("destination", reader, destinationElementIndex++));
                    break;
                case "sender":
                    builder.sender(parseReference("sender", reader, -1));
                    break;
                case "enterer":
                    builder.enterer(parseReference("enterer", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "source":
                    builder.source(parseMessageHeaderSource("source", reader, -1));
                    break;
                case "responsible":
                    builder.responsible(parseReference("responsible", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, -1));
                    break;
                case "response":
                    builder.response(parseMessageHeaderResponse("response", reader, -1));
                    break;
                case "focus":
                    builder.focus(parseReference("focus", reader, focusElementIndex++));
                    break;
                case "definition":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definition", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageHeader.Destination parseMessageHeaderDestination(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageHeader.Destination.Builder builder = MessageHeader.Destination.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "target":
                    builder.target(parseReference("target", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint((Url) parseUri(Url.builder(), "endpoint", reader, -1));
                    break;
                case "receiver":
                    builder.receiver(parseReference("receiver", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageHeader.Response parseMessageHeaderResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageHeader.Response.Builder builder = MessageHeader.Response.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier((Id) parseString(Id.builder(), "identifier", reader, -1));
                    break;
                case "code":
                    builder.code((ResponseType) parseString(ResponseType.builder(), "code", reader, -1));
                    break;
                case "details":
                    builder.details(parseReference("details", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MessageHeader.Source parseMessageHeaderSource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MessageHeader.Source.Builder builder = MessageHeader.Source.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "software":
                    builder.software(parseString("software", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactPoint("contact", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint((Url) parseUri(Url.builder(), "endpoint", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Meta parseMeta(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Meta.Builder builder = Meta.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, profileElementIndex = 0, securityElementIndex = 0, tagElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "versionId":
                    builder.versionId((Id) parseString(Id.builder(), "versionId", reader, -1));
                    break;
                case "lastUpdated":
                    builder.lastUpdated(parseInstant("lastUpdated", reader, -1));
                    break;
                case "source":
                    builder.source(parseUri("source", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, profileElementIndex++));
                    break;
                case "security":
                    builder.security(parseCoding("security", reader, securityElementIndex++));
                    break;
                case "tag":
                    builder.tag(parseCoding("tag", reader, tagElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MetadataResource parseMetadataResource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MetadataResource.Builder builder = MetadataResource.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence parseMolecularSequence(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.Builder builder = MolecularSequence.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, variantElementIndex = 0, qualityElementIndex = 0, repositoryElementIndex = 0, pointerElementIndex = 0, structureVariantElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "type":
                    builder.type((SequenceType) parseString(SequenceType.builder(), "type", reader, -1));
                    break;
                case "coordinateSystem":
                    builder.coordinateSystem(parseInteger("coordinateSystem", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "specimen":
                    builder.specimen(parseReference("specimen", reader, -1));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                case "quantity":
                    builder.quantity(parseQuantity("quantity", reader, -1));
                    break;
                case "referenceSeq":
                    builder.referenceSeq(parseMolecularSequenceReferenceSeq("referenceSeq", reader, -1));
                    break;
                case "variant":
                    builder.variant(parseMolecularSequenceVariant("variant", reader, variantElementIndex++));
                    break;
                case "observedSeq":
                    builder.observedSeq(parseString("observedSeq", reader, -1));
                    break;
                case "quality":
                    builder.quality(parseMolecularSequenceQuality("quality", reader, qualityElementIndex++));
                    break;
                case "readCoverage":
                    builder.readCoverage(parseInteger("readCoverage", reader, -1));
                    break;
                case "repository":
                    builder.repository(parseMolecularSequenceRepository("repository", reader, repositoryElementIndex++));
                    break;
                case "pointer":
                    builder.pointer(parseReference("pointer", reader, pointerElementIndex++));
                    break;
                case "structureVariant":
                    builder.structureVariant(parseMolecularSequenceStructureVariant("structureVariant", reader, structureVariantElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.Quality parseMolecularSequenceQuality(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.Quality.Builder builder = MolecularSequence.Quality.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((QualityType) parseString(QualityType.builder(), "type", reader, -1));
                    break;
                case "standardSequence":
                    builder.standardSequence(parseCodeableConcept("standardSequence", reader, -1));
                    break;
                case "start":
                    builder.start(parseInteger("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInteger("end", reader, -1));
                    break;
                case "score":
                    builder.score(parseQuantity("score", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "truthTP":
                    builder.truthTP(parseDecimal("truthTP", reader, -1));
                    break;
                case "queryTP":
                    builder.queryTP(parseDecimal("queryTP", reader, -1));
                    break;
                case "truthFN":
                    builder.truthFN(parseDecimal("truthFN", reader, -1));
                    break;
                case "queryFP":
                    builder.queryFP(parseDecimal("queryFP", reader, -1));
                    break;
                case "gtFP":
                    builder.gtFP(parseDecimal("gtFP", reader, -1));
                    break;
                case "precision":
                    builder.precision(parseDecimal("precision", reader, -1));
                    break;
                case "recall":
                    builder.recall(parseDecimal("recall", reader, -1));
                    break;
                case "fScore":
                    builder.fScore(parseDecimal("fScore", reader, -1));
                    break;
                case "roc":
                    builder.roc(parseMolecularSequenceQualityRoc("roc", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.Quality.Roc parseMolecularSequenceQualityRoc(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.Quality.Roc.Builder builder = MolecularSequence.Quality.Roc.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, scoreElementIndex = 0, numTPElementIndex = 0, numFPElementIndex = 0, numFNElementIndex = 0, precisionElementIndex = 0, sensitivityElementIndex = 0, fMeasureElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "score":
                    builder.score(parseInteger("score", reader, scoreElementIndex++));
                    break;
                case "numTP":
                    builder.numTP(parseInteger("numTP", reader, numTPElementIndex++));
                    break;
                case "numFP":
                    builder.numFP(parseInteger("numFP", reader, numFPElementIndex++));
                    break;
                case "numFN":
                    builder.numFN(parseInteger("numFN", reader, numFNElementIndex++));
                    break;
                case "precision":
                    builder.precision(parseDecimal("precision", reader, precisionElementIndex++));
                    break;
                case "sensitivity":
                    builder.sensitivity(parseDecimal("sensitivity", reader, sensitivityElementIndex++));
                    break;
                case "fMeasure":
                    builder.fMeasure(parseDecimal("fMeasure", reader, fMeasureElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.ReferenceSeq parseMolecularSequenceReferenceSeq(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.ReferenceSeq.Builder builder = MolecularSequence.ReferenceSeq.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "chromosome":
                    builder.chromosome(parseCodeableConcept("chromosome", reader, -1));
                    break;
                case "genomeBuild":
                    builder.genomeBuild(parseString("genomeBuild", reader, -1));
                    break;
                case "orientation":
                    builder.orientation((OrientationType) parseString(OrientationType.builder(), "orientation", reader, -1));
                    break;
                case "referenceSeqId":
                    builder.referenceSeqId(parseCodeableConcept("referenceSeqId", reader, -1));
                    break;
                case "referenceSeqPointer":
                    builder.referenceSeqPointer(parseReference("referenceSeqPointer", reader, -1));
                    break;
                case "referenceSeqString":
                    builder.referenceSeqString(parseString("referenceSeqString", reader, -1));
                    break;
                case "strand":
                    builder.strand((StrandType) parseString(StrandType.builder(), "strand", reader, -1));
                    break;
                case "windowStart":
                    builder.windowStart(parseInteger("windowStart", reader, -1));
                    break;
                case "windowEnd":
                    builder.windowEnd(parseInteger("windowEnd", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.Repository parseMolecularSequenceRepository(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.Repository.Builder builder = MolecularSequence.Repository.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((RepositoryType) parseString(RepositoryType.builder(), "type", reader, -1));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "datasetId":
                    builder.datasetId(parseString("datasetId", reader, -1));
                    break;
                case "variantsetId":
                    builder.variantsetId(parseString("variantsetId", reader, -1));
                    break;
                case "readsetId":
                    builder.readsetId(parseString("readsetId", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.StructureVariant parseMolecularSequenceStructureVariant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.StructureVariant.Builder builder = MolecularSequence.StructureVariant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "variantType":
                    builder.variantType(parseCodeableConcept("variantType", reader, -1));
                    break;
                case "exact":
                    builder.exact(parseBoolean("exact", reader, -1));
                    break;
                case "length":
                    builder.length(parseInteger("length", reader, -1));
                    break;
                case "outer":
                    builder.outer(parseMolecularSequenceStructureVariantOuter("outer", reader, -1));
                    break;
                case "inner":
                    builder.inner(parseMolecularSequenceStructureVariantInner("inner", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.StructureVariant.Inner parseMolecularSequenceStructureVariantInner(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.StructureVariant.Inner.Builder builder = MolecularSequence.StructureVariant.Inner.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "start":
                    builder.start(parseInteger("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInteger("end", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.StructureVariant.Outer parseMolecularSequenceStructureVariantOuter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.StructureVariant.Outer.Builder builder = MolecularSequence.StructureVariant.Outer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "start":
                    builder.start(parseInteger("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInteger("end", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private MolecularSequence.Variant parseMolecularSequenceVariant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        MolecularSequence.Variant.Builder builder = MolecularSequence.Variant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "start":
                    builder.start(parseInteger("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInteger("end", reader, -1));
                    break;
                case "observedAllele":
                    builder.observedAllele(parseString("observedAllele", reader, -1));
                    break;
                case "referenceAllele":
                    builder.referenceAllele(parseString("referenceAllele", reader, -1));
                    break;
                case "cigar":
                    builder.cigar(parseString("cigar", reader, -1));
                    break;
                case "variantPointer":
                    builder.variantPointer(parseReference("variantPointer", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Money parseMoney(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Money.Builder builder = Money.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "value":
                    builder.value(parseDecimal("value", reader, -1));
                    break;
                case "currency":
                    builder.currency((Code) parseString(Code.builder(), "currency", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NamingSystem parseNamingSystem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NamingSystem.Builder builder = NamingSystem.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, uniqueIdElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "kind":
                    builder.kind((NamingSystemType) parseString(NamingSystemType.builder(), "kind", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "responsible":
                    builder.responsible(parseString("responsible", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "uniqueId":
                    builder.uniqueId(parseNamingSystemUniqueId("uniqueId", reader, uniqueIdElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NamingSystem.UniqueId parseNamingSystemUniqueId(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NamingSystem.UniqueId.Builder builder = NamingSystem.UniqueId.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((NamingSystemIdentifierType) parseString(NamingSystemIdentifierType.builder(), "type", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                case "preferred":
                    builder.preferred(parseBoolean("preferred", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Narrative parseNarrative(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Narrative.Builder builder = Narrative.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                if ("div".equals(localName)) {
                    requireNamespace(reader, XHTML_NS_URI);
                } else {
                    requireNamespace(reader, FHIR_NS_URI);
                }
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "status":
                    builder.status((NarrativeStatus) parseString(NarrativeStatus.builder(), "status", reader, -1));
                    break;
                case "div":
                    builder.div(parseJavaString("div", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder parseNutritionOrder(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.Builder builder = NutritionOrder.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, instantiatesElementIndex = 0, allergyIntoleranceElementIndex = 0, foodPreferenceModifierElementIndex = 0, excludeFoodModifierElementIndex = 0, supplementElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "instantiates":
                    builder.instantiates(parseUri("instantiates", reader, instantiatesElementIndex++));
                    break;
                case "status":
                    builder.status((NutritionOrderStatus) parseString(NutritionOrderStatus.builder(), "status", reader, -1));
                    break;
                case "intent":
                    builder.intent((NutritionOrderIntent) parseString(NutritionOrderIntent.builder(), "intent", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "dateTime":
                    builder.dateTime(parseDateTime("dateTime", reader, -1));
                    break;
                case "orderer":
                    builder.orderer(parseReference("orderer", reader, -1));
                    break;
                case "allergyIntolerance":
                    builder.allergyIntolerance(parseReference("allergyIntolerance", reader, allergyIntoleranceElementIndex++));
                    break;
                case "foodPreferenceModifier":
                    builder.foodPreferenceModifier(parseCodeableConcept("foodPreferenceModifier", reader, foodPreferenceModifierElementIndex++));
                    break;
                case "excludeFoodModifier":
                    builder.excludeFoodModifier(parseCodeableConcept("excludeFoodModifier", reader, excludeFoodModifierElementIndex++));
                    break;
                case "oralDiet":
                    builder.oralDiet(parseNutritionOrderOralDiet("oralDiet", reader, -1));
                    break;
                case "supplement":
                    builder.supplement(parseNutritionOrderSupplement("supplement", reader, supplementElementIndex++));
                    break;
                case "enteralFormula":
                    builder.enteralFormula(parseNutritionOrderEnteralFormula("enteralFormula", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder.EnteralFormula parseNutritionOrderEnteralFormula(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.EnteralFormula.Builder builder = NutritionOrder.EnteralFormula.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, administrationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "baseFormulaType":
                    builder.baseFormulaType(parseCodeableConcept("baseFormulaType", reader, -1));
                    break;
                case "baseFormulaProductName":
                    builder.baseFormulaProductName(parseString("baseFormulaProductName", reader, -1));
                    break;
                case "additiveType":
                    builder.additiveType(parseCodeableConcept("additiveType", reader, -1));
                    break;
                case "additiveProductName":
                    builder.additiveProductName(parseString("additiveProductName", reader, -1));
                    break;
                case "caloricDensity":
                    builder.caloricDensity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "caloricDensity", reader, -1));
                    break;
                case "routeofAdministration":
                    builder.routeofAdministration(parseCodeableConcept("routeofAdministration", reader, -1));
                    break;
                case "administration":
                    builder.administration(parseNutritionOrderEnteralFormulaAdministration("administration", reader, administrationElementIndex++));
                    break;
                case "maxVolumeToDeliver":
                    builder.maxVolumeToDeliver((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "maxVolumeToDeliver", reader, -1));
                    break;
                case "administrationInstruction":
                    builder.administrationInstruction(parseString("administrationInstruction", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder.EnteralFormula.Administration parseNutritionOrderEnteralFormulaAdministration(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.EnteralFormula.Administration.Builder builder = NutritionOrder.EnteralFormula.Administration.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "schedule":
                    builder.schedule(parseTiming("schedule", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "rateSimpleQuantity":
                    builder.rate((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "rateSimpleQuantity", reader, -1));
                    break;
                case "rateRatio":
                    builder.rate(parseRatio("rateRatio", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder.OralDiet parseNutritionOrderOralDiet(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.OralDiet.Builder builder = NutritionOrder.OralDiet.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0, scheduleElementIndex = 0, nutrientElementIndex = 0, textureElementIndex = 0, fluidConsistencyTypeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "schedule":
                    builder.schedule(parseTiming("schedule", reader, scheduleElementIndex++));
                    break;
                case "nutrient":
                    builder.nutrient(parseNutritionOrderOralDietNutrient("nutrient", reader, nutrientElementIndex++));
                    break;
                case "texture":
                    builder.texture(parseNutritionOrderOralDietTexture("texture", reader, textureElementIndex++));
                    break;
                case "fluidConsistencyType":
                    builder.fluidConsistencyType(parseCodeableConcept("fluidConsistencyType", reader, fluidConsistencyTypeElementIndex++));
                    break;
                case "instruction":
                    builder.instruction(parseString("instruction", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder.OralDiet.Nutrient parseNutritionOrderOralDietNutrient(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.OralDiet.Nutrient.Builder builder = NutritionOrder.OralDiet.Nutrient.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, -1));
                    break;
                case "amount":
                    builder.amount((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder.OralDiet.Texture parseNutritionOrderOralDietTexture(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.OralDiet.Texture.Builder builder = NutritionOrder.OralDiet.Texture.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "modifier":
                    builder.modifier(parseCodeableConcept("modifier", reader, -1));
                    break;
                case "foodType":
                    builder.foodType(parseCodeableConcept("foodType", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private NutritionOrder.Supplement parseNutritionOrderSupplement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        NutritionOrder.Supplement.Builder builder = NutritionOrder.Supplement.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, scheduleElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "productName":
                    builder.productName(parseString("productName", reader, -1));
                    break;
                case "schedule":
                    builder.schedule(parseTiming("schedule", reader, scheduleElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "instruction":
                    builder.instruction(parseString("instruction", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Observation parseObservation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Observation.Builder builder = Observation.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, categoryElementIndex = 0, focusElementIndex = 0, performerElementIndex = 0, interpretationElementIndex = 0, noteElementIndex = 0, referenceRangeElementIndex = 0, hasMemberElementIndex = 0, derivedFromElementIndex = 0, componentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((ObservationStatus) parseString(ObservationStatus.builder(), "status", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "focus":
                    builder.focus(parseReference("focus", reader, focusElementIndex++));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "effectiveDateTime":
                    builder.effective(parseDateTime("effectiveDateTime", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effective(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "effectiveTiming":
                    builder.effective(parseTiming("effectiveTiming", reader, -1));
                    break;
                case "effectiveInstant":
                    builder.effective(parseInstant("effectiveInstant", reader, -1));
                    break;
                case "issued":
                    builder.issued(parseInstant("issued", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, performerElementIndex++));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "dataAbsentReason":
                    builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", reader, -1));
                    break;
                case "interpretation":
                    builder.interpretation(parseCodeableConcept("interpretation", reader, interpretationElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "specimen":
                    builder.specimen(parseReference("specimen", reader, -1));
                    break;
                case "device":
                    builder.device(parseReference("device", reader, -1));
                    break;
                case "referenceRange":
                    builder.referenceRange(parseObservationReferenceRange("referenceRange", reader, referenceRangeElementIndex++));
                    break;
                case "hasMember":
                    builder.hasMember(parseReference("hasMember", reader, hasMemberElementIndex++));
                    break;
                case "derivedFrom":
                    builder.derivedFrom(parseReference("derivedFrom", reader, derivedFromElementIndex++));
                    break;
                case "component":
                    builder.component(parseObservationComponent("component", reader, componentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Observation.Component parseObservationComponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Observation.Component.Builder builder = Observation.Component.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, interpretationElementIndex = 0, referenceRangeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "dataAbsentReason":
                    builder.dataAbsentReason(parseCodeableConcept("dataAbsentReason", reader, -1));
                    break;
                case "interpretation":
                    builder.interpretation(parseCodeableConcept("interpretation", reader, interpretationElementIndex++));
                    break;
                case "referenceRange":
                    builder.referenceRange(parseObservationReferenceRange("referenceRange", reader, referenceRangeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Observation.ReferenceRange parseObservationReferenceRange(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Observation.ReferenceRange.Builder builder = Observation.ReferenceRange.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, appliesToElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "low":
                    builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", reader, -1));
                    break;
                case "high":
                    builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "appliesTo":
                    builder.appliesTo(parseCodeableConcept("appliesTo", reader, appliesToElementIndex++));
                    break;
                case "age":
                    builder.age(parseRange("age", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ObservationDefinition parseObservationDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ObservationDefinition.Builder builder = ObservationDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, categoryElementIndex = 0, identifierElementIndex = 0, permittedDataTypeElementIndex = 0, qualifiedIntervalElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "permittedDataType":
                    builder.permittedDataType((ObservationDataType) parseString(ObservationDataType.builder(), "permittedDataType", reader, permittedDataTypeElementIndex++));
                    break;
                case "multipleResultsAllowed":
                    builder.multipleResultsAllowed(parseBoolean("multipleResultsAllowed", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "preferredReportName":
                    builder.preferredReportName(parseString("preferredReportName", reader, -1));
                    break;
                case "quantitativeDetails":
                    builder.quantitativeDetails(parseObservationDefinitionQuantitativeDetails("quantitativeDetails", reader, -1));
                    break;
                case "qualifiedInterval":
                    builder.qualifiedInterval(parseObservationDefinitionQualifiedInterval("qualifiedInterval", reader, qualifiedIntervalElementIndex++));
                    break;
                case "validCodedValueSet":
                    builder.validCodedValueSet(parseReference("validCodedValueSet", reader, -1));
                    break;
                case "normalCodedValueSet":
                    builder.normalCodedValueSet(parseReference("normalCodedValueSet", reader, -1));
                    break;
                case "abnormalCodedValueSet":
                    builder.abnormalCodedValueSet(parseReference("abnormalCodedValueSet", reader, -1));
                    break;
                case "criticalCodedValueSet":
                    builder.criticalCodedValueSet(parseReference("criticalCodedValueSet", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ObservationDefinition.QualifiedInterval parseObservationDefinitionQualifiedInterval(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ObservationDefinition.QualifiedInterval.Builder builder = ObservationDefinition.QualifiedInterval.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, appliesToElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category((ObservationRangeCategory) parseString(ObservationRangeCategory.builder(), "category", reader, -1));
                    break;
                case "range":
                    builder.range(parseRange("range", reader, -1));
                    break;
                case "context":
                    builder.context(parseCodeableConcept("context", reader, -1));
                    break;
                case "appliesTo":
                    builder.appliesTo(parseCodeableConcept("appliesTo", reader, appliesToElementIndex++));
                    break;
                case "gender":
                    builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", reader, -1));
                    break;
                case "age":
                    builder.age(parseRange("age", reader, -1));
                    break;
                case "gestationalAge":
                    builder.gestationalAge(parseRange("gestationalAge", reader, -1));
                    break;
                case "condition":
                    builder.condition(parseString("condition", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ObservationDefinition.QuantitativeDetails parseObservationDefinitionQuantitativeDetails(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ObservationDefinition.QuantitativeDetails.Builder builder = ObservationDefinition.QuantitativeDetails.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "customaryUnit":
                    builder.customaryUnit(parseCodeableConcept("customaryUnit", reader, -1));
                    break;
                case "unit":
                    builder.unit(parseCodeableConcept("unit", reader, -1));
                    break;
                case "conversionFactor":
                    builder.conversionFactor(parseDecimal("conversionFactor", reader, -1));
                    break;
                case "decimalPrecision":
                    builder.decimalPrecision(parseInteger("decimalPrecision", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationDefinition parseOperationDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationDefinition.Builder builder = OperationDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, resourceElementIndex = 0, parameterElementIndex = 0, overloadElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "kind":
                    builder.kind((OperationKind) parseString(OperationKind.builder(), "kind", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "affectsState":
                    builder.affectsState(parseBoolean("affectsState", reader, -1));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "comment":
                    builder.comment((Markdown) parseString(Markdown.builder(), "comment", reader, -1));
                    break;
                case "base":
                    builder.base((Canonical) parseUri(Canonical.builder(), "base", reader, -1));
                    break;
                case "resource":
                    builder.resource((ResourceType) parseString(ResourceType.builder(), "resource", reader, resourceElementIndex++));
                    break;
                case "system":
                    builder.system(parseBoolean("system", reader, -1));
                    break;
                case "type":
                    builder.type(parseBoolean("type", reader, -1));
                    break;
                case "instance":
                    builder.instance(parseBoolean("instance", reader, -1));
                    break;
                case "inputProfile":
                    builder.inputProfile((Canonical) parseUri(Canonical.builder(), "inputProfile", reader, -1));
                    break;
                case "outputProfile":
                    builder.outputProfile((Canonical) parseUri(Canonical.builder(), "outputProfile", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseOperationDefinitionParameter("parameter", reader, parameterElementIndex++));
                    break;
                case "overload":
                    builder.overload(parseOperationDefinitionOverload("overload", reader, overloadElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationDefinition.Overload parseOperationDefinitionOverload(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationDefinition.Overload.Builder builder = OperationDefinition.Overload.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, parameterNameElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "parameterName":
                    builder.parameterName(parseString("parameterName", reader, parameterNameElementIndex++));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationDefinition.Parameter parseOperationDefinitionParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationDefinition.Parameter.Builder builder = OperationDefinition.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetProfileElementIndex = 0, referencedFromElementIndex = 0, partElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name((Code) parseString(Code.builder(), "name", reader, -1));
                    break;
                case "use":
                    builder.use((OperationParameterUse) parseString(OperationParameterUse.builder(), "use", reader, -1));
                    break;
                case "min":
                    builder.min(parseInteger("min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                case "type":
                    builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", reader, -1));
                    break;
                case "targetProfile":
                    builder.targetProfile((Canonical) parseUri(Canonical.builder(), "targetProfile", reader, targetProfileElementIndex++));
                    break;
                case "searchType":
                    builder.searchType((SearchParamType) parseString(SearchParamType.builder(), "searchType", reader, -1));
                    break;
                case "binding":
                    builder.binding(parseOperationDefinitionParameterBinding("binding", reader, -1));
                    break;
                case "referencedFrom":
                    builder.referencedFrom(parseOperationDefinitionParameterReferencedFrom("referencedFrom", reader, referencedFromElementIndex++));
                    break;
                case "part":
                    builder.part(parseOperationDefinitionParameter("part", reader, partElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationDefinition.Parameter.Binding parseOperationDefinitionParameterBinding(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationDefinition.Parameter.Binding.Builder builder = OperationDefinition.Parameter.Binding.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "strength":
                    builder.strength((BindingStrength) parseString(BindingStrength.builder(), "strength", reader, -1));
                    break;
                case "valueSet":
                    builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationDefinition.Parameter.ReferencedFrom parseOperationDefinitionParameterReferencedFrom(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationDefinition.Parameter.ReferencedFrom.Builder builder = OperationDefinition.Parameter.ReferencedFrom.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "source":
                    builder.source(parseString("source", reader, -1));
                    break;
                case "sourceId":
                    builder.sourceId(parseString("sourceId", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationOutcome parseOperationOutcome(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationOutcome.Builder builder = OperationOutcome.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, issueElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "issue":
                    builder.issue(parseOperationOutcomeIssue("issue", reader, issueElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OperationOutcome.Issue parseOperationOutcomeIssue(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OperationOutcome.Issue.Builder builder = OperationOutcome.Issue.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, locationElementIndex = 0, expressionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "severity":
                    builder.severity((IssueSeverity) parseString(IssueSeverity.builder(), "severity", reader, -1));
                    break;
                case "code":
                    builder.code((IssueType) parseString(IssueType.builder(), "code", reader, -1));
                    break;
                case "details":
                    builder.details(parseCodeableConcept("details", reader, -1));
                    break;
                case "diagnostics":
                    builder.diagnostics(parseString("diagnostics", reader, -1));
                    break;
                case "location":
                    builder.location(parseString("location", reader, locationElementIndex++));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, expressionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Organization parseOrganization(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Organization.Builder builder = Organization.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, typeElementIndex = 0, aliasElementIndex = 0, telecomElementIndex = 0, addressElementIndex = 0, contactElementIndex = 0, endpointElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "alias":
                    builder.alias(parseString("alias", reader, aliasElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, addressElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseOrganizationContact("contact", reader, contactElementIndex++));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Organization.Contact parseOrganizationContact(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Organization.Contact.Builder builder = Organization.Contact.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, telecomElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose(parseCodeableConcept("purpose", reader, -1));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, -1));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private OrganizationAffiliation parseOrganizationAffiliation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        OrganizationAffiliation.Builder builder = OrganizationAffiliation.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, networkElementIndex = 0, codeElementIndex = 0, specialtyElementIndex = 0, locationElementIndex = 0, healthcareServiceElementIndex = 0, telecomElementIndex = 0, endpointElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "organization":
                    builder.organization(parseReference("organization", reader, -1));
                    break;
                case "participatingOrganization":
                    builder.participatingOrganization(parseReference("participatingOrganization", reader, -1));
                    break;
                case "network":
                    builder.network(parseReference("network", reader, networkElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "specialty":
                    builder.specialty(parseCodeableConcept("specialty", reader, specialtyElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, locationElementIndex++));
                    break;
                case "healthcareService":
                    builder.healthcareService(parseReference("healthcareService", reader, healthcareServiceElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ParameterDefinition parseParameterDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ParameterDefinition.Builder builder = ParameterDefinition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "name":
                    builder.name((Code) parseString(Code.builder(), "name", reader, -1));
                    break;
                case "use":
                    builder.use((ParameterUse) parseString(ParameterUse.builder(), "use", reader, -1));
                    break;
                case "min":
                    builder.min(parseInteger("min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                case "type":
                    builder.type((FHIRAllTypes) parseString(FHIRAllTypes.builder(), "type", reader, -1));
                    break;
                case "profile":
                    builder.profile((Canonical) parseUri(Canonical.builder(), "profile", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Parameters parseParameters(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Parameters.Builder builder = Parameters.builder();
        int parameterElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseParametersParameter("parameter", reader, parameterElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Parameters.Parameter parseParametersParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Parameters.Parameter.Builder builder = Parameters.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, partElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueCanonical":
                    builder.value((Canonical) parseUri(Canonical.builder(), "valueCanonical", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueId":
                    builder.value((Id) parseString(Id.builder(), "valueId", reader, -1));
                    break;
                case "valueInstant":
                    builder.value(parseInstant("valueInstant", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueMarkdown":
                    builder.value((Markdown) parseString(Markdown.builder(), "valueMarkdown", reader, -1));
                    break;
                case "valueOid":
                    builder.value((Oid) parseUri(Oid.builder(), "valueOid", reader, -1));
                    break;
                case "valuePositiveInt":
                    builder.value((PositiveInt) parseInteger(PositiveInt.builder(), "valuePositiveInt", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueUnsignedInt":
                    builder.value((UnsignedInt) parseInteger(UnsignedInt.builder(), "valueUnsignedInt", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueUrl":
                    builder.value((Url) parseUri(Url.builder(), "valueUrl", reader, -1));
                    break;
                case "valueUuid":
                    builder.value((Uuid) parseUri(Uuid.builder(), "valueUuid", reader, -1));
                    break;
                case "valueAddress":
                    builder.value(parseAddress("valueAddress", reader, -1));
                    break;
                case "valueAge":
                    builder.value((Age) parseQuantity(Age.builder(), "valueAge", reader, -1));
                    break;
                case "valueAnnotation":
                    builder.value(parseAnnotation("valueAnnotation", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueContactPoint":
                    builder.value(parseContactPoint("valueContactPoint", reader, -1));
                    break;
                case "valueCount":
                    builder.value((Count) parseQuantity(Count.builder(), "valueCount", reader, -1));
                    break;
                case "valueDistance":
                    builder.value((Distance) parseQuantity(Distance.builder(), "valueDistance", reader, -1));
                    break;
                case "valueDuration":
                    builder.value((Duration) parseQuantity(Duration.builder(), "valueDuration", reader, -1));
                    break;
                case "valueHumanName":
                    builder.value(parseHumanName("valueHumanName", reader, -1));
                    break;
                case "valueIdentifier":
                    builder.value(parseIdentifier("valueIdentifier", reader, -1));
                    break;
                case "valueMoney":
                    builder.value(parseMoney("valueMoney", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueSignature":
                    builder.value(parseSignature("valueSignature", reader, -1));
                    break;
                case "valueTiming":
                    builder.value(parseTiming("valueTiming", reader, -1));
                    break;
                case "valueContactDetail":
                    builder.value(parseContactDetail("valueContactDetail", reader, -1));
                    break;
                case "valueContributor":
                    builder.value(parseContributor("valueContributor", reader, -1));
                    break;
                case "valueDataRequirement":
                    builder.value(parseDataRequirement("valueDataRequirement", reader, -1));
                    break;
                case "valueExpression":
                    builder.value(parseExpression("valueExpression", reader, -1));
                    break;
                case "valueParameterDefinition":
                    builder.value(parseParameterDefinition("valueParameterDefinition", reader, -1));
                    break;
                case "valueRelatedArtifact":
                    builder.value(parseRelatedArtifact("valueRelatedArtifact", reader, -1));
                    break;
                case "valueTriggerDefinition":
                    builder.value(parseTriggerDefinition("valueTriggerDefinition", reader, -1));
                    break;
                case "valueUsageContext":
                    builder.value(parseUsageContext("valueUsageContext", reader, -1));
                    break;
                case "valueDosage":
                    builder.value(parseDosage("valueDosage", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseResource("resource", reader, -1));
                    break;
                case "part":
                    builder.part(parseParametersParameter("part", reader, partElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Patient parsePatient(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Patient.Builder builder = Patient.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, nameElementIndex = 0, telecomElementIndex = 0, addressElementIndex = 0, photoElementIndex = 0, contactElementIndex = 0, communicationElementIndex = 0, generalPractitionerElementIndex = 0, linkElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, nameElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "gender":
                    builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", reader, -1));
                    break;
                case "birthDate":
                    builder.birthDate(parseDate("birthDate", reader, -1));
                    break;
                case "deceasedBoolean":
                    builder.deceased(parseBoolean("deceasedBoolean", reader, -1));
                    break;
                case "deceasedDateTime":
                    builder.deceased(parseDateTime("deceasedDateTime", reader, -1));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, addressElementIndex++));
                    break;
                case "maritalStatus":
                    builder.maritalStatus(parseCodeableConcept("maritalStatus", reader, -1));
                    break;
                case "multipleBirthBoolean":
                    builder.multipleBirth(parseBoolean("multipleBirthBoolean", reader, -1));
                    break;
                case "multipleBirthInteger":
                    builder.multipleBirth(parseInteger("multipleBirthInteger", reader, -1));
                    break;
                case "photo":
                    builder.photo(parseAttachment("photo", reader, photoElementIndex++));
                    break;
                case "contact":
                    builder.contact(parsePatientContact("contact", reader, contactElementIndex++));
                    break;
                case "communication":
                    builder.communication(parsePatientCommunication("communication", reader, communicationElementIndex++));
                    break;
                case "generalPractitioner":
                    builder.generalPractitioner(parseReference("generalPractitioner", reader, generalPractitionerElementIndex++));
                    break;
                case "managingOrganization":
                    builder.managingOrganization(parseReference("managingOrganization", reader, -1));
                    break;
                case "link":
                    builder.link(parsePatientLink("link", reader, linkElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Patient.Communication parsePatientCommunication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Patient.Communication.Builder builder = Patient.Communication.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "language":
                    builder.language(parseCodeableConcept("language", reader, -1));
                    break;
                case "preferred":
                    builder.preferred(parseBoolean("preferred", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Patient.Contact parsePatientContact(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Patient.Contact.Builder builder = Patient.Contact.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, relationshipElementIndex = 0, telecomElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, relationshipElementIndex++));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, -1));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, -1));
                    break;
                case "gender":
                    builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", reader, -1));
                    break;
                case "organization":
                    builder.organization(parseReference("organization", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Patient.Link parsePatientLink(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Patient.Link.Builder builder = Patient.Link.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "other":
                    builder.other(parseReference("other", reader, -1));
                    break;
                case "type":
                    builder.type((LinkType) parseString(LinkType.builder(), "type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PaymentNotice parsePaymentNotice(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PaymentNotice.Builder builder = PaymentNotice.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((PaymentNoticeStatus) parseString(PaymentNoticeStatus.builder(), "status", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "response":
                    builder.response(parseReference("response", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "provider":
                    builder.provider(parseReference("provider", reader, -1));
                    break;
                case "payment":
                    builder.payment(parseReference("payment", reader, -1));
                    break;
                case "paymentDate":
                    builder.paymentDate(parseDate("paymentDate", reader, -1));
                    break;
                case "payee":
                    builder.payee(parseReference("payee", reader, -1));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                case "paymentStatus":
                    builder.paymentStatus(parseCodeableConcept("paymentStatus", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PaymentReconciliation parsePaymentReconciliation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PaymentReconciliation.Builder builder = PaymentReconciliation.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, detailElementIndex = 0, processNoteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((PaymentReconciliationStatus) parseString(PaymentReconciliationStatus.builder(), "status", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "paymentIssuer":
                    builder.paymentIssuer(parseReference("paymentIssuer", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "requestor":
                    builder.requestor(parseReference("requestor", reader, -1));
                    break;
                case "outcome":
                    builder.outcome((RemittanceOutcome) parseString(RemittanceOutcome.builder(), "outcome", reader, -1));
                    break;
                case "disposition":
                    builder.disposition(parseString("disposition", reader, -1));
                    break;
                case "paymentDate":
                    builder.paymentDate(parseDate("paymentDate", reader, -1));
                    break;
                case "paymentAmount":
                    builder.paymentAmount(parseMoney("paymentAmount", reader, -1));
                    break;
                case "paymentIdentifier":
                    builder.paymentIdentifier(parseIdentifier("paymentIdentifier", reader, -1));
                    break;
                case "detail":
                    builder.detail(parsePaymentReconciliationDetail("detail", reader, detailElementIndex++));
                    break;
                case "formCode":
                    builder.formCode(parseCodeableConcept("formCode", reader, -1));
                    break;
                case "processNote":
                    builder.processNote(parsePaymentReconciliationProcessNote("processNote", reader, processNoteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PaymentReconciliation.Detail parsePaymentReconciliationDetail(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PaymentReconciliation.Detail.Builder builder = PaymentReconciliation.Detail.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "predecessor":
                    builder.predecessor(parseIdentifier("predecessor", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, -1));
                    break;
                case "submitter":
                    builder.submitter(parseReference("submitter", reader, -1));
                    break;
                case "response":
                    builder.response(parseReference("response", reader, -1));
                    break;
                case "date":
                    builder.date(parseDate("date", reader, -1));
                    break;
                case "responsible":
                    builder.responsible(parseReference("responsible", reader, -1));
                    break;
                case "payee":
                    builder.payee(parseReference("payee", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseMoney("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PaymentReconciliation.ProcessNote parsePaymentReconciliationProcessNote(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PaymentReconciliation.ProcessNote.Builder builder = PaymentReconciliation.ProcessNote.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((NoteType) parseString(NoteType.builder(), "type", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Period parsePeriod(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Period.Builder builder = Period.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "start":
                    builder.start(parseDateTime("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseDateTime("end", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Person parsePerson(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Person.Builder builder = Person.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, nameElementIndex = 0, telecomElementIndex = 0, addressElementIndex = 0, linkElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, nameElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "gender":
                    builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", reader, -1));
                    break;
                case "birthDate":
                    builder.birthDate(parseDate("birthDate", reader, -1));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, addressElementIndex++));
                    break;
                case "photo":
                    builder.photo(parseAttachment("photo", reader, -1));
                    break;
                case "managingOrganization":
                    builder.managingOrganization(parseReference("managingOrganization", reader, -1));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "link":
                    builder.link(parsePersonLink("link", reader, linkElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Person.Link parsePersonLink(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Person.Link.Builder builder = Person.Link.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "target":
                    builder.target(parseReference("target", reader, -1));
                    break;
                case "assurance":
                    builder.assurance((IdentityAssuranceLevel) parseString(IdentityAssuranceLevel.builder(), "assurance", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition parsePlanDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Builder builder = PlanDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, libraryElementIndex = 0, goalElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "library":
                    builder.library((Canonical) parseUri(Canonical.builder(), "library", reader, libraryElementIndex++));
                    break;
                case "goal":
                    builder.goal(parsePlanDefinitionGoal("goal", reader, goalElementIndex++));
                    break;
                case "action":
                    builder.action(parsePlanDefinitionAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Action parsePlanDefinitionAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Action.Builder builder = PlanDefinition.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, reasonElementIndex = 0, documentationElementIndex = 0, goalIdElementIndex = 0, triggerElementIndex = 0, conditionElementIndex = 0, inputElementIndex = 0, outputElementIndex = 0, relatedActionElementIndex = 0, participantElementIndex = 0, dynamicValueElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "prefix":
                    builder.prefix(parseString("prefix", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "textEquivalent":
                    builder.textEquivalent(parseString("textEquivalent", reader, -1));
                    break;
                case "priority":
                    builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, reasonElementIndex++));
                    break;
                case "documentation":
                    builder.documentation(parseRelatedArtifact("documentation", reader, documentationElementIndex++));
                    break;
                case "goalId":
                    builder.goalId((Id) parseString(Id.builder(), "goalId", reader, goalIdElementIndex++));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "trigger":
                    builder.trigger(parseTriggerDefinition("trigger", reader, triggerElementIndex++));
                    break;
                case "condition":
                    builder.condition(parsePlanDefinitionActionCondition("condition", reader, conditionElementIndex++));
                    break;
                case "input":
                    builder.input(parseDataRequirement("input", reader, inputElementIndex++));
                    break;
                case "output":
                    builder.output(parseDataRequirement("output", reader, outputElementIndex++));
                    break;
                case "relatedAction":
                    builder.relatedAction(parsePlanDefinitionActionRelatedAction("relatedAction", reader, relatedActionElementIndex++));
                    break;
                case "timingDateTime":
                    builder.timing(parseDateTime("timingDateTime", reader, -1));
                    break;
                case "timingAge":
                    builder.timing((Age) parseQuantity(Age.builder(), "timingAge", reader, -1));
                    break;
                case "timingPeriod":
                    builder.timing(parsePeriod("timingPeriod", reader, -1));
                    break;
                case "timingDuration":
                    builder.timing((Duration) parseQuantity(Duration.builder(), "timingDuration", reader, -1));
                    break;
                case "timingRange":
                    builder.timing(parseRange("timingRange", reader, -1));
                    break;
                case "timingTiming":
                    builder.timing(parseTiming("timingTiming", reader, -1));
                    break;
                case "participant":
                    builder.participant(parsePlanDefinitionActionParticipant("participant", reader, participantElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "groupingBehavior":
                    builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", reader, -1));
                    break;
                case "selectionBehavior":
                    builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", reader, -1));
                    break;
                case "requiredBehavior":
                    builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", reader, -1));
                    break;
                case "precheckBehavior":
                    builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", reader, -1));
                    break;
                case "cardinalityBehavior":
                    builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", reader, -1));
                    break;
                case "definitionCanonical":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definitionCanonical", reader, -1));
                    break;
                case "definitionUri":
                    builder.definition(parseUri("definitionUri", reader, -1));
                    break;
                case "transform":
                    builder.transform((Canonical) parseUri(Canonical.builder(), "transform", reader, -1));
                    break;
                case "dynamicValue":
                    builder.dynamicValue(parsePlanDefinitionActionDynamicValue("dynamicValue", reader, dynamicValueElementIndex++));
                    break;
                case "action":
                    builder.action(parsePlanDefinitionAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Action.Condition parsePlanDefinitionActionCondition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Action.Condition.Builder builder = PlanDefinition.Action.Condition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "kind":
                    builder.kind((ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseExpression("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Action.DynamicValue parsePlanDefinitionActionDynamicValue(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Action.DynamicValue.Builder builder = PlanDefinition.Action.DynamicValue.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseExpression("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Action.Participant parsePlanDefinitionActionParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Action.Participant.Builder builder = PlanDefinition.Action.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ActionParticipantType) parseString(ActionParticipantType.builder(), "type", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Action.RelatedAction parsePlanDefinitionActionRelatedAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Action.RelatedAction.Builder builder = PlanDefinition.Action.RelatedAction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "actionId":
                    builder.actionId((Id) parseString(Id.builder(), "actionId", reader, -1));
                    break;
                case "relationship":
                    builder.relationship((ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", reader, -1));
                    break;
                case "offsetDuration":
                    builder.offset((Duration) parseQuantity(Duration.builder(), "offsetDuration", reader, -1));
                    break;
                case "offsetRange":
                    builder.offset(parseRange("offsetRange", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Goal parsePlanDefinitionGoal(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Goal.Builder builder = PlanDefinition.Goal.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, addressesElementIndex = 0, documentationElementIndex = 0, targetElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "description":
                    builder.description(parseCodeableConcept("description", reader, -1));
                    break;
                case "priority":
                    builder.priority(parseCodeableConcept("priority", reader, -1));
                    break;
                case "start":
                    builder.start(parseCodeableConcept("start", reader, -1));
                    break;
                case "addresses":
                    builder.addresses(parseCodeableConcept("addresses", reader, addressesElementIndex++));
                    break;
                case "documentation":
                    builder.documentation(parseRelatedArtifact("documentation", reader, documentationElementIndex++));
                    break;
                case "target":
                    builder.target(parsePlanDefinitionGoalTarget("target", reader, targetElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PlanDefinition.Goal.Target parsePlanDefinitionGoalTarget(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PlanDefinition.Goal.Target.Builder builder = PlanDefinition.Goal.Target.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "measure":
                    builder.measure(parseCodeableConcept("measure", reader, -1));
                    break;
                case "detailQuantity":
                    builder.detail(parseQuantity("detailQuantity", reader, -1));
                    break;
                case "detailRange":
                    builder.detail(parseRange("detailRange", reader, -1));
                    break;
                case "detailCodeableConcept":
                    builder.detail(parseCodeableConcept("detailCodeableConcept", reader, -1));
                    break;
                case "due":
                    builder.due((Duration) parseQuantity(Duration.builder(), "due", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Population parsePopulation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Population.Builder builder = Population.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "ageRange":
                    builder.age(parseRange("ageRange", reader, -1));
                    break;
                case "ageCodeableConcept":
                    builder.age(parseCodeableConcept("ageCodeableConcept", reader, -1));
                    break;
                case "gender":
                    builder.gender(parseCodeableConcept("gender", reader, -1));
                    break;
                case "race":
                    builder.race(parseCodeableConcept("race", reader, -1));
                    break;
                case "physiologicalCondition":
                    builder.physiologicalCondition(parseCodeableConcept("physiologicalCondition", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Practitioner parsePractitioner(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Practitioner.Builder builder = Practitioner.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, nameElementIndex = 0, telecomElementIndex = 0, addressElementIndex = 0, photoElementIndex = 0, qualificationElementIndex = 0, communicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, nameElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, addressElementIndex++));
                    break;
                case "gender":
                    builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", reader, -1));
                    break;
                case "birthDate":
                    builder.birthDate(parseDate("birthDate", reader, -1));
                    break;
                case "photo":
                    builder.photo(parseAttachment("photo", reader, photoElementIndex++));
                    break;
                case "qualification":
                    builder.qualification(parsePractitionerQualification("qualification", reader, qualificationElementIndex++));
                    break;
                case "communication":
                    builder.communication(parseCodeableConcept("communication", reader, communicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Practitioner.Qualification parsePractitionerQualification(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Practitioner.Qualification.Builder builder = Practitioner.Qualification.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "issuer":
                    builder.issuer(parseReference("issuer", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PractitionerRole parsePractitionerRole(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PractitionerRole.Builder builder = PractitionerRole.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, codeElementIndex = 0, specialtyElementIndex = 0, locationElementIndex = 0, healthcareServiceElementIndex = 0, telecomElementIndex = 0, availableTimeElementIndex = 0, notAvailableElementIndex = 0, endpointElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "practitioner":
                    builder.practitioner(parseReference("practitioner", reader, -1));
                    break;
                case "organization":
                    builder.organization(parseReference("organization", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "specialty":
                    builder.specialty(parseCodeableConcept("specialty", reader, specialtyElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, locationElementIndex++));
                    break;
                case "healthcareService":
                    builder.healthcareService(parseReference("healthcareService", reader, healthcareServiceElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "availableTime":
                    builder.availableTime(parsePractitionerRoleAvailableTime("availableTime", reader, availableTimeElementIndex++));
                    break;
                case "notAvailable":
                    builder.notAvailable(parsePractitionerRoleNotAvailable("notAvailable", reader, notAvailableElementIndex++));
                    break;
                case "availabilityExceptions":
                    builder.availabilityExceptions(parseString("availabilityExceptions", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint(parseReference("endpoint", reader, endpointElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PractitionerRole.AvailableTime parsePractitionerRoleAvailableTime(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PractitionerRole.AvailableTime.Builder builder = PractitionerRole.AvailableTime.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, daysOfWeekElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "daysOfWeek":
                    builder.daysOfWeek((DaysOfWeek) parseString(DaysOfWeek.builder(), "daysOfWeek", reader, daysOfWeekElementIndex++));
                    break;
                case "allDay":
                    builder.allDay(parseBoolean("allDay", reader, -1));
                    break;
                case "availableStartTime":
                    builder.availableStartTime(parseTime("availableStartTime", reader, -1));
                    break;
                case "availableEndTime":
                    builder.availableEndTime(parseTime("availableEndTime", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private PractitionerRole.NotAvailable parsePractitionerRoleNotAvailable(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        PractitionerRole.NotAvailable.Builder builder = PractitionerRole.NotAvailable.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "during":
                    builder.during(parsePeriod("during", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Procedure parseProcedure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Procedure.Builder builder = Procedure.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, performerElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, bodySiteElementIndex = 0, reportElementIndex = 0, complicationElementIndex = 0, complicationDetailElementIndex = 0, followUpElementIndex = 0, noteElementIndex = 0, focalDeviceElementIndex = 0, usedReferenceElementIndex = 0, usedCodeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((ProcedureStatus) parseString(ProcedureStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "performedDateTime":
                    builder.performed(parseDateTime("performedDateTime", reader, -1));
                    break;
                case "performedPeriod":
                    builder.performed(parsePeriod("performedPeriod", reader, -1));
                    break;
                case "performedString":
                    builder.performed(parseString("performedString", reader, -1));
                    break;
                case "performedAge":
                    builder.performed((Age) parseQuantity(Age.builder(), "performedAge", reader, -1));
                    break;
                case "performedRange":
                    builder.performed(parseRange("performedRange", reader, -1));
                    break;
                case "recorder":
                    builder.recorder(parseReference("recorder", reader, -1));
                    break;
                case "asserter":
                    builder.asserter(parseReference("asserter", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseProcedurePerformer("performer", reader, performerElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, bodySiteElementIndex++));
                    break;
                case "outcome":
                    builder.outcome(parseCodeableConcept("outcome", reader, -1));
                    break;
                case "report":
                    builder.report(parseReference("report", reader, reportElementIndex++));
                    break;
                case "complication":
                    builder.complication(parseCodeableConcept("complication", reader, complicationElementIndex++));
                    break;
                case "complicationDetail":
                    builder.complicationDetail(parseReference("complicationDetail", reader, complicationDetailElementIndex++));
                    break;
                case "followUp":
                    builder.followUp(parseCodeableConcept("followUp", reader, followUpElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "focalDevice":
                    builder.focalDevice(parseProcedureFocalDevice("focalDevice", reader, focalDeviceElementIndex++));
                    break;
                case "usedReference":
                    builder.usedReference(parseReference("usedReference", reader, usedReferenceElementIndex++));
                    break;
                case "usedCode":
                    builder.usedCode(parseCodeableConcept("usedCode", reader, usedCodeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Procedure.FocalDevice parseProcedureFocalDevice(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Procedure.FocalDevice.Builder builder = Procedure.FocalDevice.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "action":
                    builder.action(parseCodeableConcept("action", reader, -1));
                    break;
                case "manipulated":
                    builder.manipulated(parseReference("manipulated", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Procedure.Performer parseProcedurePerformer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Procedure.Performer.Builder builder = Procedure.Performer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "function":
                    builder.function(parseCodeableConcept("function", reader, -1));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, -1));
                    break;
                case "onBehalfOf":
                    builder.onBehalfOf(parseReference("onBehalfOf", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ProdCharacteristic parseProdCharacteristic(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ProdCharacteristic.Builder builder = ProdCharacteristic.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, colorElementIndex = 0, imprintElementIndex = 0, imageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "height":
                    builder.height(parseQuantity("height", reader, -1));
                    break;
                case "width":
                    builder.width(parseQuantity("width", reader, -1));
                    break;
                case "depth":
                    builder.depth(parseQuantity("depth", reader, -1));
                    break;
                case "weight":
                    builder.weight(parseQuantity("weight", reader, -1));
                    break;
                case "nominalVolume":
                    builder.nominalVolume(parseQuantity("nominalVolume", reader, -1));
                    break;
                case "externalDiameter":
                    builder.externalDiameter(parseQuantity("externalDiameter", reader, -1));
                    break;
                case "shape":
                    builder.shape(parseString("shape", reader, -1));
                    break;
                case "color":
                    builder.color(parseString("color", reader, colorElementIndex++));
                    break;
                case "imprint":
                    builder.imprint(parseString("imprint", reader, imprintElementIndex++));
                    break;
                case "image":
                    builder.image(parseAttachment("image", reader, imageElementIndex++));
                    break;
                case "scoring":
                    builder.scoring(parseCodeableConcept("scoring", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ProductShelfLife parseProductShelfLife(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ProductShelfLife.Builder builder = ProductShelfLife.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, specialPrecautionsForStorageElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "period":
                    builder.period(parseQuantity("period", reader, -1));
                    break;
                case "specialPrecautionsForStorage":
                    builder.specialPrecautionsForStorage(parseCodeableConcept("specialPrecautionsForStorage", reader, specialPrecautionsForStorageElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Provenance parseProvenance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Provenance.Builder builder = Provenance.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetElementIndex = 0, policyElementIndex = 0, reasonElementIndex = 0, agentElementIndex = 0, entityElementIndex = 0, signatureElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "target":
                    builder.target(parseReference("target", reader, targetElementIndex++));
                    break;
                case "occurredPeriod":
                    builder.occurred(parsePeriod("occurredPeriod", reader, -1));
                    break;
                case "occurredDateTime":
                    builder.occurred(parseDateTime("occurredDateTime", reader, -1));
                    break;
                case "recorded":
                    builder.recorded(parseInstant("recorded", reader, -1));
                    break;
                case "policy":
                    builder.policy(parseUri("policy", reader, policyElementIndex++));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseCodeableConcept("reason", reader, reasonElementIndex++));
                    break;
                case "activity":
                    builder.activity(parseCodeableConcept("activity", reader, -1));
                    break;
                case "agent":
                    builder.agent(parseProvenanceAgent("agent", reader, agentElementIndex++));
                    break;
                case "entity":
                    builder.entity(parseProvenanceEntity("entity", reader, entityElementIndex++));
                    break;
                case "signature":
                    builder.signature(parseSignature("signature", reader, signatureElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Provenance.Agent parseProvenanceAgent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Provenance.Agent.Builder builder = Provenance.Agent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, roleElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, roleElementIndex++));
                    break;
                case "who":
                    builder.who(parseReference("who", reader, -1));
                    break;
                case "onBehalfOf":
                    builder.onBehalfOf(parseReference("onBehalfOf", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Provenance.Entity parseProvenanceEntity(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Provenance.Entity.Builder builder = Provenance.Entity.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, agentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "role":
                    builder.role((ProvenanceEntityRole) parseString(ProvenanceEntityRole.builder(), "role", reader, -1));
                    break;
                case "what":
                    builder.what(parseReference("what", reader, -1));
                    break;
                case "agent":
                    builder.agent(parseProvenanceAgent("agent", reader, agentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Quantity parseQuantity(Quantity.Builder builder, java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "value":
                    builder.value(parseDecimal("value", reader, -1));
                    break;
                case "comparator":
                    builder.comparator((QuantityComparator) parseString(QuantityComparator.builder(), "comparator", reader, -1));
                    break;
                case "unit":
                    builder.unit(parseString("unit", reader, -1));
                    break;
                case "system":
                    builder.system(parseUri("system", reader, -1));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Quantity parseQuantity(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        return parseQuantity(Quantity.builder(), elementName, reader, elementIndex);
    }

    private Questionnaire parseQuestionnaire(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Questionnaire.Builder builder = Questionnaire.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, derivedFromElementIndex = 0, subjectTypeElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, codeElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "derivedFrom":
                    builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", reader, derivedFromElementIndex++));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectType":
                    builder.subjectType((ResourceType) parseString(ResourceType.builder(), "subjectType", reader, subjectTypeElementIndex++));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "code":
                    builder.code(parseCoding("code", reader, codeElementIndex++));
                    break;
                case "item":
                    builder.item(parseQuestionnaireItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Questionnaire.Item parseQuestionnaireItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Questionnaire.Item.Builder builder = Questionnaire.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, enableWhenElementIndex = 0, answerOptionElementIndex = 0, initialElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "linkId":
                    builder.linkId(parseString("linkId", reader, -1));
                    break;
                case "definition":
                    builder.definition(parseUri("definition", reader, -1));
                    break;
                case "code":
                    builder.code(parseCoding("code", reader, codeElementIndex++));
                    break;
                case "prefix":
                    builder.prefix(parseString("prefix", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "type":
                    builder.type((QuestionnaireItemType) parseString(QuestionnaireItemType.builder(), "type", reader, -1));
                    break;
                case "enableWhen":
                    builder.enableWhen(parseQuestionnaireItemEnableWhen("enableWhen", reader, enableWhenElementIndex++));
                    break;
                case "enableBehavior":
                    builder.enableBehavior((EnableWhenBehavior) parseString(EnableWhenBehavior.builder(), "enableBehavior", reader, -1));
                    break;
                case "required":
                    builder.required(parseBoolean("required", reader, -1));
                    break;
                case "repeats":
                    builder.repeats(parseBoolean("repeats", reader, -1));
                    break;
                case "readOnly":
                    builder.readOnly(parseBoolean("readOnly", reader, -1));
                    break;
                case "maxLength":
                    builder.maxLength(parseInteger("maxLength", reader, -1));
                    break;
                case "answerValueSet":
                    builder.answerValueSet((Canonical) parseUri(Canonical.builder(), "answerValueSet", reader, -1));
                    break;
                case "answerOption":
                    builder.answerOption(parseQuestionnaireItemAnswerOption("answerOption", reader, answerOptionElementIndex++));
                    break;
                case "initial":
                    builder.initial(parseQuestionnaireItemInitial("initial", reader, initialElementIndex++));
                    break;
                case "item":
                    builder.item(parseQuestionnaireItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Questionnaire.Item.AnswerOption parseQuestionnaireItemAnswerOption(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Questionnaire.Item.AnswerOption.Builder builder = Questionnaire.Item.AnswerOption.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "initialSelected":
                    builder.initialSelected(parseBoolean("initialSelected", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Questionnaire.Item.EnableWhen parseQuestionnaireItemEnableWhen(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Questionnaire.Item.EnableWhen.Builder builder = Questionnaire.Item.EnableWhen.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "question":
                    builder.question(parseString("question", reader, -1));
                    break;
                case "operator":
                    builder.operator((QuestionnaireItemOperator) parseString(QuestionnaireItemOperator.builder(), "operator", reader, -1));
                    break;
                case "answerBoolean":
                    builder.answer(parseBoolean("answerBoolean", reader, -1));
                    break;
                case "answerDecimal":
                    builder.answer(parseDecimal("answerDecimal", reader, -1));
                    break;
                case "answerInteger":
                    builder.answer(parseInteger("answerInteger", reader, -1));
                    break;
                case "answerDate":
                    builder.answer(parseDate("answerDate", reader, -1));
                    break;
                case "answerDateTime":
                    builder.answer(parseDateTime("answerDateTime", reader, -1));
                    break;
                case "answerTime":
                    builder.answer(parseTime("answerTime", reader, -1));
                    break;
                case "answerString":
                    builder.answer(parseString("answerString", reader, -1));
                    break;
                case "answerCoding":
                    builder.answer(parseCoding("answerCoding", reader, -1));
                    break;
                case "answerQuantity":
                    builder.answer(parseQuantity("answerQuantity", reader, -1));
                    break;
                case "answerReference":
                    builder.answer(parseReference("answerReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Questionnaire.Item.Initial parseQuestionnaireItemInitial(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Questionnaire.Item.Initial.Builder builder = Questionnaire.Item.Initial.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private QuestionnaireResponse parseQuestionnaireResponse(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        QuestionnaireResponse.Builder builder = QuestionnaireResponse.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "questionnaire":
                    builder.questionnaire((Canonical) parseUri(Canonical.builder(), "questionnaire", reader, -1));
                    break;
                case "status":
                    builder.status((QuestionnaireResponseStatus) parseString(QuestionnaireResponseStatus.builder(), "status", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "authored":
                    builder.authored(parseDateTime("authored", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, -1));
                    break;
                case "item":
                    builder.item(parseQuestionnaireResponseItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private QuestionnaireResponse.Item parseQuestionnaireResponseItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        QuestionnaireResponse.Item.Builder builder = QuestionnaireResponse.Item.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, answerElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "linkId":
                    builder.linkId(parseString("linkId", reader, -1));
                    break;
                case "definition":
                    builder.definition(parseUri("definition", reader, -1));
                    break;
                case "text":
                    builder.text(parseString("text", reader, -1));
                    break;
                case "answer":
                    builder.answer(parseQuestionnaireResponseItemAnswer("answer", reader, answerElementIndex++));
                    break;
                case "item":
                    builder.item(parseQuestionnaireResponseItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private QuestionnaireResponse.Item.Answer parseQuestionnaireResponseItemAnswer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        QuestionnaireResponse.Item.Answer.Builder builder = QuestionnaireResponse.Item.Answer.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, itemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "item":
                    builder.item(parseQuestionnaireResponseItem("item", reader, itemElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Range parseRange(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Range.Builder builder = Range.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "low":
                    builder.low((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "low", reader, -1));
                    break;
                case "high":
                    builder.high((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "high", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Ratio parseRatio(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Ratio.Builder builder = Ratio.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "numerator":
                    builder.numerator(parseQuantity("numerator", reader, -1));
                    break;
                case "denominator":
                    builder.denominator(parseQuantity("denominator", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Reference parseReference(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Reference.Builder builder = Reference.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "reference":
                    builder.reference(parseString("reference", reader, -1));
                    break;
                case "type":
                    builder.type(parseUri("type", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RelatedArtifact parseRelatedArtifact(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RelatedArtifact.Builder builder = RelatedArtifact.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "type":
                    builder.type((RelatedArtifactType) parseString(RelatedArtifactType.builder(), "type", reader, -1));
                    break;
                case "label":
                    builder.label(parseString("label", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "citation":
                    builder.citation((Markdown) parseString(Markdown.builder(), "citation", reader, -1));
                    break;
                case "url":
                    builder.url((Url) parseUri(Url.builder(), "url", reader, -1));
                    break;
                case "document":
                    builder.document(parseAttachment("document", reader, -1));
                    break;
                case "resource":
                    builder.resource((Canonical) parseUri(Canonical.builder(), "resource", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RelatedPerson parseRelatedPerson(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RelatedPerson.Builder builder = RelatedPerson.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, relationshipElementIndex = 0, nameElementIndex = 0, telecomElementIndex = 0, addressElementIndex = 0, photoElementIndex = 0, communicationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, relationshipElementIndex++));
                    break;
                case "name":
                    builder.name(parseHumanName("name", reader, nameElementIndex++));
                    break;
                case "telecom":
                    builder.telecom(parseContactPoint("telecom", reader, telecomElementIndex++));
                    break;
                case "gender":
                    builder.gender((AdministrativeGender) parseString(AdministrativeGender.builder(), "gender", reader, -1));
                    break;
                case "birthDate":
                    builder.birthDate(parseDate("birthDate", reader, -1));
                    break;
                case "address":
                    builder.address(parseAddress("address", reader, addressElementIndex++));
                    break;
                case "photo":
                    builder.photo(parseAttachment("photo", reader, photoElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "communication":
                    builder.communication(parseRelatedPersonCommunication("communication", reader, communicationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RelatedPerson.Communication parseRelatedPersonCommunication(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RelatedPerson.Communication.Builder builder = RelatedPerson.Communication.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "language":
                    builder.language(parseCodeableConcept("language", reader, -1));
                    break;
                case "preferred":
                    builder.preferred(parseBoolean("preferred", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RequestGroup parseRequestGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RequestGroup.Builder builder = RequestGroup.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, replacesElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, noteElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "replaces":
                    builder.replaces(parseReference("replaces", reader, replacesElementIndex++));
                    break;
                case "groupIdentifier":
                    builder.groupIdentifier(parseIdentifier("groupIdentifier", reader, -1));
                    break;
                case "status":
                    builder.status((RequestStatus) parseString(RequestStatus.builder(), "status", reader, -1));
                    break;
                case "intent":
                    builder.intent((RequestIntent) parseString(RequestIntent.builder(), "intent", reader, -1));
                    break;
                case "priority":
                    builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "author":
                    builder.author(parseReference("author", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "action":
                    builder.action(parseRequestGroupAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RequestGroup.Action parseRequestGroupAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RequestGroup.Action.Builder builder = RequestGroup.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, codeElementIndex = 0, documentationElementIndex = 0, conditionElementIndex = 0, relatedActionElementIndex = 0, participantElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "prefix":
                    builder.prefix(parseString("prefix", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "textEquivalent":
                    builder.textEquivalent(parseString("textEquivalent", reader, -1));
                    break;
                case "priority":
                    builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, codeElementIndex++));
                    break;
                case "documentation":
                    builder.documentation(parseRelatedArtifact("documentation", reader, documentationElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseRequestGroupActionCondition("condition", reader, conditionElementIndex++));
                    break;
                case "relatedAction":
                    builder.relatedAction(parseRequestGroupActionRelatedAction("relatedAction", reader, relatedActionElementIndex++));
                    break;
                case "timingDateTime":
                    builder.timing(parseDateTime("timingDateTime", reader, -1));
                    break;
                case "timingAge":
                    builder.timing((Age) parseQuantity(Age.builder(), "timingAge", reader, -1));
                    break;
                case "timingPeriod":
                    builder.timing(parsePeriod("timingPeriod", reader, -1));
                    break;
                case "timingDuration":
                    builder.timing((Duration) parseQuantity(Duration.builder(), "timingDuration", reader, -1));
                    break;
                case "timingRange":
                    builder.timing(parseRange("timingRange", reader, -1));
                    break;
                case "timingTiming":
                    builder.timing(parseTiming("timingTiming", reader, -1));
                    break;
                case "participant":
                    builder.participant(parseReference("participant", reader, participantElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "groupingBehavior":
                    builder.groupingBehavior((ActionGroupingBehavior) parseString(ActionGroupingBehavior.builder(), "groupingBehavior", reader, -1));
                    break;
                case "selectionBehavior":
                    builder.selectionBehavior((ActionSelectionBehavior) parseString(ActionSelectionBehavior.builder(), "selectionBehavior", reader, -1));
                    break;
                case "requiredBehavior":
                    builder.requiredBehavior((ActionRequiredBehavior) parseString(ActionRequiredBehavior.builder(), "requiredBehavior", reader, -1));
                    break;
                case "precheckBehavior":
                    builder.precheckBehavior((ActionPrecheckBehavior) parseString(ActionPrecheckBehavior.builder(), "precheckBehavior", reader, -1));
                    break;
                case "cardinalityBehavior":
                    builder.cardinalityBehavior((ActionCardinalityBehavior) parseString(ActionCardinalityBehavior.builder(), "cardinalityBehavior", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseReference("resource", reader, -1));
                    break;
                case "action":
                    builder.action(parseRequestGroupAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RequestGroup.Action.Condition parseRequestGroupActionCondition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RequestGroup.Action.Condition.Builder builder = RequestGroup.Action.Condition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "kind":
                    builder.kind((ActionConditionKind) parseString(ActionConditionKind.builder(), "kind", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseExpression("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RequestGroup.Action.RelatedAction parseRequestGroupActionRelatedAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RequestGroup.Action.RelatedAction.Builder builder = RequestGroup.Action.RelatedAction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "actionId":
                    builder.actionId((Id) parseString(Id.builder(), "actionId", reader, -1));
                    break;
                case "relationship":
                    builder.relationship((ActionRelationshipType) parseString(ActionRelationshipType.builder(), "relationship", reader, -1));
                    break;
                case "offsetDuration":
                    builder.offset((Duration) parseQuantity(Duration.builder(), "offsetDuration", reader, -1));
                    break;
                case "offsetRange":
                    builder.offset(parseRange("offsetRange", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchDefinition parseResearchDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchDefinition.Builder builder = ResearchDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, commentElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, libraryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "shortTitle":
                    builder.shortTitle(parseString("shortTitle", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, commentElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "library":
                    builder.library((Canonical) parseUri(Canonical.builder(), "library", reader, libraryElementIndex++));
                    break;
                case "population":
                    builder.population(parseReference("population", reader, -1));
                    break;
                case "exposure":
                    builder.exposure(parseReference("exposure", reader, -1));
                    break;
                case "exposureAlternative":
                    builder.exposureAlternative(parseReference("exposureAlternative", reader, -1));
                    break;
                case "outcome":
                    builder.outcome(parseReference("outcome", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchElementDefinition parseResearchElementDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchElementDefinition.Builder builder = ResearchElementDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, commentElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, libraryElementIndex = 0, characteristicElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "shortTitle":
                    builder.shortTitle(parseString("shortTitle", reader, -1));
                    break;
                case "subtitle":
                    builder.subtitle(parseString("subtitle", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "subjectCodeableConcept":
                    builder.subject(parseCodeableConcept("subjectCodeableConcept", reader, -1));
                    break;
                case "subjectReference":
                    builder.subject(parseReference("subjectReference", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, commentElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "usage":
                    builder.usage(parseString("usage", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "library":
                    builder.library((Canonical) parseUri(Canonical.builder(), "library", reader, libraryElementIndex++));
                    break;
                case "type":
                    builder.type((ResearchElementType) parseString(ResearchElementType.builder(), "type", reader, -1));
                    break;
                case "variableType":
                    builder.variableType((VariableType) parseString(VariableType.builder(), "variableType", reader, -1));
                    break;
                case "characteristic":
                    builder.characteristic(parseResearchElementDefinitionCharacteristic("characteristic", reader, characteristicElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchElementDefinition.Characteristic parseResearchElementDefinitionCharacteristic(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchElementDefinition.Characteristic.Builder builder = ResearchElementDefinition.Characteristic.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, usageContextElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "definitionCodeableConcept":
                    builder.definition(parseCodeableConcept("definitionCodeableConcept", reader, -1));
                    break;
                case "definitionCanonical":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definitionCanonical", reader, -1));
                    break;
                case "definitionExpression":
                    builder.definition(parseExpression("definitionExpression", reader, -1));
                    break;
                case "definitionDataRequirement":
                    builder.definition(parseDataRequirement("definitionDataRequirement", reader, -1));
                    break;
                case "usageContext":
                    builder.usageContext(parseUsageContext("usageContext", reader, usageContextElementIndex++));
                    break;
                case "exclude":
                    builder.exclude(parseBoolean("exclude", reader, -1));
                    break;
                case "unitOfMeasure":
                    builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", reader, -1));
                    break;
                case "studyEffectiveDescription":
                    builder.studyEffectiveDescription(parseString("studyEffectiveDescription", reader, -1));
                    break;
                case "studyEffectiveDateTime":
                    builder.studyEffective(parseDateTime("studyEffectiveDateTime", reader, -1));
                    break;
                case "studyEffectivePeriod":
                    builder.studyEffective(parsePeriod("studyEffectivePeriod", reader, -1));
                    break;
                case "studyEffectiveDuration":
                    builder.studyEffective((Duration) parseQuantity(Duration.builder(), "studyEffectiveDuration", reader, -1));
                    break;
                case "studyEffectiveTiming":
                    builder.studyEffective(parseTiming("studyEffectiveTiming", reader, -1));
                    break;
                case "studyEffectiveTimeFromStart":
                    builder.studyEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "studyEffectiveTimeFromStart", reader, -1));
                    break;
                case "studyEffectiveGroupMeasure":
                    builder.studyEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "studyEffectiveGroupMeasure", reader, -1));
                    break;
                case "participantEffectiveDescription":
                    builder.participantEffectiveDescription(parseString("participantEffectiveDescription", reader, -1));
                    break;
                case "participantEffectiveDateTime":
                    builder.participantEffective(parseDateTime("participantEffectiveDateTime", reader, -1));
                    break;
                case "participantEffectivePeriod":
                    builder.participantEffective(parsePeriod("participantEffectivePeriod", reader, -1));
                    break;
                case "participantEffectiveDuration":
                    builder.participantEffective((Duration) parseQuantity(Duration.builder(), "participantEffectiveDuration", reader, -1));
                    break;
                case "participantEffectiveTiming":
                    builder.participantEffective(parseTiming("participantEffectiveTiming", reader, -1));
                    break;
                case "participantEffectiveTimeFromStart":
                    builder.participantEffectiveTimeFromStart((Duration) parseQuantity(Duration.builder(), "participantEffectiveTimeFromStart", reader, -1));
                    break;
                case "participantEffectiveGroupMeasure":
                    builder.participantEffectiveGroupMeasure((GroupMeasure) parseString(GroupMeasure.builder(), "participantEffectiveGroupMeasure", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchStudy parseResearchStudy(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchStudy.Builder builder = ResearchStudy.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, protocolElementIndex = 0, partOfElementIndex = 0, categoryElementIndex = 0, focusElementIndex = 0, conditionElementIndex = 0, contactElementIndex = 0, relatedArtifactElementIndex = 0, keywordElementIndex = 0, locationElementIndex = 0, enrollmentElementIndex = 0, siteElementIndex = 0, noteElementIndex = 0, armElementIndex = 0, objectiveElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "protocol":
                    builder.protocol(parseReference("protocol", reader, protocolElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((ResearchStudyStatus) parseString(ResearchStudyStatus.builder(), "status", reader, -1));
                    break;
                case "primaryPurposeType":
                    builder.primaryPurposeType(parseCodeableConcept("primaryPurposeType", reader, -1));
                    break;
                case "phase":
                    builder.phase(parseCodeableConcept("phase", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "focus":
                    builder.focus(parseCodeableConcept("focus", reader, focusElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseCodeableConcept("condition", reader, conditionElementIndex++));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "keyword":
                    builder.keyword(parseCodeableConcept("keyword", reader, keywordElementIndex++));
                    break;
                case "location":
                    builder.location(parseCodeableConcept("location", reader, locationElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "enrollment":
                    builder.enrollment(parseReference("enrollment", reader, enrollmentElementIndex++));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "sponsor":
                    builder.sponsor(parseReference("sponsor", reader, -1));
                    break;
                case "principalInvestigator":
                    builder.principalInvestigator(parseReference("principalInvestigator", reader, -1));
                    break;
                case "site":
                    builder.site(parseReference("site", reader, siteElementIndex++));
                    break;
                case "reasonStopped":
                    builder.reasonStopped(parseCodeableConcept("reasonStopped", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "arm":
                    builder.arm(parseResearchStudyArm("arm", reader, armElementIndex++));
                    break;
                case "objective":
                    builder.objective(parseResearchStudyObjective("objective", reader, objectiveElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchStudy.Arm parseResearchStudyArm(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchStudy.Arm.Builder builder = ResearchStudy.Arm.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchStudy.Objective parseResearchStudyObjective(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchStudy.Objective.Builder builder = ResearchStudy.Objective.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ResearchSubject parseResearchSubject(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ResearchSubject.Builder builder = ResearchSubject.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((ResearchSubjectStatus) parseString(ResearchSubjectStatus.builder(), "status", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "study":
                    builder.study(parseReference("study", reader, -1));
                    break;
                case "individual":
                    builder.individual(parseReference("individual", reader, -1));
                    break;
                case "assignedArm":
                    builder.assignedArm(parseString("assignedArm", reader, -1));
                    break;
                case "actualArm":
                    builder.actualArm(parseString("actualArm", reader, -1));
                    break;
                case "consent":
                    builder.consent(parseReference("consent", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskAssessment parseRiskAssessment(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskAssessment.Builder builder = RiskAssessment.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, basisElementIndex = 0, predictionElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, -1));
                    break;
                case "parent":
                    builder.parent(parseReference("parent", reader, -1));
                    break;
                case "status":
                    builder.status((RiskAssessmentStatus) parseString(RiskAssessmentStatus.builder(), "status", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "condition":
                    builder.condition(parseReference("condition", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "basis":
                    builder.basis(parseReference("basis", reader, basisElementIndex++));
                    break;
                case "prediction":
                    builder.prediction(parseRiskAssessmentPrediction("prediction", reader, predictionElementIndex++));
                    break;
                case "mitigation":
                    builder.mitigation(parseString("mitigation", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskAssessment.Prediction parseRiskAssessmentPrediction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskAssessment.Prediction.Builder builder = RiskAssessment.Prediction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "outcome":
                    builder.outcome(parseCodeableConcept("outcome", reader, -1));
                    break;
                case "probabilityDecimal":
                    builder.probability(parseDecimal("probabilityDecimal", reader, -1));
                    break;
                case "probabilityRange":
                    builder.probability(parseRange("probabilityRange", reader, -1));
                    break;
                case "qualitativeRisk":
                    builder.qualitativeRisk(parseCodeableConcept("qualitativeRisk", reader, -1));
                    break;
                case "relativeRisk":
                    builder.relativeRisk(parseDecimal("relativeRisk", reader, -1));
                    break;
                case "whenPeriod":
                    builder.when(parsePeriod("whenPeriod", reader, -1));
                    break;
                case "whenRange":
                    builder.when(parseRange("whenRange", reader, -1));
                    break;
                case "rationale":
                    builder.rationale(parseString("rationale", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskEvidenceSynthesis parseRiskEvidenceSynthesis(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskEvidenceSynthesis.Builder builder = RiskEvidenceSynthesis.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, noteElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, topicElementIndex = 0, authorElementIndex = 0, editorElementIndex = 0, reviewerElementIndex = 0, endorserElementIndex = 0, relatedArtifactElementIndex = 0, certaintyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "approvalDate":
                    builder.approvalDate(parseDate("approvalDate", reader, -1));
                    break;
                case "lastReviewDate":
                    builder.lastReviewDate(parseDate("lastReviewDate", reader, -1));
                    break;
                case "effectivePeriod":
                    builder.effectivePeriod(parsePeriod("effectivePeriod", reader, -1));
                    break;
                case "topic":
                    builder.topic(parseCodeableConcept("topic", reader, topicElementIndex++));
                    break;
                case "author":
                    builder.author(parseContactDetail("author", reader, authorElementIndex++));
                    break;
                case "editor":
                    builder.editor(parseContactDetail("editor", reader, editorElementIndex++));
                    break;
                case "reviewer":
                    builder.reviewer(parseContactDetail("reviewer", reader, reviewerElementIndex++));
                    break;
                case "endorser":
                    builder.endorser(parseContactDetail("endorser", reader, endorserElementIndex++));
                    break;
                case "relatedArtifact":
                    builder.relatedArtifact(parseRelatedArtifact("relatedArtifact", reader, relatedArtifactElementIndex++));
                    break;
                case "synthesisType":
                    builder.synthesisType(parseCodeableConcept("synthesisType", reader, -1));
                    break;
                case "studyType":
                    builder.studyType(parseCodeableConcept("studyType", reader, -1));
                    break;
                case "population":
                    builder.population(parseReference("population", reader, -1));
                    break;
                case "exposure":
                    builder.exposure(parseReference("exposure", reader, -1));
                    break;
                case "outcome":
                    builder.outcome(parseReference("outcome", reader, -1));
                    break;
                case "sampleSize":
                    builder.sampleSize(parseRiskEvidenceSynthesisSampleSize("sampleSize", reader, -1));
                    break;
                case "riskEstimate":
                    builder.riskEstimate(parseRiskEvidenceSynthesisRiskEstimate("riskEstimate", reader, -1));
                    break;
                case "certainty":
                    builder.certainty(parseRiskEvidenceSynthesisCertainty("certainty", reader, certaintyElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskEvidenceSynthesis.Certainty parseRiskEvidenceSynthesisCertainty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskEvidenceSynthesis.Certainty.Builder builder = RiskEvidenceSynthesis.Certainty.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, ratingElementIndex = 0, noteElementIndex = 0, certaintySubcomponentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "rating":
                    builder.rating(parseCodeableConcept("rating", reader, ratingElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "certaintySubcomponent":
                    builder.certaintySubcomponent(parseRiskEvidenceSynthesisCertaintyCertaintySubcomponent("certaintySubcomponent", reader, certaintySubcomponentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskEvidenceSynthesis.Certainty.CertaintySubcomponent parseRiskEvidenceSynthesisCertaintyCertaintySubcomponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.Builder builder = RiskEvidenceSynthesis.Certainty.CertaintySubcomponent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, ratingElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "rating":
                    builder.rating(parseCodeableConcept("rating", reader, ratingElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskEvidenceSynthesis.RiskEstimate parseRiskEvidenceSynthesisRiskEstimate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskEvidenceSynthesis.RiskEstimate.Builder builder = RiskEvidenceSynthesis.RiskEstimate.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, precisionEstimateElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "value":
                    builder.value(parseDecimal("value", reader, -1));
                    break;
                case "unitOfMeasure":
                    builder.unitOfMeasure(parseCodeableConcept("unitOfMeasure", reader, -1));
                    break;
                case "denominatorCount":
                    builder.denominatorCount(parseInteger("denominatorCount", reader, -1));
                    break;
                case "numeratorCount":
                    builder.numeratorCount(parseInteger("numeratorCount", reader, -1));
                    break;
                case "precisionEstimate":
                    builder.precisionEstimate(parseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate("precisionEstimate", reader, precisionEstimateElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate parseRiskEvidenceSynthesisRiskEstimatePrecisionEstimate(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.Builder builder = RiskEvidenceSynthesis.RiskEstimate.PrecisionEstimate.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "level":
                    builder.level(parseDecimal("level", reader, -1));
                    break;
                case "from":
                    builder.from(parseDecimal("from", reader, -1));
                    break;
                case "to":
                    builder.to(parseDecimal("to", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private RiskEvidenceSynthesis.SampleSize parseRiskEvidenceSynthesisSampleSize(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        RiskEvidenceSynthesis.SampleSize.Builder builder = RiskEvidenceSynthesis.SampleSize.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "numberOfStudies":
                    builder.numberOfStudies(parseInteger("numberOfStudies", reader, -1));
                    break;
                case "numberOfParticipants":
                    builder.numberOfParticipants(parseInteger("numberOfParticipants", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SampledData parseSampledData(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SampledData.Builder builder = SampledData.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "origin":
                    builder.origin((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "origin", reader, -1));
                    break;
                case "period":
                    builder.period(parseDecimal("period", reader, -1));
                    break;
                case "factor":
                    builder.factor(parseDecimal("factor", reader, -1));
                    break;
                case "lowerLimit":
                    builder.lowerLimit(parseDecimal("lowerLimit", reader, -1));
                    break;
                case "upperLimit":
                    builder.upperLimit(parseDecimal("upperLimit", reader, -1));
                    break;
                case "dimensions":
                    builder.dimensions((PositiveInt) parseInteger(PositiveInt.builder(), "dimensions", reader, -1));
                    break;
                case "data":
                    builder.data(parseString("data", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Schedule parseSchedule(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Schedule.Builder builder = Schedule.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, serviceCategoryElementIndex = 0, serviceTypeElementIndex = 0, specialtyElementIndex = 0, actorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "active":
                    builder.active(parseBoolean("active", reader, -1));
                    break;
                case "serviceCategory":
                    builder.serviceCategory(parseCodeableConcept("serviceCategory", reader, serviceCategoryElementIndex++));
                    break;
                case "serviceType":
                    builder.serviceType(parseCodeableConcept("serviceType", reader, serviceTypeElementIndex++));
                    break;
                case "specialty":
                    builder.specialty(parseCodeableConcept("specialty", reader, specialtyElementIndex++));
                    break;
                case "actor":
                    builder.actor(parseReference("actor", reader, actorElementIndex++));
                    break;
                case "planningHorizon":
                    builder.planningHorizon(parsePeriod("planningHorizon", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SearchParameter parseSearchParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SearchParameter.Builder builder = SearchParameter.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, baseElementIndex = 0, targetElementIndex = 0, comparatorElementIndex = 0, modifierElementIndex = 0, chainElementIndex = 0, componentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "derivedFrom":
                    builder.derivedFrom((Canonical) parseUri(Canonical.builder(), "derivedFrom", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "base":
                    builder.base((ResourceType) parseString(ResourceType.builder(), "base", reader, baseElementIndex++));
                    break;
                case "type":
                    builder.type((SearchParamType) parseString(SearchParamType.builder(), "type", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                case "xpath":
                    builder.xpath(parseString("xpath", reader, -1));
                    break;
                case "xpathUsage":
                    builder.xpathUsage((XPathUsageType) parseString(XPathUsageType.builder(), "xpathUsage", reader, -1));
                    break;
                case "target":
                    builder.target((ResourceType) parseString(ResourceType.builder(), "target", reader, targetElementIndex++));
                    break;
                case "multipleOr":
                    builder.multipleOr(parseBoolean("multipleOr", reader, -1));
                    break;
                case "multipleAnd":
                    builder.multipleAnd(parseBoolean("multipleAnd", reader, -1));
                    break;
                case "comparator":
                    builder.comparator((SearchComparator) parseString(SearchComparator.builder(), "comparator", reader, comparatorElementIndex++));
                    break;
                case "modifier":
                    builder.modifier((SearchModifierCode) parseString(SearchModifierCode.builder(), "modifier", reader, modifierElementIndex++));
                    break;
                case "chain":
                    builder.chain(parseString("chain", reader, chainElementIndex++));
                    break;
                case "component":
                    builder.component(parseSearchParameterComponent("component", reader, componentElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SearchParameter.Component parseSearchParameterComponent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SearchParameter.Component.Builder builder = SearchParameter.Component.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "definition":
                    builder.definition((Canonical) parseUri(Canonical.builder(), "definition", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ServiceRequest parseServiceRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ServiceRequest.Builder builder = ServiceRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, instantiatesCanonicalElementIndex = 0, instantiatesUriElementIndex = 0, basedOnElementIndex = 0, replacesElementIndex = 0, categoryElementIndex = 0, orderDetailElementIndex = 0, performerElementIndex = 0, locationCodeElementIndex = 0, locationReferenceElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0, insuranceElementIndex = 0, supportingInfoElementIndex = 0, specimenElementIndex = 0, bodySiteElementIndex = 0, noteElementIndex = 0, relevantHistoryElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, instantiatesCanonicalElementIndex++));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, instantiatesUriElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "replaces":
                    builder.replaces(parseReference("replaces", reader, replacesElementIndex++));
                    break;
                case "requisition":
                    builder.requisition(parseIdentifier("requisition", reader, -1));
                    break;
                case "status":
                    builder.status((ServiceRequestStatus) parseString(ServiceRequestStatus.builder(), "status", reader, -1));
                    break;
                case "intent":
                    builder.intent((ServiceRequestIntent) parseString(ServiceRequestIntent.builder(), "intent", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "priority":
                    builder.priority((ServiceRequestPriority) parseString(ServiceRequestPriority.builder(), "priority", reader, -1));
                    break;
                case "doNotPerform":
                    builder.doNotPerform(parseBoolean("doNotPerform", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "orderDetail":
                    builder.orderDetail(parseCodeableConcept("orderDetail", reader, orderDetailElementIndex++));
                    break;
                case "quantityQuantity":
                    builder.quantity(parseQuantity("quantityQuantity", reader, -1));
                    break;
                case "quantityRatio":
                    builder.quantity(parseRatio("quantityRatio", reader, -1));
                    break;
                case "quantityRange":
                    builder.quantity(parseRange("quantityRange", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "occurrenceTiming":
                    builder.occurrence(parseTiming("occurrenceTiming", reader, -1));
                    break;
                case "asNeededBoolean":
                    builder.asNeeded(parseBoolean("asNeededBoolean", reader, -1));
                    break;
                case "asNeededCodeableConcept":
                    builder.asNeeded(parseCodeableConcept("asNeededCodeableConcept", reader, -1));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, -1));
                    break;
                case "performerType":
                    builder.performerType(parseCodeableConcept("performerType", reader, -1));
                    break;
                case "performer":
                    builder.performer(parseReference("performer", reader, performerElementIndex++));
                    break;
                case "locationCode":
                    builder.locationCode(parseCodeableConcept("locationCode", reader, locationCodeElementIndex++));
                    break;
                case "locationReference":
                    builder.locationReference(parseReference("locationReference", reader, locationReferenceElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "insurance":
                    builder.insurance(parseReference("insurance", reader, insuranceElementIndex++));
                    break;
                case "supportingInfo":
                    builder.supportingInfo(parseReference("supportingInfo", reader, supportingInfoElementIndex++));
                    break;
                case "specimen":
                    builder.specimen(parseReference("specimen", reader, specimenElementIndex++));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, bodySiteElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "patientInstruction":
                    builder.patientInstruction(parseString("patientInstruction", reader, -1));
                    break;
                case "relevantHistory":
                    builder.relevantHistory(parseReference("relevantHistory", reader, relevantHistoryElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Signature parseSignature(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Signature.Builder builder = Signature.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, typeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, typeElementIndex++));
                    break;
                case "when":
                    builder.when(parseInstant("when", reader, -1));
                    break;
                case "who":
                    builder.who(parseReference("who", reader, -1));
                    break;
                case "onBehalfOf":
                    builder.onBehalfOf(parseReference("onBehalfOf", reader, -1));
                    break;
                case "targetFormat":
                    builder.targetFormat((Code) parseString(Code.builder(), "targetFormat", reader, -1));
                    break;
                case "sigFormat":
                    builder.sigFormat((Code) parseString(Code.builder(), "sigFormat", reader, -1));
                    break;
                case "data":
                    builder.data(parseBase64Binary("data", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Slot parseSlot(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Slot.Builder builder = Slot.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, serviceCategoryElementIndex = 0, serviceTypeElementIndex = 0, specialtyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "serviceCategory":
                    builder.serviceCategory(parseCodeableConcept("serviceCategory", reader, serviceCategoryElementIndex++));
                    break;
                case "serviceType":
                    builder.serviceType(parseCodeableConcept("serviceType", reader, serviceTypeElementIndex++));
                    break;
                case "specialty":
                    builder.specialty(parseCodeableConcept("specialty", reader, specialtyElementIndex++));
                    break;
                case "appointmentType":
                    builder.appointmentType(parseCodeableConcept("appointmentType", reader, -1));
                    break;
                case "schedule":
                    builder.schedule(parseReference("schedule", reader, -1));
                    break;
                case "status":
                    builder.status((SlotStatus) parseString(SlotStatus.builder(), "status", reader, -1));
                    break;
                case "start":
                    builder.start(parseInstant("start", reader, -1));
                    break;
                case "end":
                    builder.end(parseInstant("end", reader, -1));
                    break;
                case "overbooked":
                    builder.overbooked(parseBoolean("overbooked", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Specimen parseSpecimen(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Specimen.Builder builder = Specimen.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, parentElementIndex = 0, requestElementIndex = 0, processingElementIndex = 0, containerElementIndex = 0, conditionElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "accessionIdentifier":
                    builder.accessionIdentifier(parseIdentifier("accessionIdentifier", reader, -1));
                    break;
                case "status":
                    builder.status((SpecimenStatus) parseString(SpecimenStatus.builder(), "status", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "subject":
                    builder.subject(parseReference("subject", reader, -1));
                    break;
                case "receivedTime":
                    builder.receivedTime(parseDateTime("receivedTime", reader, -1));
                    break;
                case "parent":
                    builder.parent(parseReference("parent", reader, parentElementIndex++));
                    break;
                case "request":
                    builder.request(parseReference("request", reader, requestElementIndex++));
                    break;
                case "collection":
                    builder.collection(parseSpecimenCollection("collection", reader, -1));
                    break;
                case "processing":
                    builder.processing(parseSpecimenProcessing("processing", reader, processingElementIndex++));
                    break;
                case "container":
                    builder.container(parseSpecimenContainer("container", reader, containerElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseCodeableConcept("condition", reader, conditionElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Specimen.Collection parseSpecimenCollection(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Specimen.Collection.Builder builder = Specimen.Collection.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "collector":
                    builder.collector(parseReference("collector", reader, -1));
                    break;
                case "collectedDateTime":
                    builder.collected(parseDateTime("collectedDateTime", reader, -1));
                    break;
                case "collectedPeriod":
                    builder.collected(parsePeriod("collectedPeriod", reader, -1));
                    break;
                case "duration":
                    builder.duration((Duration) parseQuantity(Duration.builder(), "duration", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "bodySite":
                    builder.bodySite(parseCodeableConcept("bodySite", reader, -1));
                    break;
                case "fastingStatusCodeableConcept":
                    builder.fastingStatus(parseCodeableConcept("fastingStatusCodeableConcept", reader, -1));
                    break;
                case "fastingStatusDuration":
                    builder.fastingStatus((Duration) parseQuantity(Duration.builder(), "fastingStatusDuration", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Specimen.Container parseSpecimenContainer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Specimen.Container.Builder builder = Specimen.Container.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "capacity":
                    builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", reader, -1));
                    break;
                case "specimenQuantity":
                    builder.specimenQuantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "specimenQuantity", reader, -1));
                    break;
                case "additiveCodeableConcept":
                    builder.additive(parseCodeableConcept("additiveCodeableConcept", reader, -1));
                    break;
                case "additiveReference":
                    builder.additive(parseReference("additiveReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Specimen.Processing parseSpecimenProcessing(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Specimen.Processing.Builder builder = Specimen.Processing.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, additiveElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "procedure":
                    builder.procedure(parseCodeableConcept("procedure", reader, -1));
                    break;
                case "additive":
                    builder.additive(parseReference("additive", reader, additiveElementIndex++));
                    break;
                case "timeDateTime":
                    builder.time(parseDateTime("timeDateTime", reader, -1));
                    break;
                case "timePeriod":
                    builder.time(parsePeriod("timePeriod", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SpecimenDefinition parseSpecimenDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SpecimenDefinition.Builder builder = SpecimenDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, patientPreparationElementIndex = 0, collectionElementIndex = 0, typeTestedElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "typeCollected":
                    builder.typeCollected(parseCodeableConcept("typeCollected", reader, -1));
                    break;
                case "patientPreparation":
                    builder.patientPreparation(parseCodeableConcept("patientPreparation", reader, patientPreparationElementIndex++));
                    break;
                case "timeAspect":
                    builder.timeAspect(parseString("timeAspect", reader, -1));
                    break;
                case "collection":
                    builder.collection(parseCodeableConcept("collection", reader, collectionElementIndex++));
                    break;
                case "typeTested":
                    builder.typeTested(parseSpecimenDefinitionTypeTested("typeTested", reader, typeTestedElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SpecimenDefinition.TypeTested parseSpecimenDefinitionTypeTested(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SpecimenDefinition.TypeTested.Builder builder = SpecimenDefinition.TypeTested.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, rejectionCriterionElementIndex = 0, handlingElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "isDerived":
                    builder.isDerived(parseBoolean("isDerived", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "preference":
                    builder.preference((SpecimenContainedPreference) parseString(SpecimenContainedPreference.builder(), "preference", reader, -1));
                    break;
                case "container":
                    builder.container(parseSpecimenDefinitionTypeTestedContainer("container", reader, -1));
                    break;
                case "requirement":
                    builder.requirement(parseString("requirement", reader, -1));
                    break;
                case "retentionTime":
                    builder.retentionTime((Duration) parseQuantity(Duration.builder(), "retentionTime", reader, -1));
                    break;
                case "rejectionCriterion":
                    builder.rejectionCriterion(parseCodeableConcept("rejectionCriterion", reader, rejectionCriterionElementIndex++));
                    break;
                case "handling":
                    builder.handling(parseSpecimenDefinitionTypeTestedHandling("handling", reader, handlingElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SpecimenDefinition.TypeTested.Container parseSpecimenDefinitionTypeTestedContainer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SpecimenDefinition.TypeTested.Container.Builder builder = SpecimenDefinition.TypeTested.Container.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, additiveElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "material":
                    builder.material(parseCodeableConcept("material", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "cap":
                    builder.cap(parseCodeableConcept("cap", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "capacity":
                    builder.capacity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "capacity", reader, -1));
                    break;
                case "minimumVolumeSimpleQuantity":
                    builder.minimumVolume((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "minimumVolumeSimpleQuantity", reader, -1));
                    break;
                case "minimumVolumeString":
                    builder.minimumVolume(parseString("minimumVolumeString", reader, -1));
                    break;
                case "additive":
                    builder.additive(parseSpecimenDefinitionTypeTestedContainerAdditive("additive", reader, additiveElementIndex++));
                    break;
                case "preparation":
                    builder.preparation(parseString("preparation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SpecimenDefinition.TypeTested.Container.Additive parseSpecimenDefinitionTypeTestedContainerAdditive(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SpecimenDefinition.TypeTested.Container.Additive.Builder builder = SpecimenDefinition.TypeTested.Container.Additive.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "additiveCodeableConcept":
                    builder.additive(parseCodeableConcept("additiveCodeableConcept", reader, -1));
                    break;
                case "additiveReference":
                    builder.additive(parseReference("additiveReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SpecimenDefinition.TypeTested.Handling parseSpecimenDefinitionTypeTestedHandling(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SpecimenDefinition.TypeTested.Handling.Builder builder = SpecimenDefinition.TypeTested.Handling.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "temperatureQualifier":
                    builder.temperatureQualifier(parseCodeableConcept("temperatureQualifier", reader, -1));
                    break;
                case "temperatureRange":
                    builder.temperatureRange(parseRange("temperatureRange", reader, -1));
                    break;
                case "maxDuration":
                    builder.maxDuration((Duration) parseQuantity(Duration.builder(), "maxDuration", reader, -1));
                    break;
                case "instruction":
                    builder.instruction(parseString("instruction", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private String parseString(String.Builder builder, java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private String parseString(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        return parseString(String.builder(), elementName, reader, elementIndex);
    }

    private StructureDefinition parseStructureDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureDefinition.Builder builder = StructureDefinition.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, keywordElementIndex = 0, mappingElementIndex = 0, contextElementIndex = 0, contextInvariantElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "keyword":
                    builder.keyword(parseCoding("keyword", reader, keywordElementIndex++));
                    break;
                case "fhirVersion":
                    builder.fhirVersion((FHIRVersion) parseString(FHIRVersion.builder(), "fhirVersion", reader, -1));
                    break;
                case "mapping":
                    builder.mapping(parseStructureDefinitionMapping("mapping", reader, mappingElementIndex++));
                    break;
                case "kind":
                    builder.kind((StructureDefinitionKind) parseString(StructureDefinitionKind.builder(), "kind", reader, -1));
                    break;
                case "abstract":
                    builder._abstract(parseBoolean("abstract", reader, -1));
                    break;
                case "context":
                    builder.context(parseStructureDefinitionContext("context", reader, contextElementIndex++));
                    break;
                case "contextInvariant":
                    builder.contextInvariant(parseString("contextInvariant", reader, contextInvariantElementIndex++));
                    break;
                case "type":
                    builder.type(parseUri("type", reader, -1));
                    break;
                case "baseDefinition":
                    builder.baseDefinition((Canonical) parseUri(Canonical.builder(), "baseDefinition", reader, -1));
                    break;
                case "derivation":
                    builder.derivation((TypeDerivationRule) parseString(TypeDerivationRule.builder(), "derivation", reader, -1));
                    break;
                case "snapshot":
                    builder.snapshot(parseStructureDefinitionSnapshot("snapshot", reader, -1));
                    break;
                case "differential":
                    builder.differential(parseStructureDefinitionDifferential("differential", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureDefinition.Context parseStructureDefinitionContext(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureDefinition.Context.Builder builder = StructureDefinition.Context.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((ExtensionContextType) parseString(ExtensionContextType.builder(), "type", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureDefinition.Differential parseStructureDefinitionDifferential(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureDefinition.Differential.Builder builder = StructureDefinition.Differential.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, elementElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "element":
                    builder.element(parseElementDefinition("element", reader, elementElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureDefinition.Mapping parseStructureDefinitionMapping(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureDefinition.Mapping.Builder builder = StructureDefinition.Mapping.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identity":
                    builder.identity((Id) parseString(Id.builder(), "identity", reader, -1));
                    break;
                case "uri":
                    builder.uri(parseUri("uri", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureDefinition.Snapshot parseStructureDefinitionSnapshot(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureDefinition.Snapshot.Builder builder = StructureDefinition.Snapshot.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, elementElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "element":
                    builder.element(parseElementDefinition("element", reader, elementElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap parseStructureMap(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Builder builder = StructureMap.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, structureElementIndex = 0, importElementIndex = 0, groupElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "structure":
                    builder.structure(parseStructureMapStructure("structure", reader, structureElementIndex++));
                    break;
                case "import":
                    builder._import((Canonical) parseUri(Canonical.builder(), "import", reader, importElementIndex++));
                    break;
                case "group":
                    builder.group(parseStructureMapGroup("group", reader, groupElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group parseStructureMapGroup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Builder builder = StructureMap.Group.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, inputElementIndex = 0, ruleElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name((Id) parseString(Id.builder(), "name", reader, -1));
                    break;
                case "extends":
                    builder._extends((Id) parseString(Id.builder(), "extends", reader, -1));
                    break;
                case "typeMode":
                    builder.typeMode((StructureMapGroupTypeMode) parseString(StructureMapGroupTypeMode.builder(), "typeMode", reader, -1));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                case "input":
                    builder.input(parseStructureMapGroupInput("input", reader, inputElementIndex++));
                    break;
                case "rule":
                    builder.rule(parseStructureMapGroupRule("rule", reader, ruleElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group.Input parseStructureMapGroupInput(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Input.Builder builder = StructureMap.Group.Input.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name((Id) parseString(Id.builder(), "name", reader, -1));
                    break;
                case "type":
                    builder.type(parseString("type", reader, -1));
                    break;
                case "mode":
                    builder.mode((StructureMapInputMode) parseString(StructureMapInputMode.builder(), "mode", reader, -1));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group.Rule parseStructureMapGroupRule(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Rule.Builder builder = StructureMap.Group.Rule.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0, targetElementIndex = 0, ruleElementIndex = 0, dependentElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name((Id) parseString(Id.builder(), "name", reader, -1));
                    break;
                case "source":
                    builder.source(parseStructureMapGroupRuleSource("source", reader, sourceElementIndex++));
                    break;
                case "target":
                    builder.target(parseStructureMapGroupRuleTarget("target", reader, targetElementIndex++));
                    break;
                case "rule":
                    builder.rule(parseStructureMapGroupRule("rule", reader, ruleElementIndex++));
                    break;
                case "dependent":
                    builder.dependent(parseStructureMapGroupRuleDependent("dependent", reader, dependentElementIndex++));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group.Rule.Dependent parseStructureMapGroupRuleDependent(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Rule.Dependent.Builder builder = StructureMap.Group.Rule.Dependent.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, variableElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name((Id) parseString(Id.builder(), "name", reader, -1));
                    break;
                case "variable":
                    builder.variable(parseString("variable", reader, variableElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group.Rule.Source parseStructureMapGroupRuleSource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Rule.Source.Builder builder = StructureMap.Group.Rule.Source.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "context":
                    builder.context((Id) parseString(Id.builder(), "context", reader, -1));
                    break;
                case "min":
                    builder.min(parseInteger("min", reader, -1));
                    break;
                case "max":
                    builder.max(parseString("max", reader, -1));
                    break;
                case "type":
                    builder.type(parseString("type", reader, -1));
                    break;
                case "defaultValueBase64Binary":
                    builder.defaultValue(parseBase64Binary("defaultValueBase64Binary", reader, -1));
                    break;
                case "defaultValueBoolean":
                    builder.defaultValue(parseBoolean("defaultValueBoolean", reader, -1));
                    break;
                case "defaultValueCanonical":
                    builder.defaultValue((Canonical) parseUri(Canonical.builder(), "defaultValueCanonical", reader, -1));
                    break;
                case "defaultValueCode":
                    builder.defaultValue((Code) parseString(Code.builder(), "defaultValueCode", reader, -1));
                    break;
                case "defaultValueDate":
                    builder.defaultValue(parseDate("defaultValueDate", reader, -1));
                    break;
                case "defaultValueDateTime":
                    builder.defaultValue(parseDateTime("defaultValueDateTime", reader, -1));
                    break;
                case "defaultValueDecimal":
                    builder.defaultValue(parseDecimal("defaultValueDecimal", reader, -1));
                    break;
                case "defaultValueId":
                    builder.defaultValue((Id) parseString(Id.builder(), "defaultValueId", reader, -1));
                    break;
                case "defaultValueInstant":
                    builder.defaultValue(parseInstant("defaultValueInstant", reader, -1));
                    break;
                case "defaultValueInteger":
                    builder.defaultValue(parseInteger("defaultValueInteger", reader, -1));
                    break;
                case "defaultValueMarkdown":
                    builder.defaultValue((Markdown) parseString(Markdown.builder(), "defaultValueMarkdown", reader, -1));
                    break;
                case "defaultValueOid":
                    builder.defaultValue((Oid) parseUri(Oid.builder(), "defaultValueOid", reader, -1));
                    break;
                case "defaultValuePositiveInt":
                    builder.defaultValue((PositiveInt) parseInteger(PositiveInt.builder(), "defaultValuePositiveInt", reader, -1));
                    break;
                case "defaultValueString":
                    builder.defaultValue(parseString("defaultValueString", reader, -1));
                    break;
                case "defaultValueTime":
                    builder.defaultValue(parseTime("defaultValueTime", reader, -1));
                    break;
                case "defaultValueUnsignedInt":
                    builder.defaultValue((UnsignedInt) parseInteger(UnsignedInt.builder(), "defaultValueUnsignedInt", reader, -1));
                    break;
                case "defaultValueUri":
                    builder.defaultValue(parseUri("defaultValueUri", reader, -1));
                    break;
                case "defaultValueUrl":
                    builder.defaultValue((Url) parseUri(Url.builder(), "defaultValueUrl", reader, -1));
                    break;
                case "defaultValueUuid":
                    builder.defaultValue((Uuid) parseUri(Uuid.builder(), "defaultValueUuid", reader, -1));
                    break;
                case "defaultValueAddress":
                    builder.defaultValue(parseAddress("defaultValueAddress", reader, -1));
                    break;
                case "defaultValueAge":
                    builder.defaultValue((Age) parseQuantity(Age.builder(), "defaultValueAge", reader, -1));
                    break;
                case "defaultValueAnnotation":
                    builder.defaultValue(parseAnnotation("defaultValueAnnotation", reader, -1));
                    break;
                case "defaultValueAttachment":
                    builder.defaultValue(parseAttachment("defaultValueAttachment", reader, -1));
                    break;
                case "defaultValueCodeableConcept":
                    builder.defaultValue(parseCodeableConcept("defaultValueCodeableConcept", reader, -1));
                    break;
                case "defaultValueCoding":
                    builder.defaultValue(parseCoding("defaultValueCoding", reader, -1));
                    break;
                case "defaultValueContactPoint":
                    builder.defaultValue(parseContactPoint("defaultValueContactPoint", reader, -1));
                    break;
                case "defaultValueCount":
                    builder.defaultValue((Count) parseQuantity(Count.builder(), "defaultValueCount", reader, -1));
                    break;
                case "defaultValueDistance":
                    builder.defaultValue((Distance) parseQuantity(Distance.builder(), "defaultValueDistance", reader, -1));
                    break;
                case "defaultValueDuration":
                    builder.defaultValue((Duration) parseQuantity(Duration.builder(), "defaultValueDuration", reader, -1));
                    break;
                case "defaultValueHumanName":
                    builder.defaultValue(parseHumanName("defaultValueHumanName", reader, -1));
                    break;
                case "defaultValueIdentifier":
                    builder.defaultValue(parseIdentifier("defaultValueIdentifier", reader, -1));
                    break;
                case "defaultValueMoney":
                    builder.defaultValue(parseMoney("defaultValueMoney", reader, -1));
                    break;
                case "defaultValuePeriod":
                    builder.defaultValue(parsePeriod("defaultValuePeriod", reader, -1));
                    break;
                case "defaultValueQuantity":
                    builder.defaultValue(parseQuantity("defaultValueQuantity", reader, -1));
                    break;
                case "defaultValueRange":
                    builder.defaultValue(parseRange("defaultValueRange", reader, -1));
                    break;
                case "defaultValueRatio":
                    builder.defaultValue(parseRatio("defaultValueRatio", reader, -1));
                    break;
                case "defaultValueReference":
                    builder.defaultValue(parseReference("defaultValueReference", reader, -1));
                    break;
                case "defaultValueSampledData":
                    builder.defaultValue(parseSampledData("defaultValueSampledData", reader, -1));
                    break;
                case "defaultValueSignature":
                    builder.defaultValue(parseSignature("defaultValueSignature", reader, -1));
                    break;
                case "defaultValueTiming":
                    builder.defaultValue(parseTiming("defaultValueTiming", reader, -1));
                    break;
                case "defaultValueContactDetail":
                    builder.defaultValue(parseContactDetail("defaultValueContactDetail", reader, -1));
                    break;
                case "defaultValueContributor":
                    builder.defaultValue(parseContributor("defaultValueContributor", reader, -1));
                    break;
                case "defaultValueDataRequirement":
                    builder.defaultValue(parseDataRequirement("defaultValueDataRequirement", reader, -1));
                    break;
                case "defaultValueExpression":
                    builder.defaultValue(parseExpression("defaultValueExpression", reader, -1));
                    break;
                case "defaultValueParameterDefinition":
                    builder.defaultValue(parseParameterDefinition("defaultValueParameterDefinition", reader, -1));
                    break;
                case "defaultValueRelatedArtifact":
                    builder.defaultValue(parseRelatedArtifact("defaultValueRelatedArtifact", reader, -1));
                    break;
                case "defaultValueTriggerDefinition":
                    builder.defaultValue(parseTriggerDefinition("defaultValueTriggerDefinition", reader, -1));
                    break;
                case "defaultValueUsageContext":
                    builder.defaultValue(parseUsageContext("defaultValueUsageContext", reader, -1));
                    break;
                case "defaultValueDosage":
                    builder.defaultValue(parseDosage("defaultValueDosage", reader, -1));
                    break;
                case "element":
                    builder.element(parseString("element", reader, -1));
                    break;
                case "listMode":
                    builder.listMode((StructureMapSourceListMode) parseString(StructureMapSourceListMode.builder(), "listMode", reader, -1));
                    break;
                case "variable":
                    builder.variable((Id) parseString(Id.builder(), "variable", reader, -1));
                    break;
                case "condition":
                    builder.condition(parseString("condition", reader, -1));
                    break;
                case "check":
                    builder.check(parseString("check", reader, -1));
                    break;
                case "logMessage":
                    builder.logMessage(parseString("logMessage", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group.Rule.Target parseStructureMapGroupRuleTarget(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Rule.Target.Builder builder = StructureMap.Group.Rule.Target.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, listModeElementIndex = 0, parameterElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "context":
                    builder.context((Id) parseString(Id.builder(), "context", reader, -1));
                    break;
                case "contextType":
                    builder.contextType((StructureMapContextType) parseString(StructureMapContextType.builder(), "contextType", reader, -1));
                    break;
                case "element":
                    builder.element(parseString("element", reader, -1));
                    break;
                case "variable":
                    builder.variable((Id) parseString(Id.builder(), "variable", reader, -1));
                    break;
                case "listMode":
                    builder.listMode((StructureMapTargetListMode) parseString(StructureMapTargetListMode.builder(), "listMode", reader, listModeElementIndex++));
                    break;
                case "listRuleId":
                    builder.listRuleId((Id) parseString(Id.builder(), "listRuleId", reader, -1));
                    break;
                case "transform":
                    builder.transform((StructureMapTransform) parseString(StructureMapTransform.builder(), "transform", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseStructureMapGroupRuleTargetParameter("parameter", reader, parameterElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Group.Rule.Target.Parameter parseStructureMapGroupRuleTargetParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Group.Rule.Target.Parameter.Builder builder = StructureMap.Group.Rule.Target.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "valueId":
                    builder.value((Id) parseString(Id.builder(), "valueId", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private StructureMap.Structure parseStructureMapStructure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        StructureMap.Structure.Builder builder = StructureMap.Structure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url((Canonical) parseUri(Canonical.builder(), "url", reader, -1));
                    break;
                case "mode":
                    builder.mode((StructureMapModelMode) parseString(StructureMapModelMode.builder(), "mode", reader, -1));
                    break;
                case "alias":
                    builder.alias(parseString("alias", reader, -1));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Subscription parseSubscription(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Subscription.Builder builder = Subscription.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "status":
                    builder.status((SubscriptionStatus) parseString(SubscriptionStatus.builder(), "status", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactPoint("contact", reader, contactElementIndex++));
                    break;
                case "end":
                    builder.end(parseInstant("end", reader, -1));
                    break;
                case "reason":
                    builder.reason(parseString("reason", reader, -1));
                    break;
                case "criteria":
                    builder.criteria(parseString("criteria", reader, -1));
                    break;
                case "error":
                    builder.error(parseString("error", reader, -1));
                    break;
                case "channel":
                    builder.channel(parseSubscriptionChannel("channel", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Subscription.Channel parseSubscriptionChannel(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Subscription.Channel.Builder builder = Subscription.Channel.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, headerElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((SubscriptionChannelType) parseString(SubscriptionChannelType.builder(), "type", reader, -1));
                    break;
                case "endpoint":
                    builder.endpoint((Url) parseUri(Url.builder(), "endpoint", reader, -1));
                    break;
                case "payload":
                    builder.payload((Code) parseString(Code.builder(), "payload", reader, -1));
                    break;
                case "header":
                    builder.header(parseString("header", reader, headerElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Substance parseSubstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Substance.Builder builder = Substance.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, categoryElementIndex = 0, instanceElementIndex = 0, ingredientElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((FHIRSubstanceStatus) parseString(FHIRSubstanceStatus.builder(), "status", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, categoryElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "instance":
                    builder.instance(parseSubstanceInstance("instance", reader, instanceElementIndex++));
                    break;
                case "ingredient":
                    builder.ingredient(parseSubstanceIngredient("ingredient", reader, ingredientElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Substance.Ingredient parseSubstanceIngredient(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Substance.Ingredient.Builder builder = Substance.Ingredient.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "quantity":
                    builder.quantity(parseRatio("quantity", reader, -1));
                    break;
                case "substanceCodeableConcept":
                    builder.substance(parseCodeableConcept("substanceCodeableConcept", reader, -1));
                    break;
                case "substanceReference":
                    builder.substance(parseReference("substanceReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Substance.Instance parseSubstanceInstance(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Substance.Instance.Builder builder = Substance.Instance.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "expiry":
                    builder.expiry(parseDateTime("expiry", reader, -1));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceAmount parseSubstanceAmount(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceAmount.Builder builder = SubstanceAmount.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "amountQuantity":
                    builder.amount(parseQuantity("amountQuantity", reader, -1));
                    break;
                case "amountRange":
                    builder.amount(parseRange("amountRange", reader, -1));
                    break;
                case "amountString":
                    builder.amount(parseString("amountString", reader, -1));
                    break;
                case "amountType":
                    builder.amountType(parseCodeableConcept("amountType", reader, -1));
                    break;
                case "amountText":
                    builder.amountText(parseString("amountText", reader, -1));
                    break;
                case "referenceRange":
                    builder.referenceRange(parseSubstanceAmountReferenceRange("referenceRange", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceAmount.ReferenceRange parseSubstanceAmountReferenceRange(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceAmount.ReferenceRange.Builder builder = SubstanceAmount.ReferenceRange.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "lowLimit":
                    builder.lowLimit(parseQuantity("lowLimit", reader, -1));
                    break;
                case "highLimit":
                    builder.highLimit(parseQuantity("highLimit", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceNucleicAcid parseSubstanceNucleicAcid(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceNucleicAcid.Builder builder = SubstanceNucleicAcid.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, subunitElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequenceType":
                    builder.sequenceType(parseCodeableConcept("sequenceType", reader, -1));
                    break;
                case "numberOfSubunits":
                    builder.numberOfSubunits(parseInteger("numberOfSubunits", reader, -1));
                    break;
                case "areaOfHybridisation":
                    builder.areaOfHybridisation(parseString("areaOfHybridisation", reader, -1));
                    break;
                case "oligoNucleotideType":
                    builder.oligoNucleotideType(parseCodeableConcept("oligoNucleotideType", reader, -1));
                    break;
                case "subunit":
                    builder.subunit(parseSubstanceNucleicAcidSubunit("subunit", reader, subunitElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceNucleicAcid.Subunit parseSubstanceNucleicAcidSubunit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceNucleicAcid.Subunit.Builder builder = SubstanceNucleicAcid.Subunit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, linkageElementIndex = 0, sugarElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subunit":
                    builder.subunit(parseInteger("subunit", reader, -1));
                    break;
                case "sequence":
                    builder.sequence(parseString("sequence", reader, -1));
                    break;
                case "length":
                    builder.length(parseInteger("length", reader, -1));
                    break;
                case "sequenceAttachment":
                    builder.sequenceAttachment(parseAttachment("sequenceAttachment", reader, -1));
                    break;
                case "fivePrime":
                    builder.fivePrime(parseCodeableConcept("fivePrime", reader, -1));
                    break;
                case "threePrime":
                    builder.threePrime(parseCodeableConcept("threePrime", reader, -1));
                    break;
                case "linkage":
                    builder.linkage(parseSubstanceNucleicAcidSubunitLinkage("linkage", reader, linkageElementIndex++));
                    break;
                case "sugar":
                    builder.sugar(parseSubstanceNucleicAcidSubunitSugar("sugar", reader, sugarElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceNucleicAcid.Subunit.Linkage parseSubstanceNucleicAcidSubunitLinkage(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceNucleicAcid.Subunit.Linkage.Builder builder = SubstanceNucleicAcid.Subunit.Linkage.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "connectivity":
                    builder.connectivity(parseString("connectivity", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "residueSite":
                    builder.residueSite(parseString("residueSite", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceNucleicAcid.Subunit.Sugar parseSubstanceNucleicAcidSubunitSugar(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceNucleicAcid.Subunit.Sugar.Builder builder = SubstanceNucleicAcid.Subunit.Sugar.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "residueSite":
                    builder.residueSite(parseString("residueSite", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer parseSubstancePolymer(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.Builder builder = SubstancePolymer.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, copolymerConnectivityElementIndex = 0, modificationElementIndex = 0, monomerSetElementIndex = 0, repeatElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "class":
                    builder.clazz(parseCodeableConcept("class", reader, -1));
                    break;
                case "geometry":
                    builder.geometry(parseCodeableConcept("geometry", reader, -1));
                    break;
                case "copolymerConnectivity":
                    builder.copolymerConnectivity(parseCodeableConcept("copolymerConnectivity", reader, copolymerConnectivityElementIndex++));
                    break;
                case "modification":
                    builder.modification(parseString("modification", reader, modificationElementIndex++));
                    break;
                case "monomerSet":
                    builder.monomerSet(parseSubstancePolymerMonomerSet("monomerSet", reader, monomerSetElementIndex++));
                    break;
                case "repeat":
                    builder.repeat(parseSubstancePolymerRepeat("repeat", reader, repeatElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer.MonomerSet parseSubstancePolymerMonomerSet(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.MonomerSet.Builder builder = SubstancePolymer.MonomerSet.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, startingMaterialElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "ratioType":
                    builder.ratioType(parseCodeableConcept("ratioType", reader, -1));
                    break;
                case "startingMaterial":
                    builder.startingMaterial(parseSubstancePolymerMonomerSetStartingMaterial("startingMaterial", reader, startingMaterialElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer.MonomerSet.StartingMaterial parseSubstancePolymerMonomerSetStartingMaterial(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.MonomerSet.StartingMaterial.Builder builder = SubstancePolymer.MonomerSet.StartingMaterial.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "material":
                    builder.material(parseCodeableConcept("material", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "isDefining":
                    builder.isDefining(parseBoolean("isDefining", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseSubstanceAmount("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer.Repeat parseSubstancePolymerRepeat(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.Repeat.Builder builder = SubstancePolymer.Repeat.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, repeatUnitElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "numberOfUnits":
                    builder.numberOfUnits(parseInteger("numberOfUnits", reader, -1));
                    break;
                case "averageMolecularFormula":
                    builder.averageMolecularFormula(parseString("averageMolecularFormula", reader, -1));
                    break;
                case "repeatUnitAmountType":
                    builder.repeatUnitAmountType(parseCodeableConcept("repeatUnitAmountType", reader, -1));
                    break;
                case "repeatUnit":
                    builder.repeatUnit(parseSubstancePolymerRepeatRepeatUnit("repeatUnit", reader, repeatUnitElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer.Repeat.RepeatUnit parseSubstancePolymerRepeatRepeatUnit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.Repeat.RepeatUnit.Builder builder = SubstancePolymer.Repeat.RepeatUnit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, degreeOfPolymerisationElementIndex = 0, structuralRepresentationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "orientationOfPolymerisation":
                    builder.orientationOfPolymerisation(parseCodeableConcept("orientationOfPolymerisation", reader, -1));
                    break;
                case "repeatUnit":
                    builder.repeatUnit(parseString("repeatUnit", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseSubstanceAmount("amount", reader, -1));
                    break;
                case "degreeOfPolymerisation":
                    builder.degreeOfPolymerisation(parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation("degreeOfPolymerisation", reader, degreeOfPolymerisationElementIndex++));
                    break;
                case "structuralRepresentation":
                    builder.structuralRepresentation(parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation("structuralRepresentation", reader, structuralRepresentationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation parseSubstancePolymerRepeatRepeatUnitDegreeOfPolymerisation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.Builder builder = SubstancePolymer.Repeat.RepeatUnit.DegreeOfPolymerisation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "degree":
                    builder.degree(parseCodeableConcept("degree", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseSubstanceAmount("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation parseSubstancePolymerRepeatRepeatUnitStructuralRepresentation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.Builder builder = SubstancePolymer.Repeat.RepeatUnit.StructuralRepresentation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "representation":
                    builder.representation(parseString("representation", reader, -1));
                    break;
                case "attachment":
                    builder.attachment(parseAttachment("attachment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceProtein parseSubstanceProtein(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceProtein.Builder builder = SubstanceProtein.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, disulfideLinkageElementIndex = 0, subunitElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sequenceType":
                    builder.sequenceType(parseCodeableConcept("sequenceType", reader, -1));
                    break;
                case "numberOfSubunits":
                    builder.numberOfSubunits(parseInteger("numberOfSubunits", reader, -1));
                    break;
                case "disulfideLinkage":
                    builder.disulfideLinkage(parseString("disulfideLinkage", reader, disulfideLinkageElementIndex++));
                    break;
                case "subunit":
                    builder.subunit(parseSubstanceProteinSubunit("subunit", reader, subunitElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceProtein.Subunit parseSubstanceProteinSubunit(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceProtein.Subunit.Builder builder = SubstanceProtein.Subunit.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "subunit":
                    builder.subunit(parseInteger("subunit", reader, -1));
                    break;
                case "sequence":
                    builder.sequence(parseString("sequence", reader, -1));
                    break;
                case "length":
                    builder.length(parseInteger("length", reader, -1));
                    break;
                case "sequenceAttachment":
                    builder.sequenceAttachment(parseAttachment("sequenceAttachment", reader, -1));
                    break;
                case "nTerminalModificationId":
                    builder.nTerminalModificationId(parseIdentifier("nTerminalModificationId", reader, -1));
                    break;
                case "nTerminalModification":
                    builder.nTerminalModification(parseString("nTerminalModification", reader, -1));
                    break;
                case "cTerminalModificationId":
                    builder.cTerminalModificationId(parseIdentifier("cTerminalModificationId", reader, -1));
                    break;
                case "cTerminalModification":
                    builder.cTerminalModification(parseString("cTerminalModification", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceReferenceInformation parseSubstanceReferenceInformation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceReferenceInformation.Builder builder = SubstanceReferenceInformation.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, geneElementIndex = 0, geneElementElementIndex = 0, classificationElementIndex = 0, targetElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "gene":
                    builder.gene(parseSubstanceReferenceInformationGene("gene", reader, geneElementIndex++));
                    break;
                case "geneElement":
                    builder.geneElement(parseSubstanceReferenceInformationGeneElement("geneElement", reader, geneElementElementIndex++));
                    break;
                case "classification":
                    builder.classification(parseSubstanceReferenceInformationClassification("classification", reader, classificationElementIndex++));
                    break;
                case "target":
                    builder.target(parseSubstanceReferenceInformationTarget("target", reader, targetElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceReferenceInformation.Classification parseSubstanceReferenceInformationClassification(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceReferenceInformation.Classification.Builder builder = SubstanceReferenceInformation.Classification.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, subtypeElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "domain":
                    builder.domain(parseCodeableConcept("domain", reader, -1));
                    break;
                case "classification":
                    builder.classification(parseCodeableConcept("classification", reader, -1));
                    break;
                case "subtype":
                    builder.subtype(parseCodeableConcept("subtype", reader, subtypeElementIndex++));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceReferenceInformation.Gene parseSubstanceReferenceInformationGene(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceReferenceInformation.Gene.Builder builder = SubstanceReferenceInformation.Gene.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "geneSequenceOrigin":
                    builder.geneSequenceOrigin(parseCodeableConcept("geneSequenceOrigin", reader, -1));
                    break;
                case "gene":
                    builder.gene(parseCodeableConcept("gene", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceReferenceInformation.GeneElement parseSubstanceReferenceInformationGeneElement(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceReferenceInformation.GeneElement.Builder builder = SubstanceReferenceInformation.GeneElement.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "element":
                    builder.element(parseIdentifier("element", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceReferenceInformation.Target parseSubstanceReferenceInformationTarget(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceReferenceInformation.Target.Builder builder = SubstanceReferenceInformation.Target.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "target":
                    builder.target(parseIdentifier("target", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "interaction":
                    builder.interaction(parseCodeableConcept("interaction", reader, -1));
                    break;
                case "organism":
                    builder.organism(parseCodeableConcept("organism", reader, -1));
                    break;
                case "organismType":
                    builder.organismType(parseCodeableConcept("organismType", reader, -1));
                    break;
                case "amountQuantity":
                    builder.amount(parseQuantity("amountQuantity", reader, -1));
                    break;
                case "amountRange":
                    builder.amount(parseRange("amountRange", reader, -1));
                    break;
                case "amountString":
                    builder.amount(parseString("amountString", reader, -1));
                    break;
                case "amountType":
                    builder.amountType(parseCodeableConcept("amountType", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial parseSubstanceSourceMaterial(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.Builder builder = SubstanceSourceMaterial.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, parentSubstanceIdElementIndex = 0, parentSubstanceNameElementIndex = 0, countryOfOriginElementIndex = 0, geographicalLocationElementIndex = 0, fractionDescriptionElementIndex = 0, partDescriptionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "sourceMaterialClass":
                    builder.sourceMaterialClass(parseCodeableConcept("sourceMaterialClass", reader, -1));
                    break;
                case "sourceMaterialType":
                    builder.sourceMaterialType(parseCodeableConcept("sourceMaterialType", reader, -1));
                    break;
                case "sourceMaterialState":
                    builder.sourceMaterialState(parseCodeableConcept("sourceMaterialState", reader, -1));
                    break;
                case "organismId":
                    builder.organismId(parseIdentifier("organismId", reader, -1));
                    break;
                case "organismName":
                    builder.organismName(parseString("organismName", reader, -1));
                    break;
                case "parentSubstanceId":
                    builder.parentSubstanceId(parseIdentifier("parentSubstanceId", reader, parentSubstanceIdElementIndex++));
                    break;
                case "parentSubstanceName":
                    builder.parentSubstanceName(parseString("parentSubstanceName", reader, parentSubstanceNameElementIndex++));
                    break;
                case "countryOfOrigin":
                    builder.countryOfOrigin(parseCodeableConcept("countryOfOrigin", reader, countryOfOriginElementIndex++));
                    break;
                case "geographicalLocation":
                    builder.geographicalLocation(parseString("geographicalLocation", reader, geographicalLocationElementIndex++));
                    break;
                case "developmentStage":
                    builder.developmentStage(parseCodeableConcept("developmentStage", reader, -1));
                    break;
                case "fractionDescription":
                    builder.fractionDescription(parseSubstanceSourceMaterialFractionDescription("fractionDescription", reader, fractionDescriptionElementIndex++));
                    break;
                case "organism":
                    builder.organism(parseSubstanceSourceMaterialOrganism("organism", reader, -1));
                    break;
                case "partDescription":
                    builder.partDescription(parseSubstanceSourceMaterialPartDescription("partDescription", reader, partDescriptionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial.FractionDescription parseSubstanceSourceMaterialFractionDescription(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.FractionDescription.Builder builder = SubstanceSourceMaterial.FractionDescription.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "fraction":
                    builder.fraction(parseString("fraction", reader, -1));
                    break;
                case "materialType":
                    builder.materialType(parseCodeableConcept("materialType", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial.Organism parseSubstanceSourceMaterialOrganism(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.Organism.Builder builder = SubstanceSourceMaterial.Organism.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, authorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "family":
                    builder.family(parseCodeableConcept("family", reader, -1));
                    break;
                case "genus":
                    builder.genus(parseCodeableConcept("genus", reader, -1));
                    break;
                case "species":
                    builder.species(parseCodeableConcept("species", reader, -1));
                    break;
                case "intraspecificType":
                    builder.intraspecificType(parseCodeableConcept("intraspecificType", reader, -1));
                    break;
                case "intraspecificDescription":
                    builder.intraspecificDescription(parseString("intraspecificDescription", reader, -1));
                    break;
                case "author":
                    builder.author(parseSubstanceSourceMaterialOrganismAuthor("author", reader, authorElementIndex++));
                    break;
                case "hybrid":
                    builder.hybrid(parseSubstanceSourceMaterialOrganismHybrid("hybrid", reader, -1));
                    break;
                case "organismGeneral":
                    builder.organismGeneral(parseSubstanceSourceMaterialOrganismOrganismGeneral("organismGeneral", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial.Organism.Author parseSubstanceSourceMaterialOrganismAuthor(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.Organism.Author.Builder builder = SubstanceSourceMaterial.Organism.Author.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "authorType":
                    builder.authorType(parseCodeableConcept("authorType", reader, -1));
                    break;
                case "authorDescription":
                    builder.authorDescription(parseString("authorDescription", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial.Organism.Hybrid parseSubstanceSourceMaterialOrganismHybrid(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.Organism.Hybrid.Builder builder = SubstanceSourceMaterial.Organism.Hybrid.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "maternalOrganismId":
                    builder.maternalOrganismId(parseString("maternalOrganismId", reader, -1));
                    break;
                case "maternalOrganismName":
                    builder.maternalOrganismName(parseString("maternalOrganismName", reader, -1));
                    break;
                case "paternalOrganismId":
                    builder.paternalOrganismId(parseString("paternalOrganismId", reader, -1));
                    break;
                case "paternalOrganismName":
                    builder.paternalOrganismName(parseString("paternalOrganismName", reader, -1));
                    break;
                case "hybridType":
                    builder.hybridType(parseCodeableConcept("hybridType", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial.Organism.OrganismGeneral parseSubstanceSourceMaterialOrganismOrganismGeneral(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.Organism.OrganismGeneral.Builder builder = SubstanceSourceMaterial.Organism.OrganismGeneral.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "kingdom":
                    builder.kingdom(parseCodeableConcept("kingdom", reader, -1));
                    break;
                case "phylum":
                    builder.phylum(parseCodeableConcept("phylum", reader, -1));
                    break;
                case "class":
                    builder.clazz(parseCodeableConcept("class", reader, -1));
                    break;
                case "order":
                    builder.order(parseCodeableConcept("order", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSourceMaterial.PartDescription parseSubstanceSourceMaterialPartDescription(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSourceMaterial.PartDescription.Builder builder = SubstanceSourceMaterial.PartDescription.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "part":
                    builder.part(parseCodeableConcept("part", reader, -1));
                    break;
                case "partLocation":
                    builder.partLocation(parseCodeableConcept("partLocation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification parseSubstanceSpecification(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Builder builder = SubstanceSpecification.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0, moietyElementIndex = 0, propertyElementIndex = 0, codeElementIndex = 0, nameElementIndex = 0, molecularWeightElementIndex = 0, relationshipElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "domain":
                    builder.domain(parseCodeableConcept("domain", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "moiety":
                    builder.moiety(parseSubstanceSpecificationMoiety("moiety", reader, moietyElementIndex++));
                    break;
                case "property":
                    builder.property(parseSubstanceSpecificationProperty("property", reader, propertyElementIndex++));
                    break;
                case "referenceInformation":
                    builder.referenceInformation(parseReference("referenceInformation", reader, -1));
                    break;
                case "structure":
                    builder.structure(parseSubstanceSpecificationStructure("structure", reader, -1));
                    break;
                case "code":
                    builder.code(parseSubstanceSpecificationCode("code", reader, codeElementIndex++));
                    break;
                case "name":
                    builder.name(parseSubstanceSpecificationName("name", reader, nameElementIndex++));
                    break;
                case "molecularWeight":
                    builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", reader, molecularWeightElementIndex++));
                    break;
                case "relationship":
                    builder.relationship(parseSubstanceSpecificationRelationship("relationship", reader, relationshipElementIndex++));
                    break;
                case "nucleicAcid":
                    builder.nucleicAcid(parseReference("nucleicAcid", reader, -1));
                    break;
                case "polymer":
                    builder.polymer(parseReference("polymer", reader, -1));
                    break;
                case "protein":
                    builder.protein(parseReference("protein", reader, -1));
                    break;
                case "sourceMaterial":
                    builder.sourceMaterial(parseReference("sourceMaterial", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Code parseSubstanceSpecificationCode(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Code.Builder builder = SubstanceSpecification.Code.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "statusDate":
                    builder.statusDate(parseDateTime("statusDate", reader, -1));
                    break;
                case "comment":
                    builder.comment(parseString("comment", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Moiety parseSubstanceSpecificationMoiety(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Moiety.Builder builder = SubstanceSpecification.Moiety.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "role":
                    builder.role(parseCodeableConcept("role", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "stereochemistry":
                    builder.stereochemistry(parseCodeableConcept("stereochemistry", reader, -1));
                    break;
                case "opticalActivity":
                    builder.opticalActivity(parseCodeableConcept("opticalActivity", reader, -1));
                    break;
                case "molecularFormula":
                    builder.molecularFormula(parseString("molecularFormula", reader, -1));
                    break;
                case "amountQuantity":
                    builder.amount(parseQuantity("amountQuantity", reader, -1));
                    break;
                case "amountString":
                    builder.amount(parseString("amountString", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Name parseSubstanceSpecificationName(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Name.Builder builder = SubstanceSpecification.Name.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, languageElementIndex = 0, domainElementIndex = 0, jurisdictionElementIndex = 0, synonymElementIndex = 0, translationElementIndex = 0, officialElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "preferred":
                    builder.preferred(parseBoolean("preferred", reader, -1));
                    break;
                case "language":
                    builder.language(parseCodeableConcept("language", reader, languageElementIndex++));
                    break;
                case "domain":
                    builder.domain(parseCodeableConcept("domain", reader, domainElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "synonym":
                    builder.synonym(parseSubstanceSpecificationName("synonym", reader, synonymElementIndex++));
                    break;
                case "translation":
                    builder.translation(parseSubstanceSpecificationName("translation", reader, translationElementIndex++));
                    break;
                case "official":
                    builder.official(parseSubstanceSpecificationNameOfficial("official", reader, officialElementIndex++));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Name.Official parseSubstanceSpecificationNameOfficial(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Name.Official.Builder builder = SubstanceSpecification.Name.Official.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "authority":
                    builder.authority(parseCodeableConcept("authority", reader, -1));
                    break;
                case "status":
                    builder.status(parseCodeableConcept("status", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Property parseSubstanceSpecificationProperty(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Property.Builder builder = SubstanceSpecification.Property.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "parameters":
                    builder.parameters(parseString("parameters", reader, -1));
                    break;
                case "definingSubstanceReference":
                    builder.definingSubstance(parseReference("definingSubstanceReference", reader, -1));
                    break;
                case "definingSubstanceCodeableConcept":
                    builder.definingSubstance(parseCodeableConcept("definingSubstanceCodeableConcept", reader, -1));
                    break;
                case "amountQuantity":
                    builder.amount(parseQuantity("amountQuantity", reader, -1));
                    break;
                case "amountString":
                    builder.amount(parseString("amountString", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Relationship parseSubstanceSpecificationRelationship(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Relationship.Builder builder = SubstanceSpecification.Relationship.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, sourceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "substanceReference":
                    builder.substance(parseReference("substanceReference", reader, -1));
                    break;
                case "substanceCodeableConcept":
                    builder.substance(parseCodeableConcept("substanceCodeableConcept", reader, -1));
                    break;
                case "relationship":
                    builder.relationship(parseCodeableConcept("relationship", reader, -1));
                    break;
                case "isDefining":
                    builder.isDefining(parseBoolean("isDefining", reader, -1));
                    break;
                case "amountQuantity":
                    builder.amount(parseQuantity("amountQuantity", reader, -1));
                    break;
                case "amountRange":
                    builder.amount(parseRange("amountRange", reader, -1));
                    break;
                case "amountRatio":
                    builder.amount(parseRatio("amountRatio", reader, -1));
                    break;
                case "amountString":
                    builder.amount(parseString("amountString", reader, -1));
                    break;
                case "amountRatioLowLimit":
                    builder.amountRatioLowLimit(parseRatio("amountRatioLowLimit", reader, -1));
                    break;
                case "amountType":
                    builder.amountType(parseCodeableConcept("amountType", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Structure parseSubstanceSpecificationStructure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Structure.Builder builder = SubstanceSpecification.Structure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, isotopeElementIndex = 0, sourceElementIndex = 0, representationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "stereochemistry":
                    builder.stereochemistry(parseCodeableConcept("stereochemistry", reader, -1));
                    break;
                case "opticalActivity":
                    builder.opticalActivity(parseCodeableConcept("opticalActivity", reader, -1));
                    break;
                case "molecularFormula":
                    builder.molecularFormula(parseString("molecularFormula", reader, -1));
                    break;
                case "molecularFormulaByMoiety":
                    builder.molecularFormulaByMoiety(parseString("molecularFormulaByMoiety", reader, -1));
                    break;
                case "isotope":
                    builder.isotope(parseSubstanceSpecificationStructureIsotope("isotope", reader, isotopeElementIndex++));
                    break;
                case "molecularWeight":
                    builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", reader, -1));
                    break;
                case "source":
                    builder.source(parseReference("source", reader, sourceElementIndex++));
                    break;
                case "representation":
                    builder.representation(parseSubstanceSpecificationStructureRepresentation("representation", reader, representationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Structure.Isotope parseSubstanceSpecificationStructureIsotope(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Structure.Isotope.Builder builder = SubstanceSpecification.Structure.Isotope.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "name":
                    builder.name(parseCodeableConcept("name", reader, -1));
                    break;
                case "substitution":
                    builder.substitution(parseCodeableConcept("substitution", reader, -1));
                    break;
                case "halfLife":
                    builder.halfLife(parseQuantity("halfLife", reader, -1));
                    break;
                case "molecularWeight":
                    builder.molecularWeight(parseSubstanceSpecificationStructureIsotopeMolecularWeight("molecularWeight", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Structure.Isotope.MolecularWeight parseSubstanceSpecificationStructureIsotopeMolecularWeight(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Structure.Isotope.MolecularWeight.Builder builder = SubstanceSpecification.Structure.Isotope.MolecularWeight.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "method":
                    builder.method(parseCodeableConcept("method", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "amount":
                    builder.amount(parseQuantity("amount", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SubstanceSpecification.Structure.Representation parseSubstanceSpecificationStructureRepresentation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SubstanceSpecification.Structure.Representation.Builder builder = SubstanceSpecification.Structure.Representation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "representation":
                    builder.representation(parseString("representation", reader, -1));
                    break;
                case "attachment":
                    builder.attachment(parseAttachment("attachment", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SupplyDelivery parseSupplyDelivery(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SupplyDelivery.Builder builder = SupplyDelivery.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, receiverElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((SupplyDeliveryStatus) parseString(SupplyDeliveryStatus.builder(), "status", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "suppliedItem":
                    builder.suppliedItem(parseSupplyDeliverySuppliedItem("suppliedItem", reader, -1));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "occurrenceTiming":
                    builder.occurrence(parseTiming("occurrenceTiming", reader, -1));
                    break;
                case "supplier":
                    builder.supplier(parseReference("supplier", reader, -1));
                    break;
                case "destination":
                    builder.destination(parseReference("destination", reader, -1));
                    break;
                case "receiver":
                    builder.receiver(parseReference("receiver", reader, receiverElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SupplyDelivery.SuppliedItem parseSupplyDeliverySuppliedItem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SupplyDelivery.SuppliedItem.Builder builder = SupplyDelivery.SuppliedItem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "quantity":
                    builder.quantity((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "quantity", reader, -1));
                    break;
                case "itemCodeableConcept":
                    builder.item(parseCodeableConcept("itemCodeableConcept", reader, -1));
                    break;
                case "itemReference":
                    builder.item(parseReference("itemReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SupplyRequest parseSupplyRequest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SupplyRequest.Builder builder = SupplyRequest.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, parameterElementIndex = 0, supplierElementIndex = 0, reasonCodeElementIndex = 0, reasonReferenceElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((SupplyRequestStatus) parseString(SupplyRequestStatus.builder(), "status", reader, -1));
                    break;
                case "category":
                    builder.category(parseCodeableConcept("category", reader, -1));
                    break;
                case "priority":
                    builder.priority((RequestPriority) parseString(RequestPriority.builder(), "priority", reader, -1));
                    break;
                case "itemCodeableConcept":
                    builder.item(parseCodeableConcept("itemCodeableConcept", reader, -1));
                    break;
                case "itemReference":
                    builder.item(parseReference("itemReference", reader, -1));
                    break;
                case "quantity":
                    builder.quantity(parseQuantity("quantity", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseSupplyRequestParameter("parameter", reader, parameterElementIndex++));
                    break;
                case "occurrenceDateTime":
                    builder.occurrence(parseDateTime("occurrenceDateTime", reader, -1));
                    break;
                case "occurrencePeriod":
                    builder.occurrence(parsePeriod("occurrencePeriod", reader, -1));
                    break;
                case "occurrenceTiming":
                    builder.occurrence(parseTiming("occurrenceTiming", reader, -1));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, -1));
                    break;
                case "supplier":
                    builder.supplier(parseReference("supplier", reader, supplierElementIndex++));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, reasonCodeElementIndex++));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, reasonReferenceElementIndex++));
                    break;
                case "deliverFrom":
                    builder.deliverFrom(parseReference("deliverFrom", reader, -1));
                    break;
                case "deliverTo":
                    builder.deliverTo(parseReference("deliverTo", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private SupplyRequest.Parameter parseSupplyRequestParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        SupplyRequest.Parameter.Builder builder = SupplyRequest.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Task parseTask(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Task.Builder builder = Task.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, basedOnElementIndex = 0, partOfElementIndex = 0, performerTypeElementIndex = 0, insuranceElementIndex = 0, noteElementIndex = 0, relevantHistoryElementIndex = 0, inputElementIndex = 0, outputElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "instantiatesCanonical":
                    builder.instantiatesCanonical((Canonical) parseUri(Canonical.builder(), "instantiatesCanonical", reader, -1));
                    break;
                case "instantiatesUri":
                    builder.instantiatesUri(parseUri("instantiatesUri", reader, -1));
                    break;
                case "basedOn":
                    builder.basedOn(parseReference("basedOn", reader, basedOnElementIndex++));
                    break;
                case "groupIdentifier":
                    builder.groupIdentifier(parseIdentifier("groupIdentifier", reader, -1));
                    break;
                case "partOf":
                    builder.partOf(parseReference("partOf", reader, partOfElementIndex++));
                    break;
                case "status":
                    builder.status((TaskStatus) parseString(TaskStatus.builder(), "status", reader, -1));
                    break;
                case "statusReason":
                    builder.statusReason(parseCodeableConcept("statusReason", reader, -1));
                    break;
                case "businessStatus":
                    builder.businessStatus(parseCodeableConcept("businessStatus", reader, -1));
                    break;
                case "intent":
                    builder.intent((TaskIntent) parseString(TaskIntent.builder(), "intent", reader, -1));
                    break;
                case "priority":
                    builder.priority((TaskPriority) parseString(TaskPriority.builder(), "priority", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "focus":
                    builder.focus(parseReference("focus", reader, -1));
                    break;
                case "for":
                    builder._for(parseReference("for", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "executionPeriod":
                    builder.executionPeriod(parsePeriod("executionPeriod", reader, -1));
                    break;
                case "authoredOn":
                    builder.authoredOn(parseDateTime("authoredOn", reader, -1));
                    break;
                case "lastModified":
                    builder.lastModified(parseDateTime("lastModified", reader, -1));
                    break;
                case "requester":
                    builder.requester(parseReference("requester", reader, -1));
                    break;
                case "performerType":
                    builder.performerType(parseCodeableConcept("performerType", reader, performerTypeElementIndex++));
                    break;
                case "owner":
                    builder.owner(parseReference("owner", reader, -1));
                    break;
                case "location":
                    builder.location(parseReference("location", reader, -1));
                    break;
                case "reasonCode":
                    builder.reasonCode(parseCodeableConcept("reasonCode", reader, -1));
                    break;
                case "reasonReference":
                    builder.reasonReference(parseReference("reasonReference", reader, -1));
                    break;
                case "insurance":
                    builder.insurance(parseReference("insurance", reader, insuranceElementIndex++));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                case "relevantHistory":
                    builder.relevantHistory(parseReference("relevantHistory", reader, relevantHistoryElementIndex++));
                    break;
                case "restriction":
                    builder.restriction(parseTaskRestriction("restriction", reader, -1));
                    break;
                case "input":
                    builder.input(parseTaskInput("input", reader, inputElementIndex++));
                    break;
                case "output":
                    builder.output(parseTaskOutput("output", reader, outputElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Task.Input parseTaskInput(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Task.Input.Builder builder = Task.Input.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueCanonical":
                    builder.value((Canonical) parseUri(Canonical.builder(), "valueCanonical", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueId":
                    builder.value((Id) parseString(Id.builder(), "valueId", reader, -1));
                    break;
                case "valueInstant":
                    builder.value(parseInstant("valueInstant", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueMarkdown":
                    builder.value((Markdown) parseString(Markdown.builder(), "valueMarkdown", reader, -1));
                    break;
                case "valueOid":
                    builder.value((Oid) parseUri(Oid.builder(), "valueOid", reader, -1));
                    break;
                case "valuePositiveInt":
                    builder.value((PositiveInt) parseInteger(PositiveInt.builder(), "valuePositiveInt", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueUnsignedInt":
                    builder.value((UnsignedInt) parseInteger(UnsignedInt.builder(), "valueUnsignedInt", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueUrl":
                    builder.value((Url) parseUri(Url.builder(), "valueUrl", reader, -1));
                    break;
                case "valueUuid":
                    builder.value((Uuid) parseUri(Uuid.builder(), "valueUuid", reader, -1));
                    break;
                case "valueAddress":
                    builder.value(parseAddress("valueAddress", reader, -1));
                    break;
                case "valueAge":
                    builder.value((Age) parseQuantity(Age.builder(), "valueAge", reader, -1));
                    break;
                case "valueAnnotation":
                    builder.value(parseAnnotation("valueAnnotation", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueContactPoint":
                    builder.value(parseContactPoint("valueContactPoint", reader, -1));
                    break;
                case "valueCount":
                    builder.value((Count) parseQuantity(Count.builder(), "valueCount", reader, -1));
                    break;
                case "valueDistance":
                    builder.value((Distance) parseQuantity(Distance.builder(), "valueDistance", reader, -1));
                    break;
                case "valueDuration":
                    builder.value((Duration) parseQuantity(Duration.builder(), "valueDuration", reader, -1));
                    break;
                case "valueHumanName":
                    builder.value(parseHumanName("valueHumanName", reader, -1));
                    break;
                case "valueIdentifier":
                    builder.value(parseIdentifier("valueIdentifier", reader, -1));
                    break;
                case "valueMoney":
                    builder.value(parseMoney("valueMoney", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueSignature":
                    builder.value(parseSignature("valueSignature", reader, -1));
                    break;
                case "valueTiming":
                    builder.value(parseTiming("valueTiming", reader, -1));
                    break;
                case "valueContactDetail":
                    builder.value(parseContactDetail("valueContactDetail", reader, -1));
                    break;
                case "valueContributor":
                    builder.value(parseContributor("valueContributor", reader, -1));
                    break;
                case "valueDataRequirement":
                    builder.value(parseDataRequirement("valueDataRequirement", reader, -1));
                    break;
                case "valueExpression":
                    builder.value(parseExpression("valueExpression", reader, -1));
                    break;
                case "valueParameterDefinition":
                    builder.value(parseParameterDefinition("valueParameterDefinition", reader, -1));
                    break;
                case "valueRelatedArtifact":
                    builder.value(parseRelatedArtifact("valueRelatedArtifact", reader, -1));
                    break;
                case "valueTriggerDefinition":
                    builder.value(parseTriggerDefinition("valueTriggerDefinition", reader, -1));
                    break;
                case "valueUsageContext":
                    builder.value(parseUsageContext("valueUsageContext", reader, -1));
                    break;
                case "valueDosage":
                    builder.value(parseDosage("valueDosage", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Task.Output parseTaskOutput(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Task.Output.Builder builder = Task.Output.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, -1));
                    break;
                case "valueBase64Binary":
                    builder.value(parseBase64Binary("valueBase64Binary", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueCanonical":
                    builder.value((Canonical) parseUri(Canonical.builder(), "valueCanonical", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueDate":
                    builder.value(parseDate("valueDate", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueId":
                    builder.value((Id) parseString(Id.builder(), "valueId", reader, -1));
                    break;
                case "valueInstant":
                    builder.value(parseInstant("valueInstant", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueMarkdown":
                    builder.value((Markdown) parseString(Markdown.builder(), "valueMarkdown", reader, -1));
                    break;
                case "valueOid":
                    builder.value((Oid) parseUri(Oid.builder(), "valueOid", reader, -1));
                    break;
                case "valuePositiveInt":
                    builder.value((PositiveInt) parseInteger(PositiveInt.builder(), "valuePositiveInt", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueTime":
                    builder.value(parseTime("valueTime", reader, -1));
                    break;
                case "valueUnsignedInt":
                    builder.value((UnsignedInt) parseInteger(UnsignedInt.builder(), "valueUnsignedInt", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueUrl":
                    builder.value((Url) parseUri(Url.builder(), "valueUrl", reader, -1));
                    break;
                case "valueUuid":
                    builder.value((Uuid) parseUri(Uuid.builder(), "valueUuid", reader, -1));
                    break;
                case "valueAddress":
                    builder.value(parseAddress("valueAddress", reader, -1));
                    break;
                case "valueAge":
                    builder.value((Age) parseQuantity(Age.builder(), "valueAge", reader, -1));
                    break;
                case "valueAnnotation":
                    builder.value(parseAnnotation("valueAnnotation", reader, -1));
                    break;
                case "valueAttachment":
                    builder.value(parseAttachment("valueAttachment", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueCoding":
                    builder.value(parseCoding("valueCoding", reader, -1));
                    break;
                case "valueContactPoint":
                    builder.value(parseContactPoint("valueContactPoint", reader, -1));
                    break;
                case "valueCount":
                    builder.value((Count) parseQuantity(Count.builder(), "valueCount", reader, -1));
                    break;
                case "valueDistance":
                    builder.value((Distance) parseQuantity(Distance.builder(), "valueDistance", reader, -1));
                    break;
                case "valueDuration":
                    builder.value((Duration) parseQuantity(Duration.builder(), "valueDuration", reader, -1));
                    break;
                case "valueHumanName":
                    builder.value(parseHumanName("valueHumanName", reader, -1));
                    break;
                case "valueIdentifier":
                    builder.value(parseIdentifier("valueIdentifier", reader, -1));
                    break;
                case "valueMoney":
                    builder.value(parseMoney("valueMoney", reader, -1));
                    break;
                case "valuePeriod":
                    builder.value(parsePeriod("valuePeriod", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueRatio":
                    builder.value(parseRatio("valueRatio", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                case "valueSampledData":
                    builder.value(parseSampledData("valueSampledData", reader, -1));
                    break;
                case "valueSignature":
                    builder.value(parseSignature("valueSignature", reader, -1));
                    break;
                case "valueTiming":
                    builder.value(parseTiming("valueTiming", reader, -1));
                    break;
                case "valueContactDetail":
                    builder.value(parseContactDetail("valueContactDetail", reader, -1));
                    break;
                case "valueContributor":
                    builder.value(parseContributor("valueContributor", reader, -1));
                    break;
                case "valueDataRequirement":
                    builder.value(parseDataRequirement("valueDataRequirement", reader, -1));
                    break;
                case "valueExpression":
                    builder.value(parseExpression("valueExpression", reader, -1));
                    break;
                case "valueParameterDefinition":
                    builder.value(parseParameterDefinition("valueParameterDefinition", reader, -1));
                    break;
                case "valueRelatedArtifact":
                    builder.value(parseRelatedArtifact("valueRelatedArtifact", reader, -1));
                    break;
                case "valueTriggerDefinition":
                    builder.value(parseTriggerDefinition("valueTriggerDefinition", reader, -1));
                    break;
                case "valueUsageContext":
                    builder.value(parseUsageContext("valueUsageContext", reader, -1));
                    break;
                case "valueDosage":
                    builder.value(parseDosage("valueDosage", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Task.Restriction parseTaskRestriction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Task.Restriction.Builder builder = Task.Restriction.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, recipientElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "repetitions":
                    builder.repetitions((PositiveInt) parseInteger(PositiveInt.builder(), "repetitions", reader, -1));
                    break;
                case "period":
                    builder.period(parsePeriod("period", reader, -1));
                    break;
                case "recipient":
                    builder.recipient(parseReference("recipient", reader, recipientElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities parseTerminologyCapabilities(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Builder builder = TerminologyCapabilities.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, codeSystemElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "kind":
                    builder.kind((CapabilityStatementKind) parseString(CapabilityStatementKind.builder(), "kind", reader, -1));
                    break;
                case "software":
                    builder.software(parseTerminologyCapabilitiesSoftware("software", reader, -1));
                    break;
                case "implementation":
                    builder.implementation(parseTerminologyCapabilitiesImplementation("implementation", reader, -1));
                    break;
                case "lockedDate":
                    builder.lockedDate(parseBoolean("lockedDate", reader, -1));
                    break;
                case "codeSystem":
                    builder.codeSystem(parseTerminologyCapabilitiesCodeSystem("codeSystem", reader, codeSystemElementIndex++));
                    break;
                case "expansion":
                    builder.expansion(parseTerminologyCapabilitiesExpansion("expansion", reader, -1));
                    break;
                case "codeSearch":
                    builder.codeSearch((CodeSearchSupport) parseString(CodeSearchSupport.builder(), "codeSearch", reader, -1));
                    break;
                case "validateCode":
                    builder.validateCode(parseTerminologyCapabilitiesValidateCode("validateCode", reader, -1));
                    break;
                case "translation":
                    builder.translation(parseTerminologyCapabilitiesTranslation("translation", reader, -1));
                    break;
                case "closure":
                    builder.closure(parseTerminologyCapabilitiesClosure("closure", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.Closure parseTerminologyCapabilitiesClosure(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Closure.Builder builder = TerminologyCapabilities.Closure.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "translation":
                    builder.translation(parseBoolean("translation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.CodeSystem parseTerminologyCapabilitiesCodeSystem(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.CodeSystem.Builder builder = TerminologyCapabilities.CodeSystem.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, versionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "uri":
                    builder.uri((Canonical) parseUri(Canonical.builder(), "uri", reader, -1));
                    break;
                case "version":
                    builder.version(parseTerminologyCapabilitiesCodeSystemVersion("version", reader, versionElementIndex++));
                    break;
                case "subsumption":
                    builder.subsumption(parseBoolean("subsumption", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.CodeSystem.Version parseTerminologyCapabilitiesCodeSystemVersion(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.CodeSystem.Version.Builder builder = TerminologyCapabilities.CodeSystem.Version.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, languageElementIndex = 0, filterElementIndex = 0, propertyElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseString("code", reader, -1));
                    break;
                case "isDefault":
                    builder.isDefault(parseBoolean("isDefault", reader, -1));
                    break;
                case "compositional":
                    builder.compositional(parseBoolean("compositional", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, languageElementIndex++));
                    break;
                case "filter":
                    builder.filter(parseTerminologyCapabilitiesCodeSystemVersionFilter("filter", reader, filterElementIndex++));
                    break;
                case "property":
                    builder.property((Code) parseString(Code.builder(), "property", reader, propertyElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.CodeSystem.Version.Filter parseTerminologyCapabilitiesCodeSystemVersionFilter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.CodeSystem.Version.Filter.Builder builder = TerminologyCapabilities.CodeSystem.Version.Filter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, opElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "op":
                    builder.op((Code) parseString(Code.builder(), "op", reader, opElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.Expansion parseTerminologyCapabilitiesExpansion(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Expansion.Builder builder = TerminologyCapabilities.Expansion.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, parameterElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "hierarchical":
                    builder.hierarchical(parseBoolean("hierarchical", reader, -1));
                    break;
                case "paging":
                    builder.paging(parseBoolean("paging", reader, -1));
                    break;
                case "incomplete":
                    builder.incomplete(parseBoolean("incomplete", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseTerminologyCapabilitiesExpansionParameter("parameter", reader, parameterElementIndex++));
                    break;
                case "textFilter":
                    builder.textFilter((Markdown) parseString(Markdown.builder(), "textFilter", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.Expansion.Parameter parseTerminologyCapabilitiesExpansionParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Expansion.Parameter.Builder builder = TerminologyCapabilities.Expansion.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name((Code) parseString(Code.builder(), "name", reader, -1));
                    break;
                case "documentation":
                    builder.documentation(parseString("documentation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.Implementation parseTerminologyCapabilitiesImplementation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Implementation.Builder builder = TerminologyCapabilities.Implementation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "url":
                    builder.url((Url) parseUri(Url.builder(), "url", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.Software parseTerminologyCapabilitiesSoftware(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Software.Builder builder = TerminologyCapabilities.Software.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.Translation parseTerminologyCapabilitiesTranslation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.Translation.Builder builder = TerminologyCapabilities.Translation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "needsMap":
                    builder.needsMap(parseBoolean("needsMap", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TerminologyCapabilities.ValidateCode parseTerminologyCapabilitiesValidateCode(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TerminologyCapabilities.ValidateCode.Builder builder = TerminologyCapabilities.ValidateCode.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "translations":
                    builder.translations(parseBoolean("translations", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport parseTestReport(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Builder builder = TestReport.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, participantElementIndex = 0, testElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "status":
                    builder.status((TestReportStatus) parseString(TestReportStatus.builder(), "status", reader, -1));
                    break;
                case "testScript":
                    builder.testScript(parseReference("testScript", reader, -1));
                    break;
                case "result":
                    builder.result((TestReportResult) parseString(TestReportResult.builder(), "result", reader, -1));
                    break;
                case "score":
                    builder.score(parseDecimal("score", reader, -1));
                    break;
                case "tester":
                    builder.tester(parseString("tester", reader, -1));
                    break;
                case "issued":
                    builder.issued(parseDateTime("issued", reader, -1));
                    break;
                case "participant":
                    builder.participant(parseTestReportParticipant("participant", reader, participantElementIndex++));
                    break;
                case "setup":
                    builder.setup(parseTestReportSetup("setup", reader, -1));
                    break;
                case "test":
                    builder.test(parseTestReportTest("test", reader, testElementIndex++));
                    break;
                case "teardown":
                    builder.teardown(parseTestReportTeardown("teardown", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Participant parseTestReportParticipant(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Participant.Builder builder = TestReport.Participant.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type((TestReportParticipantType) parseString(TestReportParticipantType.builder(), "type", reader, -1));
                    break;
                case "uri":
                    builder.uri(parseUri("uri", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Setup parseTestReportSetup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Setup.Builder builder = TestReport.Setup.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "action":
                    builder.action(parseTestReportSetupAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Setup.Action parseTestReportSetupAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Setup.Action.Builder builder = TestReport.Setup.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseTestReportSetupActionOperation("operation", reader, -1));
                    break;
                case "assert":
                    builder._assert(parseTestReportSetupActionAssert("assert", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Setup.Action.Assert parseTestReportSetupActionAssert(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Setup.Action.Assert.Builder builder = TestReport.Setup.Action.Assert.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "result":
                    builder.result((TestReportActionResult) parseString(TestReportActionResult.builder(), "result", reader, -1));
                    break;
                case "message":
                    builder.message((Markdown) parseString(Markdown.builder(), "message", reader, -1));
                    break;
                case "detail":
                    builder.detail(parseString("detail", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Setup.Action.Operation parseTestReportSetupActionOperation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Setup.Action.Operation.Builder builder = TestReport.Setup.Action.Operation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "result":
                    builder.result((TestReportActionResult) parseString(TestReportActionResult.builder(), "result", reader, -1));
                    break;
                case "message":
                    builder.message((Markdown) parseString(Markdown.builder(), "message", reader, -1));
                    break;
                case "detail":
                    builder.detail(parseUri("detail", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Teardown parseTestReportTeardown(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Teardown.Builder builder = TestReport.Teardown.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "action":
                    builder.action(parseTestReportTeardownAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Teardown.Action parseTestReportTeardownAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Teardown.Action.Builder builder = TestReport.Teardown.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseTestReportSetupActionOperation("operation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Test parseTestReportTest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Test.Builder builder = TestReport.Test.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "action":
                    builder.action(parseTestReportTestAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestReport.Test.Action parseTestReportTestAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestReport.Test.Action.Builder builder = TestReport.Test.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseTestReportSetupActionOperation("operation", reader, -1));
                    break;
                case "assert":
                    builder._assert(parseTestReportSetupActionAssert("assert", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript parseTestScript(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Builder builder = TestScript.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0, originElementIndex = 0, destinationElementIndex = 0, fixtureElementIndex = 0, profileElementIndex = 0, variableElementIndex = 0, testElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "origin":
                    builder.origin(parseTestScriptOrigin("origin", reader, originElementIndex++));
                    break;
                case "destination":
                    builder.destination(parseTestScriptDestination("destination", reader, destinationElementIndex++));
                    break;
                case "metadata":
                    builder.metadata(parseTestScriptMetadata("metadata", reader, -1));
                    break;
                case "fixture":
                    builder.fixture(parseTestScriptFixture("fixture", reader, fixtureElementIndex++));
                    break;
                case "profile":
                    builder.profile(parseReference("profile", reader, profileElementIndex++));
                    break;
                case "variable":
                    builder.variable(parseTestScriptVariable("variable", reader, variableElementIndex++));
                    break;
                case "setup":
                    builder.setup(parseTestScriptSetup("setup", reader, -1));
                    break;
                case "test":
                    builder.test(parseTestScriptTest("test", reader, testElementIndex++));
                    break;
                case "teardown":
                    builder.teardown(parseTestScriptTeardown("teardown", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Destination parseTestScriptDestination(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Destination.Builder builder = TestScript.Destination.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "index":
                    builder.index(parseInteger("index", reader, -1));
                    break;
                case "profile":
                    builder.profile(parseCoding("profile", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Fixture parseTestScriptFixture(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Fixture.Builder builder = TestScript.Fixture.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "autocreate":
                    builder.autocreate(parseBoolean("autocreate", reader, -1));
                    break;
                case "autodelete":
                    builder.autodelete(parseBoolean("autodelete", reader, -1));
                    break;
                case "resource":
                    builder.resource(parseReference("resource", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Metadata parseTestScriptMetadata(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Metadata.Builder builder = TestScript.Metadata.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, linkElementIndex = 0, capabilityElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "link":
                    builder.link(parseTestScriptMetadataLink("link", reader, linkElementIndex++));
                    break;
                case "capability":
                    builder.capability(parseTestScriptMetadataCapability("capability", reader, capabilityElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Metadata.Capability parseTestScriptMetadataCapability(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Metadata.Capability.Builder builder = TestScript.Metadata.Capability.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, originElementIndex = 0, linkElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "required":
                    builder.required(parseBoolean("required", reader, -1));
                    break;
                case "validated":
                    builder.validated(parseBoolean("validated", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "origin":
                    builder.origin(parseInteger("origin", reader, originElementIndex++));
                    break;
                case "destination":
                    builder.destination(parseInteger("destination", reader, -1));
                    break;
                case "link":
                    builder.link(parseUri("link", reader, linkElementIndex++));
                    break;
                case "capabilities":
                    builder.capabilities((Canonical) parseUri(Canonical.builder(), "capabilities", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Metadata.Link parseTestScriptMetadataLink(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Metadata.Link.Builder builder = TestScript.Metadata.Link.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Origin parseTestScriptOrigin(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Origin.Builder builder = TestScript.Origin.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "index":
                    builder.index(parseInteger("index", reader, -1));
                    break;
                case "profile":
                    builder.profile(parseCoding("profile", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Setup parseTestScriptSetup(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Setup.Builder builder = TestScript.Setup.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "action":
                    builder.action(parseTestScriptSetupAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Setup.Action parseTestScriptSetupAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Setup.Action.Builder builder = TestScript.Setup.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseTestScriptSetupActionOperation("operation", reader, -1));
                    break;
                case "assert":
                    builder._assert(parseTestScriptSetupActionAssert("assert", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Setup.Action.Assert parseTestScriptSetupActionAssert(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Setup.Action.Assert.Builder builder = TestScript.Setup.Action.Assert.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "label":
                    builder.label(parseString("label", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "direction":
                    builder.direction((AssertionDirectionType) parseString(AssertionDirectionType.builder(), "direction", reader, -1));
                    break;
                case "compareToSourceId":
                    builder.compareToSourceId(parseString("compareToSourceId", reader, -1));
                    break;
                case "compareToSourceExpression":
                    builder.compareToSourceExpression(parseString("compareToSourceExpression", reader, -1));
                    break;
                case "compareToSourcePath":
                    builder.compareToSourcePath(parseString("compareToSourcePath", reader, -1));
                    break;
                case "contentType":
                    builder.contentType((Code) parseString(Code.builder(), "contentType", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                case "headerField":
                    builder.headerField(parseString("headerField", reader, -1));
                    break;
                case "minimumId":
                    builder.minimumId(parseString("minimumId", reader, -1));
                    break;
                case "navigationLinks":
                    builder.navigationLinks(parseBoolean("navigationLinks", reader, -1));
                    break;
                case "operator":
                    builder.operator((AssertionOperatorType) parseString(AssertionOperatorType.builder(), "operator", reader, -1));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "requestMethod":
                    builder.requestMethod((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "requestMethod", reader, -1));
                    break;
                case "requestURL":
                    builder.requestURL(parseString("requestURL", reader, -1));
                    break;
                case "resource":
                    builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", reader, -1));
                    break;
                case "response":
                    builder.response((AssertionResponseTypes) parseString(AssertionResponseTypes.builder(), "response", reader, -1));
                    break;
                case "responseCode":
                    builder.responseCode(parseString("responseCode", reader, -1));
                    break;
                case "sourceId":
                    builder.sourceId((Id) parseString(Id.builder(), "sourceId", reader, -1));
                    break;
                case "validateProfileId":
                    builder.validateProfileId((Id) parseString(Id.builder(), "validateProfileId", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                case "warningOnly":
                    builder.warningOnly(parseBoolean("warningOnly", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Setup.Action.Operation parseTestScriptSetupActionOperation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Setup.Action.Operation.Builder builder = TestScript.Setup.Action.Operation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, requestHeaderElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "type":
                    builder.type(parseCoding("type", reader, -1));
                    break;
                case "resource":
                    builder.resource((FHIRDefinedType) parseString(FHIRDefinedType.builder(), "resource", reader, -1));
                    break;
                case "label":
                    builder.label(parseString("label", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "accept":
                    builder.accept((Code) parseString(Code.builder(), "accept", reader, -1));
                    break;
                case "contentType":
                    builder.contentType((Code) parseString(Code.builder(), "contentType", reader, -1));
                    break;
                case "destination":
                    builder.destination(parseInteger("destination", reader, -1));
                    break;
                case "encodeRequestUrl":
                    builder.encodeRequestUrl(parseBoolean("encodeRequestUrl", reader, -1));
                    break;
                case "method":
                    builder.method((TestScriptRequestMethodCode) parseString(TestScriptRequestMethodCode.builder(), "method", reader, -1));
                    break;
                case "origin":
                    builder.origin(parseInteger("origin", reader, -1));
                    break;
                case "params":
                    builder.params(parseString("params", reader, -1));
                    break;
                case "requestHeader":
                    builder.requestHeader(parseTestScriptSetupActionOperationRequestHeader("requestHeader", reader, requestHeaderElementIndex++));
                    break;
                case "requestId":
                    builder.requestId((Id) parseString(Id.builder(), "requestId", reader, -1));
                    break;
                case "responseId":
                    builder.responseId((Id) parseString(Id.builder(), "responseId", reader, -1));
                    break;
                case "sourceId":
                    builder.sourceId((Id) parseString(Id.builder(), "sourceId", reader, -1));
                    break;
                case "targetId":
                    builder.targetId((Id) parseString(Id.builder(), "targetId", reader, -1));
                    break;
                case "url":
                    builder.url(parseString("url", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Setup.Action.Operation.RequestHeader parseTestScriptSetupActionOperationRequestHeader(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Setup.Action.Operation.RequestHeader.Builder builder = TestScript.Setup.Action.Operation.RequestHeader.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "field":
                    builder.field(parseString("field", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Teardown parseTestScriptTeardown(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Teardown.Builder builder = TestScript.Teardown.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "action":
                    builder.action(parseTestScriptTeardownAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Teardown.Action parseTestScriptTeardownAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Teardown.Action.Builder builder = TestScript.Teardown.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseTestScriptSetupActionOperation("operation", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Test parseTestScriptTest(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Test.Builder builder = TestScript.Test.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, actionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "action":
                    builder.action(parseTestScriptTestAction("action", reader, actionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Test.Action parseTestScriptTestAction(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Test.Action.Builder builder = TestScript.Test.Action.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "operation":
                    builder.operation(parseTestScriptSetupActionOperation("operation", reader, -1));
                    break;
                case "assert":
                    builder._assert(parseTestScriptSetupActionAssert("assert", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TestScript.Variable parseTestScriptVariable(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TestScript.Variable.Builder builder = TestScript.Variable.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "defaultValue":
                    builder.defaultValue(parseString("defaultValue", reader, -1));
                    break;
                case "description":
                    builder.description(parseString("description", reader, -1));
                    break;
                case "expression":
                    builder.expression(parseString("expression", reader, -1));
                    break;
                case "headerField":
                    builder.headerField(parseString("headerField", reader, -1));
                    break;
                case "hint":
                    builder.hint(parseString("hint", reader, -1));
                    break;
                case "path":
                    builder.path(parseString("path", reader, -1));
                    break;
                case "sourceId":
                    builder.sourceId((Id) parseString(Id.builder(), "sourceId", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Time parseTime(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Time.Builder builder = Time.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Timing parseTiming(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Timing.Builder builder = Timing.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, eventElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "event":
                    builder.event(parseDateTime("event", reader, eventElementIndex++));
                    break;
                case "repeat":
                    builder.repeat(parseTimingRepeat("repeat", reader, -1));
                    break;
                case "code":
                    builder.code(parseCodeableConcept("code", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Timing.Repeat parseTimingRepeat(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        Timing.Repeat.Builder builder = Timing.Repeat.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, dayOfWeekElementIndex = 0, timeOfDayElementIndex = 0, whenElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "boundsDuration":
                    builder.bounds((Duration) parseQuantity(Duration.builder(), "boundsDuration", reader, -1));
                    break;
                case "boundsRange":
                    builder.bounds(parseRange("boundsRange", reader, -1));
                    break;
                case "boundsPeriod":
                    builder.bounds(parsePeriod("boundsPeriod", reader, -1));
                    break;
                case "count":
                    builder.count((PositiveInt) parseInteger(PositiveInt.builder(), "count", reader, -1));
                    break;
                case "countMax":
                    builder.countMax((PositiveInt) parseInteger(PositiveInt.builder(), "countMax", reader, -1));
                    break;
                case "duration":
                    builder.duration(parseDecimal("duration", reader, -1));
                    break;
                case "durationMax":
                    builder.durationMax(parseDecimal("durationMax", reader, -1));
                    break;
                case "durationUnit":
                    builder.durationUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "durationUnit", reader, -1));
                    break;
                case "frequency":
                    builder.frequency((PositiveInt) parseInteger(PositiveInt.builder(), "frequency", reader, -1));
                    break;
                case "frequencyMax":
                    builder.frequencyMax((PositiveInt) parseInteger(PositiveInt.builder(), "frequencyMax", reader, -1));
                    break;
                case "period":
                    builder.period(parseDecimal("period", reader, -1));
                    break;
                case "periodMax":
                    builder.periodMax(parseDecimal("periodMax", reader, -1));
                    break;
                case "periodUnit":
                    builder.periodUnit((UnitsOfTime) parseString(UnitsOfTime.builder(), "periodUnit", reader, -1));
                    break;
                case "dayOfWeek":
                    builder.dayOfWeek((DayOfWeek) parseString(DayOfWeek.builder(), "dayOfWeek", reader, dayOfWeekElementIndex++));
                    break;
                case "timeOfDay":
                    builder.timeOfDay(parseTime("timeOfDay", reader, timeOfDayElementIndex++));
                    break;
                case "when":
                    builder.when((EventTiming) parseString(EventTiming.builder(), "when", reader, whenElementIndex++));
                    break;
                case "offset":
                    builder.offset((UnsignedInt) parseInteger(UnsignedInt.builder(), "offset", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private TriggerDefinition parseTriggerDefinition(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        TriggerDefinition.Builder builder = TriggerDefinition.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, dataElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "type":
                    builder.type((TriggerType) parseString(TriggerType.builder(), "type", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "timingTiming":
                    builder.timing(parseTiming("timingTiming", reader, -1));
                    break;
                case "timingReference":
                    builder.timing(parseReference("timingReference", reader, -1));
                    break;
                case "timingDate":
                    builder.timing(parseDate("timingDate", reader, -1));
                    break;
                case "timingDateTime":
                    builder.timing(parseDateTime("timingDateTime", reader, -1));
                    break;
                case "data":
                    builder.data(parseDataRequirement("data", reader, dataElementIndex++));
                    break;
                case "condition":
                    builder.condition(parseExpression("condition", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Uri parseUri(Uri.Builder builder, java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        java.lang.String value = reader.getAttributeValue(null, "value");
        if (value != null) {
            builder.value(value);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private Uri parseUri(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        return parseUri(Uri.builder(), elementName, reader, elementIndex);
    }

    private UsageContext parseUsageContext(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        UsageContext.Builder builder = UsageContext.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "code":
                    builder.code(parseCoding("code", reader, -1));
                    break;
                case "valueCodeableConcept":
                    builder.value(parseCodeableConcept("valueCodeableConcept", reader, -1));
                    break;
                case "valueQuantity":
                    builder.value(parseQuantity("valueQuantity", reader, -1));
                    break;
                case "valueRange":
                    builder.value(parseRange("valueRange", reader, -1));
                    break;
                case "valueReference":
                    builder.value(parseReference("valueReference", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet parseValueSet(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Builder builder = ValueSet.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, contactElementIndex = 0, useContextElementIndex = 0, jurisdictionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "url":
                    builder.url(parseUri("url", reader, -1));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "title":
                    builder.title(parseString("title", reader, -1));
                    break;
                case "status":
                    builder.status((PublicationStatus) parseString(PublicationStatus.builder(), "status", reader, -1));
                    break;
                case "experimental":
                    builder.experimental(parseBoolean("experimental", reader, -1));
                    break;
                case "date":
                    builder.date(parseDateTime("date", reader, -1));
                    break;
                case "publisher":
                    builder.publisher(parseString("publisher", reader, -1));
                    break;
                case "contact":
                    builder.contact(parseContactDetail("contact", reader, contactElementIndex++));
                    break;
                case "description":
                    builder.description((Markdown) parseString(Markdown.builder(), "description", reader, -1));
                    break;
                case "useContext":
                    builder.useContext(parseUsageContext("useContext", reader, useContextElementIndex++));
                    break;
                case "jurisdiction":
                    builder.jurisdiction(parseCodeableConcept("jurisdiction", reader, jurisdictionElementIndex++));
                    break;
                case "immutable":
                    builder.immutable(parseBoolean("immutable", reader, -1));
                    break;
                case "purpose":
                    builder.purpose((Markdown) parseString(Markdown.builder(), "purpose", reader, -1));
                    break;
                case "copyright":
                    builder.copyright((Markdown) parseString(Markdown.builder(), "copyright", reader, -1));
                    break;
                case "compose":
                    builder.compose(parseValueSetCompose("compose", reader, -1));
                    break;
                case "expansion":
                    builder.expansion(parseValueSetExpansion("expansion", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Compose parseValueSetCompose(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Compose.Builder builder = ValueSet.Compose.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, includeElementIndex = 0, excludeElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "lockedDate":
                    builder.lockedDate(parseDate("lockedDate", reader, -1));
                    break;
                case "inactive":
                    builder.inactive(parseBoolean("inactive", reader, -1));
                    break;
                case "include":
                    builder.include(parseValueSetComposeInclude("include", reader, includeElementIndex++));
                    break;
                case "exclude":
                    builder.exclude(parseValueSetComposeInclude("exclude", reader, excludeElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Compose.Include parseValueSetComposeInclude(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Compose.Include.Builder builder = ValueSet.Compose.Include.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, conceptElementIndex = 0, filterElementIndex = 0, valueSetElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "system":
                    builder.system(parseUri("system", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "concept":
                    builder.concept(parseValueSetComposeIncludeConcept("concept", reader, conceptElementIndex++));
                    break;
                case "filter":
                    builder.filter(parseValueSetComposeIncludeFilter("filter", reader, filterElementIndex++));
                    break;
                case "valueSet":
                    builder.valueSet((Canonical) parseUri(Canonical.builder(), "valueSet", reader, valueSetElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Compose.Include.Concept parseValueSetComposeIncludeConcept(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Compose.Include.Concept.Builder builder = ValueSet.Compose.Include.Concept.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, designationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "designation":
                    builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", reader, designationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Compose.Include.Concept.Designation parseValueSetComposeIncludeConceptDesignation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Compose.Include.Concept.Designation.Builder builder = ValueSet.Compose.Include.Concept.Designation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "use":
                    builder.use(parseCoding("use", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Compose.Include.Filter parseValueSetComposeIncludeFilter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Compose.Include.Filter.Builder builder = ValueSet.Compose.Include.Filter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "property":
                    builder.property((Code) parseString(Code.builder(), "property", reader, -1));
                    break;
                case "op":
                    builder.op((FilterOperator) parseString(FilterOperator.builder(), "op", reader, -1));
                    break;
                case "value":
                    builder.value(parseString("value", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Expansion parseValueSetExpansion(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Expansion.Builder builder = ValueSet.Expansion.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, parameterElementIndex = 0, containsElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseUri("identifier", reader, -1));
                    break;
                case "timestamp":
                    builder.timestamp(parseDateTime("timestamp", reader, -1));
                    break;
                case "total":
                    builder.total(parseInteger("total", reader, -1));
                    break;
                case "offset":
                    builder.offset(parseInteger("offset", reader, -1));
                    break;
                case "parameter":
                    builder.parameter(parseValueSetExpansionParameter("parameter", reader, parameterElementIndex++));
                    break;
                case "contains":
                    builder.contains(parseValueSetExpansionContains("contains", reader, containsElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Expansion.Contains parseValueSetExpansionContains(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Expansion.Contains.Builder builder = ValueSet.Expansion.Contains.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, designationElementIndex = 0, containsElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "system":
                    builder.system(parseUri("system", reader, -1));
                    break;
                case "abstract":
                    builder._abstract(parseBoolean("abstract", reader, -1));
                    break;
                case "inactive":
                    builder.inactive(parseBoolean("inactive", reader, -1));
                    break;
                case "version":
                    builder.version(parseString("version", reader, -1));
                    break;
                case "code":
                    builder.code((Code) parseString(Code.builder(), "code", reader, -1));
                    break;
                case "display":
                    builder.display(parseString("display", reader, -1));
                    break;
                case "designation":
                    builder.designation(parseValueSetComposeIncludeConceptDesignation("designation", reader, designationElementIndex++));
                    break;
                case "contains":
                    builder.contains(parseValueSetExpansionContains("contains", reader, containsElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private ValueSet.Expansion.Parameter parseValueSetExpansionParameter(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        ValueSet.Expansion.Parameter.Builder builder = ValueSet.Expansion.Parameter.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "name":
                    builder.name(parseString("name", reader, -1));
                    break;
                case "valueString":
                    builder.value(parseString("valueString", reader, -1));
                    break;
                case "valueBoolean":
                    builder.value(parseBoolean("valueBoolean", reader, -1));
                    break;
                case "valueInteger":
                    builder.value(parseInteger("valueInteger", reader, -1));
                    break;
                case "valueDecimal":
                    builder.value(parseDecimal("valueDecimal", reader, -1));
                    break;
                case "valueUri":
                    builder.value(parseUri("valueUri", reader, -1));
                    break;
                case "valueCode":
                    builder.value((Code) parseString(Code.builder(), "valueCode", reader, -1));
                    break;
                case "valueDateTime":
                    builder.value(parseDateTime("valueDateTime", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VerificationResult parseVerificationResult(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VerificationResult.Builder builder = VerificationResult.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, targetElementIndex = 0, targetLocationElementIndex = 0, validationProcessElementIndex = 0, primarySourceElementIndex = 0, validatorElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "target":
                    builder.target(parseReference("target", reader, targetElementIndex++));
                    break;
                case "targetLocation":
                    builder.targetLocation(parseString("targetLocation", reader, targetLocationElementIndex++));
                    break;
                case "need":
                    builder.need(parseCodeableConcept("need", reader, -1));
                    break;
                case "status":
                    builder.status((Status) parseString(Status.builder(), "status", reader, -1));
                    break;
                case "statusDate":
                    builder.statusDate(parseDateTime("statusDate", reader, -1));
                    break;
                case "validationType":
                    builder.validationType(parseCodeableConcept("validationType", reader, -1));
                    break;
                case "validationProcess":
                    builder.validationProcess(parseCodeableConcept("validationProcess", reader, validationProcessElementIndex++));
                    break;
                case "frequency":
                    builder.frequency(parseTiming("frequency", reader, -1));
                    break;
                case "lastPerformed":
                    builder.lastPerformed(parseDateTime("lastPerformed", reader, -1));
                    break;
                case "nextScheduled":
                    builder.nextScheduled(parseDate("nextScheduled", reader, -1));
                    break;
                case "failureAction":
                    builder.failureAction(parseCodeableConcept("failureAction", reader, -1));
                    break;
                case "primarySource":
                    builder.primarySource(parseVerificationResultPrimarySource("primarySource", reader, primarySourceElementIndex++));
                    break;
                case "attestation":
                    builder.attestation(parseVerificationResultAttestation("attestation", reader, -1));
                    break;
                case "validator":
                    builder.validator(parseVerificationResultValidator("validator", reader, validatorElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VerificationResult.Attestation parseVerificationResultAttestation(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VerificationResult.Attestation.Builder builder = VerificationResult.Attestation.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "who":
                    builder.who(parseReference("who", reader, -1));
                    break;
                case "onBehalfOf":
                    builder.onBehalfOf(parseReference("onBehalfOf", reader, -1));
                    break;
                case "communicationMethod":
                    builder.communicationMethod(parseCodeableConcept("communicationMethod", reader, -1));
                    break;
                case "date":
                    builder.date(parseDate("date", reader, -1));
                    break;
                case "sourceIdentityCertificate":
                    builder.sourceIdentityCertificate(parseString("sourceIdentityCertificate", reader, -1));
                    break;
                case "proxyIdentityCertificate":
                    builder.proxyIdentityCertificate(parseString("proxyIdentityCertificate", reader, -1));
                    break;
                case "proxySignature":
                    builder.proxySignature(parseSignature("proxySignature", reader, -1));
                    break;
                case "sourceSignature":
                    builder.sourceSignature(parseSignature("sourceSignature", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VerificationResult.PrimarySource parseVerificationResultPrimarySource(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VerificationResult.PrimarySource.Builder builder = VerificationResult.PrimarySource.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, typeElementIndex = 0, communicationMethodElementIndex = 0, pushTypeAvailableElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "who":
                    builder.who(parseReference("who", reader, -1));
                    break;
                case "type":
                    builder.type(parseCodeableConcept("type", reader, typeElementIndex++));
                    break;
                case "communicationMethod":
                    builder.communicationMethod(parseCodeableConcept("communicationMethod", reader, communicationMethodElementIndex++));
                    break;
                case "validationStatus":
                    builder.validationStatus(parseCodeableConcept("validationStatus", reader, -1));
                    break;
                case "validationDate":
                    builder.validationDate(parseDateTime("validationDate", reader, -1));
                    break;
                case "canPushUpdates":
                    builder.canPushUpdates(parseCodeableConcept("canPushUpdates", reader, -1));
                    break;
                case "pushTypeAvailable":
                    builder.pushTypeAvailable(parseCodeableConcept("pushTypeAvailable", reader, pushTypeAvailableElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VerificationResult.Validator parseVerificationResultValidator(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VerificationResult.Validator.Builder builder = VerificationResult.Validator.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "organization":
                    builder.organization(parseReference("organization", reader, -1));
                    break;
                case "identityCertificate":
                    builder.identityCertificate(parseString("identityCertificate", reader, -1));
                    break;
                case "attestationSignature":
                    builder.attestationSignature(parseSignature("attestationSignature", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VisionPrescription parseVisionPrescription(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VisionPrescription.Builder builder = VisionPrescription.builder();
        int containedElementIndex = 0, extensionElementIndex = 0, modifierExtensionElementIndex = 0, identifierElementIndex = 0, lensSpecificationElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "id":
                    builder.id((Id) parseString(Id.builder(), "id", reader, -1));
                    break;
                case "meta":
                    builder.meta(parseMeta("meta", reader, -1));
                    break;
                case "implicitRules":
                    builder.implicitRules(parseUri("implicitRules", reader, -1));
                    break;
                case "language":
                    builder.language((Code) parseString(Code.builder(), "language", reader, -1));
                    break;
                case "text":
                    builder.text(parseNarrative("text", reader, -1));
                    break;
                case "contained":
                    builder.contained(parseResource("contained", reader, containedElementIndex++));
                    break;
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "identifier":
                    builder.identifier(parseIdentifier("identifier", reader, identifierElementIndex++));
                    break;
                case "status":
                    builder.status((VisionStatus) parseString(VisionStatus.builder(), "status", reader, -1));
                    break;
                case "created":
                    builder.created(parseDateTime("created", reader, -1));
                    break;
                case "patient":
                    builder.patient(parseReference("patient", reader, -1));
                    break;
                case "encounter":
                    builder.encounter(parseReference("encounter", reader, -1));
                    break;
                case "dateWritten":
                    builder.dateWritten(parseDateTime("dateWritten", reader, -1));
                    break;
                case "prescriber":
                    builder.prescriber(parseReference("prescriber", reader, -1));
                    break;
                case "lensSpecification":
                    builder.lensSpecification(parseVisionPrescriptionLensSpecification("lensSpecification", reader, lensSpecificationElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VisionPrescription.LensSpecification parseVisionPrescriptionLensSpecification(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VisionPrescription.LensSpecification.Builder builder = VisionPrescription.LensSpecification.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0, prismElementIndex = 0, noteElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "product":
                    builder.product(parseCodeableConcept("product", reader, -1));
                    break;
                case "eye":
                    builder.eye((VisionEyes) parseString(VisionEyes.builder(), "eye", reader, -1));
                    break;
                case "sphere":
                    builder.sphere(parseDecimal("sphere", reader, -1));
                    break;
                case "cylinder":
                    builder.cylinder(parseDecimal("cylinder", reader, -1));
                    break;
                case "axis":
                    builder.axis(parseInteger("axis", reader, -1));
                    break;
                case "prism":
                    builder.prism(parseVisionPrescriptionLensSpecificationPrism("prism", reader, prismElementIndex++));
                    break;
                case "add":
                    builder.add(parseDecimal("add", reader, -1));
                    break;
                case "power":
                    builder.power(parseDecimal("power", reader, -1));
                    break;
                case "backCurve":
                    builder.backCurve(parseDecimal("backCurve", reader, -1));
                    break;
                case "diameter":
                    builder.diameter(parseDecimal("diameter", reader, -1));
                    break;
                case "duration":
                    builder.duration((SimpleQuantity) parseQuantity(SimpleQuantity.builder(), "duration", reader, -1));
                    break;
                case "color":
                    builder.color(parseString("color", reader, -1));
                    break;
                case "brand":
                    builder.brand(parseString("brand", reader, -1));
                    break;
                case "note":
                    builder.note(parseAnnotation("note", reader, noteElementIndex++));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private VisionPrescription.LensSpecification.Prism parseVisionPrescriptionLensSpecificationPrism(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        VisionPrescription.LensSpecification.Prism.Builder builder = VisionPrescription.LensSpecification.Prism.builder();
        java.lang.String id = reader.getAttributeValue(null, "id");
        if (id != null) {
            builder.id(id);
        }
        int extensionElementIndex = 0, modifierExtensionElementIndex = 0;
        while (reader.hasNext()) {
            int eventType = reader.next();
            switch (eventType) {
            case XMLStreamReader.START_ELEMENT:
                java.lang.String localName = reader.getLocalName();
                requireNamespace(reader, FHIR_NS_URI);
                switch (localName) {
                case "extension":
                    builder.extension(parseExtension("extension", reader, extensionElementIndex++));
                    break;
                case "modifierExtension":
                    builder.modifierExtension(parseExtension("modifierExtension", reader, modifierExtensionElementIndex++));
                    break;
                case "amount":
                    builder.amount(parseDecimal("amount", reader, -1));
                    break;
                case "base":
                    builder.base((VisionBase) parseString(VisionBase.builder(), "base", reader, -1));
                    break;
                default:
                    throw new IllegalArgumentException("Unrecognized element: '" + localName + "'");
                }
                break;
            case XMLStreamReader.END_ELEMENT:
                if (reader.getLocalName().equals(elementName)) {
                    stackPop();
                    return builder.build();
                }
                break;
            }
        }
        throw new XMLStreamException("Unexpected end of stream");
    }

    private void stackPush(java.lang.String elementName, int elementIndex) {
        if (elementIndex != -1) {
            stack.push(elementName + "[" + elementIndex + "]");
        } else {
            stack.push(elementName);
        }
        if (DEBUG) {
            System.out.println(getPath());
        }
    }

    private void stackPop() {
        stack.pop();
    }

    private java.lang.String getPath() {
        StringJoiner joiner = new StringJoiner(".");
        for (java.lang.String s : stack) {
            joiner.add(s);
        }
        return joiner.toString();
    }

    private java.lang.String parseJavaString(java.lang.String elementName, XMLStreamReader reader, int elementIndex) throws XMLStreamException {
        stackPush(elementName, elementIndex);
        java.lang.String javaString;
        if ("div".equals(elementName)) {
            javaString = parseDiv(reader);
        } else {
            javaString = reader.getAttributeValue(null, elementName);
        }
        stackPop();
        return javaString;
    }

    private java.lang.String getResourceType(XMLStreamReader reader) throws XMLStreamException {
        java.lang.String resourceType = reader.getLocalName();
        try {
            ResourceType.ValueSet.from(resourceType);
        } catch (IllegalArgumentException e) {
            throw new IllegalArgumentException("Invalid resource type: '" + resourceType + "'");
        }
        return resourceType;
    }
}
