/*
 * (C) Copyright IBM Corp. 2020
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package com.ibm.fhir.bucket.persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.ibm.fhir.database.utils.api.IDatabaseSupplier;
import com.ibm.fhir.database.utils.api.IDatabaseTranslator;

/**
 * DAO to encapsulate all the SQL/DML used to retrieve and persist data
 * in the schema
 */
public class AddResourceBundle implements IDatabaseSupplier<Long> {
    private static final Logger logger = Logger.getLogger(RegisterLoaderInstance.class.getName());

    // The name of the bucket
    private final long bucketId;

    // The name of the object (e.g. bundle file) within the bucket
    private final String objectName;
    
    private final long objectSize;
    
    /**
     * Public constructor
     * @param bucketId
     * @param objectName
     */
    public AddResourceBundle(long bucketId, String objectName, long objectSize) {
        this.bucketId = bucketId;
        this.objectName = objectName;
        this.objectSize = objectSize;
    }

    @Override
    public Long run(IDatabaseTranslator translator, Connection c) {
        Long resourceBundleId;

        // MERGE and upsert-like tricks don't appear to work with Derby
        // when using autogenerated identity columns. So we have to
        // try the old-fashioned way and handle duplicate key
        final String INS = "INSERT INTO resource_bundles (bucket_path_id, object_name, object_size) VALUES (?, ?, ?)";
        
        try (PreparedStatement ps = c.prepareStatement(INS, Statement.RETURN_GENERATED_KEYS)) {
            ps.setLong(1, bucketId);
            ps.setString(2, objectName);
            ps.setLong(3, objectSize);
            ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();
            if (rs != null && rs.next()) {
                resourceBundleId = rs.getLong(1);
            } else {
                // for completeness...but should never happen
                throw new IllegalStateException("id autogeneration failed");
            }
        } catch (SQLException x) {
            if (translator.isDuplicate(x)) {
                resourceBundleId = null; // select it later
            } else {
                // log this, but don't propagate values in the exception
                logger.log(Level.SEVERE, "Error registering bucket path: " + INS + "; "
                    + bucketId + ", " + objectName);
                throw translator.translate(x);
            }
        }
        
        // If we didn't create a new record, fetch the id of the existing record
        if (resourceBundleId == null) {
            final String SQL = "SELECT resource_bundle_id FROM resource_bundles WHERE bucket_path_id = ? AND object_name = ?";
            try (PreparedStatement ps = c.prepareStatement(SQL)) {
                ps.setLong(1, bucketId);
                ps.setString(2, objectName);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    resourceBundleId = rs.getLong(1);
                }
            } catch (SQLException x) {
                // log this, but don't propagate values in the exception
                logger.log(Level.SEVERE, "Error getting bucket path: " + SQL + "; "
                    + bucketId + ", " + objectName);
                throw translator.translate(x);
            }
        }
        
        return resourceBundleId;
    }
}