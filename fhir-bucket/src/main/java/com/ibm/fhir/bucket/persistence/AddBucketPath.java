/*
 * (C) Copyright IBM Corp. 2020
 *
 * SPDX-License-Identifier: Apache-2.0
 */

package com.ibm.fhir.bucket.persistence;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.ibm.fhir.database.utils.api.IDatabaseSupplier;
import com.ibm.fhir.database.utils.api.IDatabaseTranslator;

/**
 * DAO to encapsulate all the SQL/DML used to retrieve and persist data
 * in the schema
 */
public class AddBucketPath implements IDatabaseSupplier<Long> {
    private static final Logger logger = Logger.getLogger(RegisterLoaderInstance.class.getName());

    // The name of the bucket
    private final String bucketName;
    
    // The path in which the item resides...basically the key up and including the last /
    private final String bucketPath;

    /**
     * Public constructor
     * @param bucketName
     * @param bucketPath
     */
    public AddBucketPath(String bucketName, String bucketPath) {
        this.bucketName = bucketName;
        this.bucketPath = bucketPath;
    }

    @Override
    public Long run(IDatabaseTranslator translator, Connection c) {
        Long bucketPathId;

        // MERGE and upsert-like tricks don't appear to work with Derby
        // when using autogenerated identity columns. So we have to
        // try the old-fashioned way and handle duplicate key
        final String INS = "INSERT INTO bucket_paths (bucket_name, bucket_path) VALUES (?,?)";
        
        try (PreparedStatement ps = c.prepareStatement(INS, Statement.RETURN_GENERATED_KEYS)) {
            ps.setString(1, bucketName);
            ps.setString(2, bucketPath);
            ps.executeUpdate();
            ResultSet rs = ps.getGeneratedKeys();
            if (rs != null && rs.next()) {
                bucketPathId = rs.getLong(1);
            } else {
                // for completeness...but should never happen
                throw new IllegalStateException("id autogeneration failed");
            }
        } catch (SQLException x) {
            if (translator.isDuplicate(x)) {
                bucketPathId = null; // select it later
            } else {
                // log this, but don't propagate values in the exception
                logger.log(Level.SEVERE, "Error registering bucket: " + INS + "; "
                    + bucketName);
                throw translator.translate(x);
            }
        }
        
        // If we didn't create a new record, fetch the id of the existing record
        if (bucketPathId == null) {
            final String SQL = "SELECT bucket_path_id FROM bucket_paths WHERE bucket_name = ? AND bucket_path = ?";
            try (PreparedStatement ps = c.prepareStatement(SQL)) {
                ps.setString(1, bucketName);
                ps.setString(2, bucketPath);
                ResultSet rs = ps.executeQuery();
                if (rs.next()) {
                    bucketPathId = rs.getLong(1);
                }
            } catch (SQLException x) {
                // log this, but don't propagate values in the exception
                logger.log(Level.SEVERE, "Error getting bucket path: " + SQL + "; "
                    + bucketName);
                throw translator.translate(x);
            }
        }
        
        return bucketPathId;
    }
}